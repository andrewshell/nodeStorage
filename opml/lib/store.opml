<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>lib/store.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="lib/store.js">
		<outline text="const fs = require (&quot;fs&quot;);"></outline>
		<outline text="const filesystem = require (&quot;davefilesystem&quot;);"></outline>
		<outline isComment="true" text="const filesystem = require (&quot;../lib/filesystem.js&quot;);"></outline>
		<outline isComment="true" text="const mime = require (&quot;mime&quot;); "></outline>
		<outline text="const s3 = require (&quot;../lib/s3.js&quot;);"></outline>
		<outline text="const utils = require (&quot;daveutils&quot;);"></outline>
		<outline isComment="true" text="const utils = require (&quot;../lib/utils.js&quot;);"></outline>
		<outline text=""></outline>
		<outline text="exports.init = init;"></outline>
		<outline text="exports.newObject = stNewObject;"></outline>
		<outline text="exports.getObject = stGetObject;"></outline>
		<outline text="exports.listObjects = stListObjects;"></outline>
		<outline text="exports.serveObject = stServeObject;"></outline>
		<outline text="exports.getUrl = stGetUrl;"></outline>
		<outline text=""></outline>
		<outline text="var stGlobals = {">
			<outline text="flLocalFileSystem: false,"></outline>
			<outline text="publicPath: &quot;&quot;,"></outline>
			<outline text="privatePath: &quot;&quot;,"></outline>
			<outline text="basePublicUrl: undefined"></outline>
			<outline text="};"></outline>
			</outline>
		<outline isComment="true" text=""></outline>
		<outline isComment="true" text="[[http://fargo.io/code/node/shared/fs.js]] "></outline>
		<outline text=""></outline>
		<outline text="function init (flLocalFileSystem, publicPath, privatePath, basePublicUrl) {">
			<outline isComment="true" text="console.log (&quot;store.init: flLocalFileSystem == &quot; + flLocalFileSystem + &quot;, publicPath == &quot; + publicPath + &quot;, privatePath == &quot; + privatePath);"></outline>
			<outline text="stGlobals = new Object ();"></outline>
			<outline text="stGlobals.flLocalFileSystem = flLocalFileSystem;"></outline>
			<outline text="stGlobals.publicPath = publicPath;"></outline>
			<outline text="stGlobals.privatePath = privatePath;"></outline>
			<outline text="stGlobals.basePublicUrl = basePublicUrl;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stNewObject (path, data, type, acl, callback, metadata) {">
			<outline isComment="true" text="console.log (&quot;store.newObject: path == &quot; + path);"></outline>
			<outline text="if (stGlobals.flLocalFileSystem) {">
				<outline text="if (utils.stringContains (path, &quot;./&quot;)) { //7/7/16 by DW">
					<outline text="var err = {">
						<outline text="message: &quot;Can't save the file because the name contains illegal characters.&quot;"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="callback (err);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="filesystem.newObject (path, data, type, acl, callback, metadata);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="s3.newObject (path, data, type, acl, callback, metadata);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stGetObject (path, callback) {">
			<outline isComment="true" text="Changes">
				<outline text="7/28/15; 4:14:27 PM by DW">
					<outline text="On an error, if the code is ENOENT, we change it to the code that S3 would return, NoSuchKey. This is what the API is looking for, because in some circumstances this is not an error. For example the first time MWE launches, and we're trying to get the user's appPrefs.json file. If it doesn't exist, we create one. "></outline>
					</outline>
				</outline>
			<outline isComment="true" text="console.log (&quot;store.getObject: path == &quot; + path);"></outline>
			<outline text="if (stGlobals.flLocalFileSystem) {">
				<outline text="filesystem.getObject (path, function (error, data) {">
					<outline text="if (error) { //see comment in changes above">
						<outline isComment="true" text="console.log (&quot;store.getObject: error.code == &quot; + error.code);"></outline>
						<outline text="if (error.code == &quot;ENOENT&quot;) {">
							<outline text="error.code = &quot;NoSuchKey&quot;;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="callback (error, data); //pass the result back up to the caller"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="s3.getObject (path, callback);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stListObjects (path, callback) { //store.listObjects ">
			<outline text="function fileLister (folderpath, callback) { //3/23/16 by DW">
				<outline text="filesystem.recursivelyVisitFiles (folderpath, function (f) {">
					<outline text="if (f === undefined) { //last file">
						<outline text="callback ({">
							<outline text="flLastObject: true"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="callback ({">
							<outline text="Key: f,"></outline>
							<outline text="s3path: f,"></outline>
							<outline text="Size: 1"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text="console.log (&quot;stListObjects: path == &quot; + path); //3/1/20 by DW "></outline>
			<outline text="if (stGlobals.flLocalFileSystem) {">
				<outline text="filesystem.sureFilePath (path, function () { //7/19/15 by DW -- create the folder if it doesn't exist">
					<outline text="fileLister (path, callback);"></outline>
					<outline isComment="true" text="fsListObjects (path, callback);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="s3.listObjects (path, callback);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stServeObject (virtualpath, callback) { //7/28/15 by DW">
			<outline text="var physicalpath;"></outline>
			<outline text="function extensionToType (path) { ">
				<outline text="var ext = utils.stringLastField (physicalpath, &quot;.&quot;);"></outline>
				<outline text="return (utils.httpExt2MIME (ext)); //6/27/18 by DW"></outline>
				<outline isComment="true" text="mime.default_type = &quot;text/plain&quot;;"></outline>
				<outline isComment="true" text="return (mime.lookup (ext.toLowerCase ()));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text="console.log (&quot;store.serveFile: virtualpath == &quot; + virtualpath);"></outline>
			<outline text="if (utils.beginsWith (virtualpath, &quot;/&quot;)) {">
				<outline text="virtualpath = utils.stringDelete (virtualpath, 1, 1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="physicalpath = stGlobals.publicPath + virtualpath;"></outline>
			<outline text="stGetObject (physicalpath, function (error, data) {">
				<outline text="var internalErrorCode = undefined;"></outline>
				<outline text="if (error) {">
					<outline text="if (error.code == &quot;EISDIR&quot;) { //path points to a directory, not  a file">
						<outline text="internalErrorCode = 1;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="callback (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, utils.jsonStringify (error), internalErrorCode);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (200, {&quot;Content-Type&quot;: extensionToType (physicalpath)}, data.Body.toString ());"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stGetUrl (physicalpath) {">
			<outline isComment="true" text="Changes">
				<outline text="3/22/16; 7:02:14 PM by DW">
					<outline text="A little defensive driving. If the base URL ends with a /, delete the slash before concatenating with the virtual path."></outline>
					</outline>
				</outline>
			<outline text="if (stGlobals.basePublicUrl !== undefined) {">
				<outline text="var virtualpath = utils.stringDelete (physicalpath, 1, stGlobals.publicPath.length);"></outline>
				<outline text=""></outline>
				<outline text="var baseurl = stGlobals.basePublicUrl; //3/22/16 by DW"></outline>
				<outline text="if (utils.endsWith (baseurl, &quot;/&quot;)) {">
					<outline text="baseurl = utils.stringDelete (baseurl, baseurl.length, 1);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (!utils.beginsWith (virtualpath, &quot;/&quot;)) {">
					<outline text="virtualpath = &quot;/&quot; + virtualpath;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (baseurl + virtualpath);"></outline>
				<outline text=""></outline>
				<outline isComment="true" text="http://storage.bloatware.org:1229/users/davewiner/essays/002.html"></outline>
				<outline isComment="true" text="return (&quot;http://storage.bloatware.org:1229&quot; + virtualpath);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="return (&quot;http:/&quot; + physicalpath);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		</body>
	</opml>
