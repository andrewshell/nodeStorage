<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>storage.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="storage.js">
		<outline created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831" text="var myVersion = &quot;0.9.7&quot;, myProductName = &quot;nodeStorage&quot;;  "></outline>
		<outline text=""></outline>
		<outline text="/* The MIT License (MIT) ">
			<outline text=""></outline>
			<outline text="Copyright (c) 2014-2016 Dave Winer"></outline>
			<outline text=""></outline>
			<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"></outline>
			<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"></outline>
			<outline text="in the Software without restriction, including without limitation the rights"></outline>
			<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"></outline>
			<outline text="copies of the Software, and to permit persons to whom the Software is"></outline>
			<outline text="furnished to do so, subject to the following conditions:"></outline>
			<outline text=""></outline>
			<outline text="The above copyright notice and this permission notice shall be included in all"></outline>
			<outline text="copies or substantial portions of the Software."></outline>
			<outline text=""></outline>
			<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"></outline>
			<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"></outline>
			<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"></outline>
			<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"></outline>
			<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"></outline>
			<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"></outline>
			<outline text="SOFTWARE."></outline>
			<outline text=""></outline>
			<outline text="structured listing: http://scripting.com/listings/storage.html"></outline>
			<outline text="*/"></outline>
			</outline>
		<outline created="Tue, 15 Apr 2014 20:31:53 GMT" pgfnum="40037" text=""></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="var http = require (&quot;http&quot;); "></outline>
		<outline created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074" text="var urlpack = require (&quot;url&quot;);"></outline>
		<outline created="Mon, 21 Apr 2014 13:38:52 GMT" pgfnum="40297" text="var twitterAPI = require (&quot;node-twitter-api&quot;);"></outline>
		<outline text="var websocket = require (&quot;nodejs-websocket&quot;); //11/11/15 by DW"></outline>
		<outline text="var fs = require (&quot;fs&quot;);"></outline>
		<outline text="var request = require (&quot;request&quot;);"></outline>
		<outline text="var querystring = require (&quot;querystring&quot;); //8/31/15 by DW"></outline>
		<outline text="var s3 = require (&quot;./lib/s3.js&quot;);"></outline>
		<outline text="var store = require (&quot;./lib/store.js&quot;); //7/28/15 by DW"></outline>
		<outline text="var utils = require (&quot;daveutils&quot;);"></outline>
		<outline isComment="true" text="var utils = require (&quot;./lib/utils.js&quot;);"></outline>
		<outline text="var names = require (&quot;./lib/names.js&quot;);"></outline>
		<outline text="var rss = require (&quot;./lib/rss.js&quot;);"></outline>
		<outline text="var callbacks = require (&quot;./lib/callbacks.js&quot;);"></outline>
		<outline text="var update = require (&quot;./lib/update.js&quot;);"></outline>
		<outline text="var dns = require (&quot;dns&quot;);"></outline>
		<outline text="var os = require (&quot;os&quot;);"></outline>
		<outline text="var qs = require (&quot;querystring&quot;); //4/28/16 by DW"></outline>
		<outline created="Tue, 15 Apr 2014 20:32:04 GMT" pgfnum="40038" text=""></outline>
		<outline text="//environment variables">
			<outline created="Sat, 01 Feb 2014 18:42:45 GMT" pgfnum="36699" text="var myPort = process.env.PORT;"></outline>
			<outline text="var flEnabled = process.env.enabled; "></outline>
			<outline created="Wed, 22 Jan 2014 02:50:48 GMT" pgfnum="36217" text="var s3Path = process.env.s3Path; //where we store publicly accessible data, user files, logs"></outline>
			<outline created="Wed, 22 Jan 2014 02:50:48 GMT" pgfnum="36217" text="var s3PrivatePath = process.env.s3PrivatePath; //where we store private stuff, user's prefs for example"></outline>
			<outline created="Mon, 30 Jun 2014 15:40:00 GMT" isComment="true" pgfnum="42619" text="var myDomain = process.env.myDomain; "></outline>
			<outline text="var twitterConsumerKey = process.env.twitterConsumerKey;  //5/8/15 by DW"></outline>
			<outline text="var twitterConsumerSecret = process.env.twitterConsumerSecret; //5/8/15 by DW"></outline>
			<outline created="Mon, 30 Jun 2014 15:40:00 GMT" pgfnum="42619" text="var myDomain = process.env.myDomain;  //5/8/15 by DW"></outline>
			<outline text=""></outline>
			<outline text="var urlWhitelist = process.env.urlUserWhitelist; //5/8/15 by DW"></outline>
			<outline text="var bitlyApiKey = process.env.bitlyApiKey;"></outline>
			<outline text="var bitlyApiUsername = process.env.bitlyApiUsername;"></outline>
			<outline text="var longPollTimeoutSecs = process.env.longPollTimeoutSecs; "></outline>
			<outline text="var flLocalFilesystem = false; //7/28/15 DW"></outline>
			<outline text="var basePublicUrl = undefined; //7/29/15 by DW"></outline>
			<outline text="var flForceTwitterLogin = false; //2/19/16 by DW"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="var fnameConfig = &quot;config.json&quot;; //config, another way of setting environment variables -- 5/8/15 by DW"></outline>
		<outline text=""></outline>
		<outline created="Tue, 11 Feb 2014 20:26:04 GMT" pgfnum="37487" text="var serverStats = {">
			<outline created="Wed, 12 Feb 2014 15:55:49 GMT" pgfnum="37568" text="today: new Date (),"></outline>
			<outline text="ctStatsSaves: 0,"></outline>
			<outline created="Tue, 11 Feb 2014 20:26:46 GMT" pgfnum="37491" text="ctHits: 0, "></outline>
			<outline created="Tue, 11 Feb 2014 22:44:28 GMT" pgfnum="37501" text="ctHitsThisRun: 0,"></outline>
			<outline created="Tue, 11 Feb 2014 22:44:28 GMT" pgfnum="37501" text="ctHitsToday: 0,"></outline>
			<outline created="Tue, 11 Feb 2014 20:26:46 GMT" pgfnum="37491" text="ctTweets: 0, "></outline>
			<outline created="Tue, 11 Feb 2014 22:44:28 GMT" pgfnum="37501" text="ctTweetsThisRun: 0,"></outline>
			<outline created="Tue, 11 Feb 2014 20:26:46 GMT" pgfnum="37491" text="ctTweetsToday: 0, "></outline>
			<outline created="Wed, 30 Apr 2014 01:24:12 GMT" pgfnum="40676" text="ctTweetErrors: 0,"></outline>
			<outline created="Tue, 11 Feb 2014 20:26:56 GMT" pgfnum="37492" text="whenServerStart: 0,"></outline>
			<outline created="Tue, 29 Apr 2014 01:25:51 GMT" pgfnum="40620" text="ctHoursServerUp: 0,"></outline>
			<outline created="Mon, 28 Apr 2014 16:36:22 GMT" pgfnum="40618" text="ctServerStarts: 0,"></outline>
			<outline created="Sun, 27 Apr 2014 19:01:35 GMT" pgfnum="40560" text="version: 0,"></outline>
			<outline created="Sat, 10 May 2014 21:48:54 GMT" isComment="true" pgfnum="41476" text="nextUrlString: &quot;0&quot;,"></outline>
			<outline created="Thu, 26 Jun 2014 16:29:37 GMT" pgfnum="42487" text="ctFileSaves: 0, //8/3/14 by DW"></outline>
			<outline text="ctLongPollPushes: 0,  //12/16/14 by DW"></outline>
			<outline text="ctLongPollPops: 0,  //12/16/14 by DW"></outline>
			<outline text="ctLongPollTimeouts: 0,  //12/16/14 by DW"></outline>
			<outline text="ctLongPollUpdates: 0, //12/16/14 by DW"></outline>
			<outline text="ctCurrentLongPolls: 0,  //12/16/14 by DW"></outline>
			<outline text="ctLongPollsToday: 0,  //12/17/14 by DW"></outline>
			<outline text="currentLogPolls: new Array (), //1/29/15 by DW"></outline>
			<outline text="ctChatPosts: 0, //8/25/15 by DW"></outline>
			<outline text="ctChatPostsToday: 0, //8/29/15 by DW"></outline>
			<outline text="whenLastChatPost: new Date (0), //8/25/15 by DW"></outline>
			<outline text=""></outline>
			<outline text="chatLogStats: { //1/20/16 by DW">
				<outline text="logStats: new Object () //one for each chatlog"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			<outline created="Tue, 11 Feb 2014 20:27:05 GMT" pgfnum="37493" text="recentTweets: []"></outline>
			<outline created="Tue, 11 Feb 2014 20:26:41 GMT" pgfnum="37490" text="};"></outline>
			</outline>
		<outline text="var fnameStats = &quot;data/serverStats.json&quot;, flStatsDirty = false, maxrecentTweets = 500; "></outline>
		<outline text="var s3RssPath = &quot;rss.xml&quot;; //10/6/15 by DW"></outline>
		<outline text=""></outline>
		<outline text=""></outline>
		<outline text="var serverPrefs = {">
			<outline text="flArchiveTweets: true"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var fnamePrefs = &quot;data/serverPrefs.json&quot;;"></outline>
		<outline text="var fnameTweetsFolder = &quot;data/tweets/&quot;;"></outline>
		<outline text="var userDomain = undefined; //7/13/15 by DW"></outline>
		<outline text=""></outline>
		<outline created="Mon, 21 Apr 2014 14:41:52 GMT" pgfnum="40331" text="var requestTokens = []; //used in the OAuth dance"></outline>
		<outline created="Wed, 09 Jul 2014 23:26:56 GMT" pgfnum="42738" text="var screenNameCache = []; "></outline>
		<outline text=""></outline>
		<outline text="var flWatchAppDateChange = false, fnameApp = &quot;storage.js&quot;, origAppModDate; //8/26/15 by DW -- can only be sent through config.json"></outline>
		<outline text="var domainIncomingWebhook; //8/28/15 by DW"></outline>
		<outline text="var usersWhoCanCreateWebhooks; //8/30/15 by DW -- if it's undefined, no one can"></outline>
		<outline text="var usersWhoCanModerate; //11/30/15 by DW -- if it's undefined, no one can"></outline>
		<outline text="var flScheduledEveryMinute = false; //9/2/15 by DW"></outline>
		<outline text="var urlPublicFolder; //10/6/15 by DW"></outline>
		<outline text="var urlHomePageContent = &quot;http://1999.io/dev/index.html&quot;; //10/11/15 by DW -- what we serve when a request comes in for /"></outline>
		<outline text="var websocketPort; //11/11/15 by DW"></outline>
		<outline text="var homePageConfig = { //3/21/16 by DW">
			<outline text="};"></outline>
			</outline>
		<outline text="var urlFavicon = &quot;http://1999.io/favicon.ico&quot;; //3/26/16 by DW"></outline>
		<outline text="var indexFileName = &quot;index.html&quot;; //3/27/16 by DW"></outline>
		<outline isComment="true" text="var websocketDomain = undefined; //4/17/16 by DW"></outline>
		<outline text="var theEditors = { //4/29/16 by DW">
			<outline text="};"></outline>
			</outline>
		<outline text="var thePlugIns = { //5/14/16 by DW">
			<outline text="};"></outline>
			</outline>
		<outline text="var theDomainMap = { //5/27/16 by DW">
			<outline text="};"></outline>
			</outline>
		<outline text="var facebookAppId = undefined; //5/2/16 by DW"></outline>
		<outline text="var url404page = undefined; //6/25/16 by DW"></outline>
		<outline text="var flUsePortInRedirect = true; //2/27/18 by DW"></outline>
		<outline text=""></outline>
		<outline created="Sun, 08 Jun 2014 14:20:26 GMT" pgfnum="42010" text=""></outline>
		<outline created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035" text="function httpReadUrl (url, callback) {">
			<outline text="request (url, function (error, response, body) {">
				<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
					<outline text="callback (body) "></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038" text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline created="Wed, 03 Sep 2014 11:59:23 GMT" pgfnum="43256" text="//request token cache -- part of the OAuth dance">
			<outline created="Sat, 23 Nov 2013 16:35:47 GMT" pgfnum="32071" text="function findRequestToken (theRequestToken, flDelete) {">
				<outline created="Sat, 23 Nov 2013 16:36:28 GMT" pgfnum="32073" text="for (var i = 0; i &lt; requestTokens.length; i++) {">
					<outline created="Sat, 23 Nov 2013 16:36:39 GMT" pgfnum="32075" text="if (requestTokens [i].rt == theRequestToken) {">
						<outline created="Sat, 23 Nov 2013 16:37:11 GMT" pgfnum="32077" text="var secret = requestTokens [i].secret;"></outline>
						<outline created="Mon, 21 Apr 2014 17:00:42 GMT" pgfnum="40379" text="requestTokens.splice (i, 1);"></outline>
						<outline created="Mon, 21 Apr 2014 17:00:36 GMT" pgfnum="40377" text="return (secret);"></outline>
						<outline created="Sat, 23 Nov 2013 16:37:02 GMT" pgfnum="32076" text="}"></outline>
						</outline>
					<outline created="Sat, 23 Nov 2013 16:36:30 GMT" pgfnum="32074" text="}"></outline>
					</outline>
				<outline created="Sat, 23 Nov 2013 16:37:19 GMT" pgfnum="32078" text="return (undefined);"></outline>
				<outline created="Sat, 23 Nov 2013 16:36:01 GMT" pgfnum="32072" text="}"></outline>
				</outline>
			<outline created="Mon, 21 Apr 2014 16:42:08 GMT" pgfnum="40364" text="function saveRequestToken (requestToken, requestTokenSecret) {">
				<outline created="Mon, 21 Apr 2014 16:42:32 GMT" pgfnum="40366" text="var obj = new Object ();"></outline>
				<outline created="Mon, 21 Apr 2014 16:42:39 GMT" pgfnum="40367" text="obj.rt = requestToken;"></outline>
				<outline created="Mon, 21 Apr 2014 16:42:44 GMT" pgfnum="40368" text="obj.secret = requestTokenSecret;"></outline>
				<outline created="Mon, 25 Feb 2013 03:09:00 GMT" pgfnum="19069" text="requestTokens [requestTokens.length] = obj;"></outline>
				<outline created="Mon, 21 Apr 2014 16:42:29 GMT" pgfnum="40365" text="}"></outline>
				</outline>
			</outline>
		<outline text="//whitelist -- 11/18/14 by DW">
			<outline text="var userWhitelist = [], flWhitelist = false;"></outline>
			<outline text=""></outline>
			<outline text="function readUserWhitelist (callback) {">
				<outline isComment="true" text="console.log (&quot;readUserWhitelist: urlWhitelist == &quot; + urlWhitelist); //5/20/15 by DW"></outline>
				<outline text="if ((urlWhitelist !== undefined) &amp;&amp; (urlWhitelist.length &gt; 0)) {">
					<outline created="Fri, 14 Jun 2013 15:50:56 GMT" pgfnum="26186" text="httpReadUrl (urlWhitelist, function (s) {">
						<outline text="try {">
							<outline text="userWhitelist = JSON.parse (s);"></outline>
							<outline isComment="true" text="console.log (&quot;readWhitelist: &quot; + userWhitelist.length + &quot; names on the list.&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="catch (err) {">
							<outline text="console.log (&quot;readWhitelist: error parsing whitelist JSON -- \&quot;&quot; + err + &quot;\&quot;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (callback != undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function isWhitelistedUser (username) {">
				<outline text="if (flWhitelist) {">
					<outline text="username = utils.stringLower (username);"></outline>
					<outline isComment="true" text="console.log (&quot;isWhitelistedUser: username == &quot; + username + &quot;, userWhitelist == &quot; + userWhitelist);"></outline>
					<outline text="for (var i = 0; i &lt; userWhitelist.length; i++) {">
						<outline text="if (utils.stringLower (userWhitelist [i]) == username) {">
							<outline text="return (true);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (false);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else { //no whitelist, everyone is whitelisted">
					<outline isComment="true" text="console.log (&quot;isWhitelistedUser: no whitelist, everyone is whitelisted&quot;);"></outline>
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			</outline>
		<outline isComment="true" text="//websockets -- 11/11/15 by DW">
			<outline text="var waitingWebSocketCalls = new Array ();"></outline>
			<outline text=""></outline>
			<outline text="function pushWebSocket (urlToWatchFor, wsConnection) {">
				<outline text="var ctMilliseconds = getLongpollTimeout ();"></outline>
				<outline text="var whenExpires = new Date (Number (new Date ()) + ctMilliseconds);"></outline>
				<outline text="waitingWebSocketCalls [waitingWebSocketCalls.length] = {">
					<outline text="url: urlToWatchFor,"></outline>
					<outline text="whenTimeout: whenExpires,"></outline>
					<outline text="theConnection: wsConnection"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function checkWebSocketCalls () { //expire timed-out calls">
				<outline text="var now = new Date ();"></outline>
				<outline text="for (var i = waitingWebSocketCalls.length - 1; i &gt;= 0; i--) {">
					<outline text="var obj = waitingWebSocketCalls [i];"></outline>
					<outline text="if (now &gt;= obj.whenTimeout) {">
						<outline isComment="true" text="console.log (&quot;Timing-out webSocket request #&quot; + i);"></outline>
						<outline text=""></outline>
						<outline text="try {">
							<outline text="obj.theConnection.sendText (&quot;timeout&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="waitingWebSocketCalls.splice (i, 1);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function checkWebSocketCallsForUrl (url, filetext) { //if someone was waiting for the url to change, their wait is over">
				<outline text="for (var i = waitingWebSocketCalls.length - 1; i &gt;= 0; i--) {">
					<outline text="var obj = waitingWebSocketCalls [i];"></outline>
					<outline text="if (obj.url == url) {">
						<outline text="console.log (&quot;WebSocket request #&quot; + i + &quot; is returning because the resource updated.&quot;);"></outline>
						<outline text="try {">
							<outline text="obj.theConnection.sendText (&quot;update\r&quot; + filetext);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"></outline>
							</outline>
						<outline text="waitingWebSocketCalls.splice (i, 1);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function handleWebSocketConnection (conn) {">
				<outline text="conn.on (&quot;text&quot;, function (urlToWatchFor) {">
					<outline text="getDomainName (conn.socket.remoteAddress, function (theName) { //log the request">
						<outline text="var freemem = gigabyteString (os.freemem ()), method = &quot;WS&quot;, now = new Date (); "></outline>
						<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + urlToWatchFor + &quot; &quot; + theName);"></outline>
						<outline text="});"></outline>
						<outline text=""></outline>
						<outline isComment="true" text="var freemem = gigabyteString (os.freemem ()), method = &quot;WS&quot;, now = new Date (); "></outline>
						<outline isComment="true" text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + urlToWatchFor);"></outline>
						</outline>
					<outline text="pushWebSocket (urlToWatchFor, conn);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="conn.on (&quot;close&quot;, function () {">
					<outline isComment="true" text="console.log (&quot;handleWebSocketConnection: close event.&quot;);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="conn.on (&quot;error&quot;, function (err) {">
					<outline isComment="true" text="console.log (&quot;handleWebSocketConnection: error event.&quot;);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline text="//long polling -- 12/15/14 by DW">
			<outline text="var waitingLongpolls = new Array ();"></outline>
			<outline text=""></outline>
			<outline text="function getLongpollTimeout () {">
				<outline text="if (longPollTimeoutSecs == undefined) { //the environment variable wasn't defined">
					<outline text="return (60000); //60 seconds"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="return (Number (longPollTimeoutSecs) * 1000.0);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function pushLongpoll (urlToWatchFor, httpResponse, clientIpAddress) {">
				<outline text="var ctMilliseconds = getLongpollTimeout ();"></outline>
				<outline text="var whenExpires = new Date (Number (new Date ()) + ctMilliseconds);"></outline>
				<outline text="waitingLongpolls [waitingLongpolls.length] = {">
					<outline text="url: urlToWatchFor,"></outline>
					<outline text="whenTimeout: whenExpires,"></outline>
					<outline text="client: clientIpAddress,"></outline>
					<outline text="response: httpResponse"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="serverStats.ctLongPollPushes++; "></outline>
				<outline text="serverStats.ctLongPollsToday++;"></outline>
				<outline text="flStatsDirty = true;"></outline>
				<outline isComment="true" text="console.log (&quot;pushLongpoll: &quot; + waitingLongpolls.length + &quot; requests are waiting in the array.&quot;)"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function checkLongpolls () { //expire timed-out longpolls">
				<outline text="var now = new Date ();"></outline>
				<outline text="for (var i = waitingLongpolls.length - 1; i &gt;= 0; i--) {">
					<outline text="var obj = waitingLongpolls [i];"></outline>
					<outline text="if (now &gt;= obj.whenTimeout) {">
						<outline isComment="true" text="console.log (&quot;Timing-out request #&quot; + i);"></outline>
						<outline text="obj.response.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
						<outline text="obj.response.end (&quot;timeout&quot;);    "></outline>
						<outline text="waitingLongpolls.splice (i, 1);"></outline>
						<outline text="serverStats.ctLongPollPops++; "></outline>
						<outline text="serverStats.ctLongPollTimeouts++; "></outline>
						<outline text="flStatsDirty = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="checkWebSocketCalls (); //11/11/15 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function checkLongpollsForUrl (url, filetext) { //if someone was waiting for the url to change, their wait is over">
				<outline isComment="true" text="Changes">
					<outline text="12/18/14; 9:46:09 AM by DW">
						<outline text="Change in the protocol. If there's an update, we add the file text after the world &quot;update&quot;. The two are separated by a \r. This way the client doesn't have to do another HTTP request to get the file text. Since we have it right here we might as well send it back with the notification."></outline>
						</outline>
					</outline>
				<outline text="for (var i = waitingLongpolls.length - 1; i &gt;= 0; i--) {">
					<outline text="var obj = waitingLongpolls [i];"></outline>
					<outline text="if (obj.url == url) {">
						<outline text="console.log (&quot;Request #&quot; + i + &quot; is returning because the resource updated.&quot;);"></outline>
						<outline text="obj.response.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
						<outline text="obj.response.end (&quot;update\r&quot; + filetext);    "></outline>
						<outline text="waitingLongpolls.splice (i, 1);"></outline>
						<outline text="serverStats.ctLongPollPops++; "></outline>
						<outline text="serverStats.ctLongPollUpdates++; "></outline>
						<outline text="flStatsDirty = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="checkWebSocketCallsForUrl (url, filetext); //11/11/15 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			</outline>
		<outline text="//websockets rewrite -- 11/29/15 by DW">
			<outline text="var theWsServer;"></outline>
			<outline text=""></outline>
			<outline text="function checkWebSocketCalls () { //expire timed-out calls">
				<outline text="}"></outline>
				</outline>
			<outline text="function checkWebSocketCallsForUrl (url, filetext) { ">
				<outline text="if (theWsServer !== undefined) {">
					<outline text="var ctUpdates = 0;"></outline>
					<outline text="for (var i = 0; i &lt; theWsServer.connections.length; i++) {">
						<outline text="var conn = theWsServer.connections [i];"></outline>
						<outline text="if (conn.chatLogData !== undefined) { //it's one of ours">
							<outline text="if (conn.chatLogData.urlToWatch !== undefined) { //we're watching a url">
								<outline text="if (conn.chatLogData.urlToWatch == url) { //it's our url">
									<outline text="try {">
										<outline text="conn.sendText (&quot;update\r&quot; + filetext);"></outline>
										<outline isComment="true" text="console.log (&quot;socket #&quot; + i + &quot;: received update&quot;);"></outline>
										<outline text="ctUpdates++;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="catch (err) {">
										<outline isComment="true" text="console.log (&quot;socket #&quot; + i + &quot;: error updating&quot;);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (ctUpdates &gt; 0) {">
						<outline text="console.log (&quot;checkWebSocketCallsForUrl: &quot; + ctUpdates + &quot; sockets were updated.&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function handleWebSocketConnection (conn) { ">
				<outline text="var now = new Date ();"></outline>
				<outline text=""></outline>
				<outline text="function logToConsole (conn, verb, value) {">
					<outline text="getDomainName (conn.socket.remoteAddress, function (theName) { //log the request">
						<outline text="var freemem = gigabyteString (os.freemem ()), method = &quot;WS:&quot; + verb, now = new Date (); "></outline>
						<outline text="if (theName === undefined) {">
							<outline text="theName = conn.socket.remoteAddress;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + value + &quot; &quot; + theName);"></outline>
						<outline text="conn.chatLogData.domain = theName; "></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline isComment="true" text="console.log (&quot;New connection received.&quot;);"></outline>
				<outline text="conn.chatLogData = {">
					<outline text="whenStarted: now"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="conn.on (&quot;text&quot;, function (s) {">
					<outline text="var words = s.split (&quot; &quot;);"></outline>
					<outline text="if (words.length &gt; 1) { //new protocol as of 11/29/15 by DW">
						<outline text="conn.chatLogData.whenLastUpdate = now;"></outline>
						<outline text="conn.chatLogData.lastVerb = words [0];"></outline>
						<outline text="switch (words [0]) {">
							<outline text="case &quot;watch&quot;:">
								<outline text="conn.chatLogData.urlToWatch = utils.trimWhitespace (words [1]);"></outline>
								<outline text="logToConsole (conn, conn.chatLogData.lastVerb, conn.chatLogData.urlToWatch);"></outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="conn.close ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="conn.on (&quot;close&quot;, function () {">
					<outline isComment="true" text="console.log (&quot;'close' message received.&quot;);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="conn.on (&quot;error&quot;, function (err) {">
					<outline isComment="true" text="logToConsole (conn, &quot;error&quot;, err.code);"></outline>
					<outline isComment="true" text="conn.close (); //11/30/15 by DW -- https://github.com/scripting/betterWebSocketsDemo/issues/2#issuecomment-160658118"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function webSocketStartup (thePort) {">
				<outline text="try {">
					<outline text="theWsServer = websocket.createServer (handleWebSocketConnection);"></outline>
					<outline text="theWsServer.listen (thePort);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="catch (err) {">
					<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function countOpenSockets () {">
				<outline text="if (theWsServer === undefined) { //12/18/15 by DW">
					<outline text="return (0);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="return (theWsServer.connections.length);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getOpenSocketsArray () { //return an array with data about open sockets">
				<outline text="var theArray = new Array ();"></outline>
				<outline text="for (var i = 0; i &lt; theWsServer.connections.length; i++) {">
					<outline text="var conn = theWsServer.connections [i];"></outline>
					<outline text="if (conn.chatLogData !== undefined) { //it's one of ours">
						<outline text="theArray [theArray.length] = {">
							<outline text="arrayIndex: i,"></outline>
							<outline text="lastVerb: conn.chatLogData.lastVerb,"></outline>
							<outline text="urlToWatch: conn.chatLogData.urlToWatch,"></outline>
							<outline text="domain: conn.chatLogData.domain,"></outline>
							<outline text="whenStarted: utils.viewDate (conn.chatLogData.whenStarted),"></outline>
							<outline text="whenLastUpdate: utils.viewDate (conn.chatLogData.whenLastUpdate)"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (theArray);"></outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline text="//blocking -- 11/9/14 by DW">
			<outline isComment="true" text="var blockedTags = [">
				<outline text="&quot;votefifthharmony&quot;, &quot;votefifth&quot;, &quot;fifth harmony&quot;, &quot;allylovesyou&quot;, &quot;weluvallyb&quot;, &quot;#ama&quot;, &quot;punishleonopoulos&quot;, &quot;gadhimai&quot;, &quot;greaterlagos&quot;, &quot;normanikordei&quot;"></outline>
				<outline text="];"></outline>
				</outline>
			<outline isComment="true" text="var blockedUsers = [">
				<outline text="&quot;immrs_payne&quot;, &quot;gabiroodrigues_&quot;, &quot;voema5&quot;, &quot;theyseles&quot;, &quot;brookehitou&quot;, &quot;kordeiofusca&quot;, &quot;5hbrazil&quot;, &quot;buttcamilabutt&quot;, &quot;withyoucamz&quot;, &quot;cabellocuteaf&quot;, &quot;kissme5h&quot;, &quot;scomiching&quot;, &quot;slayptx&quot;, &quot;laurjaurlj&quot;, &quot;cabellwoahh&quot;, &quot;5hema5h&quot;, &quot;beyharmony&quot;, &quot;camilalmighty&quot;, &quot;normilasgirl&quot;, &quot;minecamren&quot;, &quot;beyharmony&quot;, &quot;pepenature&quot;, &quot;titoelmasduro&quot;, &quot;cocaforest&quot;, &quot;natanrai&quot;, &quot;veganpunk108&quot;, &quot;mrayedee&quot;, &quot;minecamren&quot;, &quot;joyclee&quot;"></outline>
				<outline text="];"></outline>
				</outline>
			<outline isComment="true" text="function isBlockedUser (username) {">
				<outline text="username = utils.stringLower (username);"></outline>
				<outline text="for (var i = 0; i &lt; blockedUsers.length; i++) {">
					<outline text="if (blockedUsers [i] == username) {">
						<outline text="return (true);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text="function tweetContainsBlockedTag (s) {">
				<outline text="for (var i = 0; i &lt; blockedTags.length; i++) {">
					<outline text="if (utils.stringContains (s, blockedTags [i])) {">
						<outline text="return (true);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text=""></outline>
			<outline text="function tweetContainsBlockedTag (twitterStatus) { //blocking is not present in this version -- 12/16/14 by DW">
				<outline text="return (false); "></outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline text="//stats &amp; prefs -- 1/15/15 by DW">
			<outline text="function statsChanged () {">
				<outline text="flStatsDirty = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function loadStruct (fname, struct, callback) {">
				<outline isComment="true" text="Changes">
					<outline text="6/1/16; 10:06:14 AM by DW">
						<outline text="Make the JSON.parse call in a try so an error in the stats file doesn't kill the server at startup. This seems to happen when the disk got full somehow so there will quite possibly be other problems. "></outline>
						</outline>
					</outline>
				<outline created="Wed, 22 Jan 2014 23:07:46 GMT" pgfnum="36412" text="store.getObject (s3Path + fname, function (error, data) {">
					<outline text="if (!error) {">
						<outline created="Thu, 23 Jan 2014 18:37:27 GMT" pgfnum="36463" text="if (data != null) {">
							<outline text="try {">
								<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="var oldStruct = JSON.parse (data.Body);"></outline>
								<outline created="Sun, 27 Apr 2014 18:34:38 GMT" pgfnum="40531" text="for (var x in oldStruct) { ">
									<outline created="Tue, 05 Nov 2013 16:12:39 GMT" pgfnum="30856" text="struct [x] = oldStruct [x];"></outline>
									<outline created="Sun, 27 Apr 2014 18:36:17 GMT" pgfnum="40538" text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;loadStruct: error reading file \&quot;&quot; + fname + &quot;\&quot;, err.message == &quot; + err.message + &quot;\n&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Thu, 23 Jan 2014 18:37:33 GMT" pgfnum="36464" text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline created="Wed, 22 Jan 2014 23:07:55 GMT" pgfnum="36413" text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function saveStruct (fname, struct, callback) {">
				<outline text="store.newObject (s3Path + fname, utils.jsonStringify (struct), &quot;application/json&quot;, undefined, function () {">
					<outline text="if (callback !== undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Tue, 11 Feb 2014 22:39:40 GMT" pgfnum="37499" text="function loadServerStats (callback) {">
				<outline text="loadStruct (fnameStats, serverStats, function () {">
					<outline created="Tue, 11 Feb 2014 22:44:56 GMT" pgfnum="37502" text="serverStats.ctHitsThisRun = 0;"></outline>
					<outline created="Tue, 11 Feb 2014 22:44:56 GMT" pgfnum="37502" text="serverStats.ctTweetsThisRun = 0;"></outline>
					<outline text="serverStats.whenServerStart = new Date ();"></outline>
					<outline created="Mon, 28 Apr 2014 16:36:47 GMT" pgfnum="40619" text="serverStats.ctServerStarts++;"></outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline created="Tue, 11 Feb 2014 22:39:47 GMT" pgfnum="37500" text="}"></outline>
				</outline>
			<outline created="Sun, 27 Apr 2014 18:57:52 GMT" pgfnum="40558" text="function saveServerStats () {">
				<outline text="flStatsDirty = false;"></outline>
				<outline text="serverStats.ctStatsSaves++; //1/30/15 by DW"></outline>
				<outline created="Tue, 29 Apr 2014 01:25:51 GMT" pgfnum="40620" text="serverStats.ctHoursServerUp = utils.secondsSince (serverStats.whenServerStart) / 3600; //4/28/14 by DW"></outline>
				<outline text="serverStats.ctCurrentLongPolls = waitingLongpolls.length; //12/16/14 by DW"></outline>
				<outline text=""></outline>
				<outline text="//add info about current longPolls -- 1/29/15 by DW">
					<outline text="serverStats.currentLogPolls = new Array ();"></outline>
					<outline text="for (var i = 0; i &lt; waitingLongpolls.length; i++) {">
						<outline text="var obj = waitingLongpolls [i];"></outline>
						<outline text="serverStats.currentLogPolls [i] = {">
							<outline text="url: obj.url,"></outline>
							<outline isComment="true" text="secs: (Number (obj.whenTimeout) - Number (now)) / 1000,"></outline>
							<outline text="client: obj.client"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text=""></outline>
				<outline text="saveStruct (fnameStats, serverStats);"></outline>
				<outline isComment="true" text="store.newObject (s3Path + fnameStats, utils.jsonStringify (serverStats));"></outline>
				<outline created="Sun, 27 Apr 2014 18:57:57 GMT" pgfnum="40559" text="}"></outline>
				</outline>
			<outline text="function loadServerPrefs (callback) {">
				<outline text="loadStruct (fnamePrefs, serverPrefs, function () {">
					<outline text="saveStruct (fnamePrefs, serverPrefs);"></outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline text="//chat -- 8/25/15 by DW">
			<outline text="var flChatEnabled = true; //default -- 3/26/16 by DW"></outline>
			<outline text="var chatRssHeadElements = { //10/6/15 by DW">
				<outline text="title: &quot;nodeStorage chat feed&quot;,"></outline>
				<outline text="link: &quot;http://nodestorage.io/&quot;,"></outline>
				<outline text="description: &quot;A feed generated by the nodeStorage server app.&quot;,"></outline>
				<outline text="language: &quot;en-us&quot;,"></outline>
				<outline text="generator: myProductName + &quot; v&quot; + myVersion,"></outline>
				<outline text="docs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"></outline>
				<outline text="maxFeedItems: 100,"></outline>
				<outline text="appDomain: &quot;nodestorage.io&quot;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var fnameChatLog = &quot;data/chatLog.json&quot;, fnameChatLogPrefs = &quot;data/chatLogPrefs.json&quot;;"></outline>
			<outline text="var chatNotEnabledError = &quot;Can't post the chat message because the feature is not enabled on the server.&quot;;"></outline>
			<outline text="var maxChatLog = Infinity; //if you want to limit the amount of memory we use, make this smaller, like 250"></outline>
			<outline text="var maxLogLengthForClient = 50; //we won't return more than this number of log items to the client"></outline>
			<outline text="var flChatLogDirty = false, nameDirtyChatLog;"></outline>
			<outline text="var chatLogArray = new Array (); //10/26/15 by DW"></outline>
			<outline text=""></outline>
			<outline isComment="true" text="what's in a chatLogArray element?">
				<outline text="chatLog: array (one element for each top-level item in the log)"></outline>
				<outline text="prefs: struct (info about the chatlog, including &lt;i&gt;serialNum&lt;/i&gt; for the ID of the next item added)"></outline>
				<outline text="name: string (how the chatlog is identified)"></outline>
				<outline text="rssHeadElements: prefs for the RSS feed for the chatlog"></outline>
				<outline text="s3Path: where the public data for the chatlog is stored"></outline>
				<outline text="urlPublicFolder: the URL that corresponds with s3Path"></outline>
				<outline text="flDirty: boolean (if true, the chatlog needs to be saved)"></outline>
				<outline text="usersWhoCanPost: array of usernames"></outline>
				<outline text="renderingPrefs: address of template, menubar, info about the site, author's LinkedIn and GitHub accounts"></outline>
				</outline>
			<outline isComment="true" text="saved code">
				<outline isComment="true" text="function loadChatMessage (id, flLoadSubs, callback) { //10/5/15 by DW -- for possible future use">
					<outline isComment="true" text="Changes">
						<outline text="10/5/15; 9:25:12 AM by DW">
							<outline text="Read the message from the storage system, convert the subs list from an array of ids to the full content of the message, and recurse. "></outline>
							</outline>
						</outline>
					<outline text="if (flLoadSubs === undefined) {">
						<outline text="flLoadSubs = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="function loadItem (id, callback) {">
						<outline text="var f = getItemFile (id);"></outline>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;loadChatMessage: error reading file == &quot; + f + &quot;, err.message == &quot; + err.message);"></outline>
								<outline text="callback (undefined);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (data.toString ());"></outline>
								<outline isComment="true" text="console.log (&quot;loadItem: just read f == &quot; + f);"></outline>
								<outline text="if (flLoadSubs) {">
									<outline text="if (jstruct.subs !== undefined) {">
										<outline text="function getNextSub (subs, ix) {">
											<outline text="if (ix &lt; subs.length) {">
												<outline text="loadItem (subs [ix], function (substruct) {">
													<outline text="subs [ix] = substruct;"></outline>
													<outline text="getNextSub (subs, ix + 1);"></outline>
													<outline text="});"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="callback (jstruct);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="}"></outline>
											</outline>
										<outline text="getNextSub (jstruct.subs, 0);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="callback (jstruct);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="callback (jstruct);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="loadItem (id, function (jstruct) {">
						<outline text="callback (jstruct);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline isComment="true" text="function buildChatLogIndex (callback) { //10/5/15 by DW -- for possible future use">
					<outline text="function loadArray (sourceArray) {">
						<outline text="var destArray = new Array ();"></outline>
						<outline text="for (var i = 0; i &lt; sourceArray.length; i++) {">
							<outline text="var sourceitem = sourceArray [i];"></outline>
							<outline text="destArray [i] = {">
								<outline text="id: sourceitem.id"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="var destitem = destArray [i];"></outline>
							<outline text="if ((sourceitem.subs !== undefined) &amp;&amp; (sourceitem.subs.length &gt; 0)) {">
								<outline text="destitem.subs = loadArray (sourceitem.subs);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="return (destArray);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="chatLogIndex = loadArray (chatLog);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline isComment="true" text="function saveWholeChatLog () {">
					<outline text=""></outline>
					<outline text="for (var i = 0; i &lt; chatLog.length; i++) {">
						<outline text="saveChatMessage (chatLog [i]);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text=""></outline>
					<outline text="}"></outline>
					</outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			<outline text="function initChatLogStats (name) { //1/20/16 by DW">
				<outline text="if (serverStats.chatLogStats.logStats [name] === undefined) {">
					<outline text="serverStats.chatLogStats.logStats [name] = {">
						<outline text="ctReads: 0, whenLastRead: new Date (0), "></outline>
						<outline text="ctWrites: 0, whenLastWrite: new Date (0)"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (serverStats.chatLogStats.logStats [name]);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getAnyoneCanReply (theLog) {">
				<outline isComment="true" text="Changes">
					<outline text="3/1/16; 11:10:04 AM by DW">
						<outline text="This is a mess. Hopefully this contains it. "></outline>
						</outline>
					</outline>
				<outline text="if (theLog.version == 2) {">
					<outline text="if (theLog.renderingPrefs !== undefined) { ">
						<outline text="if (theLog.renderingPrefs.flAnyoneCanReply !== undefined) { //owner has explicitly set it true or false">
							<outline text="return (utils.getBoolean (theLog.renderingPrefs.flAnyoneCanReply));"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (true); //if not specified it's true in v2"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="return (utils.getBoolean (theLog.flAnyoneCanReply));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getChatLogSubset (log) { //1/19/16 by DW">
				<outline isComment="true" text="Changes">
					<outline text="1/19/16; 5:09:04 PM by DW">
						<outline text="We want to return information to the caller about the chatlog, but not all the data in the chatlog. So we return a subset of what's in the log struct."></outline>
						</outline>
					</outline>
				<outline text="var flAnyoneCanReply = getAnyoneCanReply (log); //utils.getBoolean (log.flAnyoneCanReply) || (log.version == 2);"></outline>
				<outline text="var urlChatLogJson = (log.urlJsonFile !== undefined) ? log.urlJsonFile : log.urlPublicFolder + &quot;chatLog.json&quot;; //3/9/16 by DW"></outline>
				<outline text="function getIdLastPost () {">
					<outline text="if (log.chatLog.length == 0) {">
						<outline text="return (undefined);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="return (log.chatLog [log.chatLog.length - 1].id);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return ({">
					<outline text="prefs: log.prefs,"></outline>
					<outline text="usersWhoCanPost: log.usersWhoCanPost, "></outline>
					<outline text="flAnyoneCanReply: flAnyoneCanReply, //11/20/15 by DW"></outline>
					<outline text="urlPublicFolder: log.urlPublicFolder,"></outline>
					<outline text="urlRssFeed: log.urlPublicFolder + s3RssPath, //11/22/15 by DW"></outline>
					<outline text="urlChatLogJson: urlChatLogJson, //3/9/16 by DW"></outline>
					<outline text="idLastPost: getIdLastPost () //3/14/16 by DW"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getInitialChatLogStruct (nameChatLog) { //3/15/16 by DW">
				<outline isComment="true" text="Changes">
					<outline text="5/12/16; 12:17:03 PM by DW">
						<outline text="Change initialChatLogStruct.flDirty to false. "></outline>
						</outline>
					<outline text="4/6/16; 1:22:39 PM by DW">
						<outline text="Initialize flInstantArticlesSupport."></outline>
						</outline>
					<outline text="4/1/16; 12:44:01 PM by DW">
						<outline text="Properly initialize rssHeadElements.title, rssHeadElements.link and renderingPrefs.urlBlogHome."></outline>
						</outline>
					<outline text="3/30/16; 6:18:45 PM by DW">
						<outline text="Add new param, nameChatLog. Fill in initial values for renderingPrefs."></outline>
						</outline>
					</outline>
				<outline text="var urlHome = urlPublicFolder + &quot;users/&quot; + nameChatLog + &quot;/&quot;;"></outline>
				<outline text="var initialChatLogStruct = { //1/5/16 by DW">
					<outline text="chatLog: [],"></outline>
					<outline text="rssHeadElements: {">
						<outline text="&quot;title&quot;: nameChatLog + &quot;'s chatlog&quot;, //4/1/16 by DW"></outline>
						<outline text="&quot;link&quot;: urlHome, //4/1/16 by DW"></outline>
						<outline text="&quot;description&quot;: &quot;&quot;,"></outline>
						<outline text="&quot;language&quot;: &quot;en-us&quot;,"></outline>
						<outline text="&quot;generator&quot;: &quot;1999.io&quot;,"></outline>
						<outline text="&quot;docs&quot;: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"></outline>
						<outline text="&quot;maxFeedItems&quot;: 100,"></outline>
						<outline text="&quot;appDomain&quot;: &quot;domain.com&quot;,"></outline>
						<outline text="&quot;flRssCloudEnabled&quot;: true,"></outline>
						<outline text="&quot;rssCloudDomain&quot;: &quot;rpc.rsscloud.io&quot;,"></outline>
						<outline text="&quot;rssCloudPort&quot;: 5337,"></outline>
						<outline text="&quot;rssCloudPath&quot;: &quot;/pleaseNotify&quot;,"></outline>
						<outline text="&quot;rssCloudRegisterProcedure&quot;: &quot;&quot;,"></outline>
						<outline text="&quot;rssCloudProtocol&quot;: &quot;http-post&quot;,"></outline>
						<outline text="&quot;flInstantArticlesSupport&quot;: true //4/6/16 by DW"></outline>
						<outline text="},"></outline>
						</outline>
					<outline text="renderingPrefs: { ">
						<outline text="siteName: nameChatLog,"></outline>
						<outline text="authorFacebookAccount: &quot;&quot;,"></outline>
						<outline text="authorGithubAccount: &quot;&quot;,"></outline>
						<outline text="authorLinkedInAccount: &quot;&quot;,"></outline>
						<outline text="copyright: &quot;&quot;,"></outline>
						<outline text="flAnyoneCanReply: true,"></outline>
						<outline text="urlBlogHome: urlHome //4/1/16 by DW"></outline>
						<outline text="},"></outline>
						</outline>
					<outline text="prefs: {">
						<outline text="serialNum: 1,"></outline>
						<outline text="whenLogPrefsCreated: new Date ()"></outline>
						<outline text="},"></outline>
						</outline>
					<outline text="version: 2, //the first version has no version element here"></outline>
					<outline text="flDirty: false"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (JSON.parse (JSON.stringify (initialChatLogStruct)));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function openUserChatlog (screenName, callback) { //1/5/16 by DW">
				<outline isComment="true" text="Changes">
					<outline text="3/3/16; 2:28:10 PM by DW">
						<outline text="We were assigning to chatlogstruct.usersWhoCanPost even if it already existed? Really serious error."></outline>
						</outline>
					<outline text="1/19/16; 4:55:25 PM by DW">
						<outline text="Instead of returning true, return the chatlog struct."></outline>
						<outline text="Add a return of undefined if there is no such chatlog."></outline>
						</outline>
					<outline text="1/5/16; 11:32:49 AM by DW">
						<outline text="Open the user's chatlog in chatLogArray, so that it can be returned by findChatLog. The editor app has to call this before doing anything that might access the chatlog. "></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (screenName);"></outline>
				<outline text="if (theLog !== undefined) { //it's already open">
					<outline text="callback (getChatLogSubset (theLog));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var flprivate = false; //3/9/16 by DW"></outline>
					<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var chatlogpath = getS3UsersPath (flprivate) + screenName + &quot;/chatLog.json&quot;;"></outline>
					<outline text="var whenStartLoad = new Date ();"></outline>
					<outline created="Wed, 22 Jan 2014 23:07:46 GMT" pgfnum="36412" text="store.getObject (chatlogpath, function (error, data) {">
						<outline text="var chatlogstruct = getInitialChatLogStruct (screenName);"></outline>
						<outline text=""></outline>
						<outline text="if ((!error) &amp;&amp; (data != null)) {">
							<outline text="try {">
								<outline text="chatlogstruct = JSON.parse (data.Body);"></outline>
								<outline text="console.log (&quot;openUserChatlog: chatlog for &quot; + screenName + &quot; has been opened.&quot;); "></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;openUserChatlog: error opening chatlog for &quot; + screenName + &quot;.&quot;); "></outline>
								<outline text="callback (undefined); //1/19/16 by DW"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;openUserChatlog: the chatlog for &quot; + screenName + &quot; does not exist.&quot;); "></outline>
							<outline text="callback (undefined); //1/19/16 by DW"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="chatlogstruct.name = screenName;"></outline>
						<outline text="chatlogstruct.jsonPath = chatlogpath;"></outline>
						<outline text=""></outline>
						<outline isComment="true" text="chatlogstruct.s3Path = &quot;/1999.io/testing/userchatlogs/&quot;;"></outline>
						<outline text="chatlogstruct.s3Path = getS3UsersPath (false) + screenName + &quot;/&quot;; //where the chatlog's public files, such as the RSS feed, are stored"></outline>
						<outline text=""></outline>
						<outline text="if (urlPublicFolder !== undefined) { //2/19/16 by DW">
							<outline text="chatlogstruct.urlPublicFolder = urlPublicFolder + &quot;users/&quot; + screenName + &quot;/&quot;;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (chatlogstruct.usersWhoCanPost === undefined) { //3/3/16 by DW">
							<outline text="chatlogstruct.usersWhoCanPost = [screenName];"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="chatlogstruct.flDirty = false; //5/12/16 by DW -- prevent the RSS file from being rebuilt every time the file is opened"></outline>
						<outline text=""></outline>
						<outline text="chatLogArray [chatLogArray.length] = chatlogstruct;"></outline>
						<outline text=""></outline>
						<outline text="//stats -- 1/20/16 by DW">
							<outline text="var myStats = initChatLogStats (screenName);"></outline>
							<outline text="myStats.ctSecsLastRead = utils.secondsSince (whenStartLoad); //1/20/16 by DW"></outline>
							<outline text="myStats.ctReads++;"></outline>
							<outline text="myStats.whenLastRead = whenStartLoad;"></outline>
							<outline text="flStatsDirty = true;"></outline>
							<outline text=""></outline>
							<outline text="console.log (&quot;openUserChatlog: screenName == &quot; + screenName + &quot;, stats == &quot; + utils.jsonStringify (myStats));"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="callback (getChatLogSubset (chatlogstruct));"></outline>
						<outline created="Wed, 22 Jan 2014 23:07:55 GMT" pgfnum="36413" text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function newUserChatlog (screenName, callback) { //3/15/16 by DW">
				<outline text="var jstruct = getInitialChatLogStruct (screenName); "></outline>
				<outline text="jstruct.name = screenName;"></outline>
				<outline text="jstruct.jsonPath = getS3UsersPath (false) + screenName + &quot;/chatLog.json&quot;;"></outline>
				<outline text="jstruct.s3Path = getS3UsersPath (false) + screenName + &quot;/&quot;; //where the chatlog's public files, such as the RSS feed, are stored"></outline>
				<outline text="if (urlPublicFolder !== undefined) { ">
					<outline text="jstruct.urlPublicFolder = urlPublicFolder + &quot;users/&quot; + screenName + &quot;/&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="jstruct.usersWhoCanPost = [screenName];"></outline>
				<outline text="chatLogArray [chatLogArray.length] = jstruct;"></outline>
				<outline text="callback (getChatLogSubset (jstruct));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function openAllUserChatlogs (callback) { //3/2/16 by DW">
				<outline text="function getUsersWhoHaveChatLogs (flprivate, callback) { //3/2/16 by DW ">
					<outline isComment="true" text="Changes">
						<outline text="3/2/16; 9:33:47 AM by DW">
							<outline text="Get a list of screennames for users who have data on the server."></outline>
							</outline>
						</outline>
					<outline text="var theList = new Array (), usersPath = getS3UsersPath (flprivate);"></outline>
					<outline created="Wed, 19 Mar 2014 19:59:25 GMT" pgfnum="39572" text="store.listObjects (usersPath, function (obj) { //loop over all the users' folders">
						<outline created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728" text="if (obj.flLastObject != undefined) {">
							<outline text="if (callback != undefined) {">
								<outline isComment="true" text="console.log (&quot;getUsersWhoHaveChatLogs: theList == &quot; + theList);"></outline>
								<outline isComment="true" text="1999io,KenSmith,NYT,Twittergram,andrewshell,bullmancuso,davewiner,dsearls,mrfabbri,nakedjen,paolovalde,sarahpressler,scripting,tedchoward,undefined"></outline>
								<outline text="callback (theList);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731" text="}"></outline>
							</outline>
						<outline created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732" text="else {">
							<outline text="var path = obj.Key;"></outline>
							<outline text="if (utils.endsWith (path, &quot;/chatLog.json&quot;)) {">
								<outline isComment="true" text="path is something like users/xxx/chatLog.json -- where xxx is the username"></outline>
								<outline text="var username = utils.stringNthField (path, &quot;/&quot;, utils.stringCountFields (path, &quot;/&quot;) - 1);"></outline>
								<outline text="console.log (&quot;openAllUserChatlogs: path == &quot; + path + &quot;, username == &quot; + username);"></outline>
								<outline text="theList [theList.length] = username;"></outline>
								<outline isComment="true" text="theList [theList.length] = utils.stringNthField (path, &quot;/&quot;, 2); //3/9/16 by DW -- changed from 3 to 2"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733" text="}"></outline>
							</outline>
						<outline created="Wed, 19 Mar 2014 19:59:50 GMT" pgfnum="39573" text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (flChatEnabled) {">
					<outline text="getUsersWhoHaveChatLogs (false, function (theList) {">
						<outline text=""></outline>
						<outline text="console.log (&quot;openAllUserChatlogs: theList == &quot; + utils.jsonStringify (theList));"></outline>
						<outline text=""></outline>
						<outline text="function openlog (ix) {">
							<outline text="if (ix &gt;= theList.length) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="if ((theList [ix] === undefined) || (theList [ix].length === 0)) {">
									<outline text="openlog (ix + 1);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="openUserChatlog (theList [ix], function () {">
										<outline text="openlog (ix + 1);"></outline>
										<outline text="});"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="openlog (0);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (callback !== undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getChatLogList () { //10/29/15 by DW">
				<outline text="var jstruct = new Object ();"></outline>
				<outline text="for (var i = 0; i &lt; chatLogArray.length; i++) {">
					<outline text="var log = chatLogArray [i];"></outline>
					<outline text="if (!log.prefs.flPrivate) {">
						<outline isComment="true" text="var flAnyoneCanReply = utils.getBoolean (log.flAnyoneCanReply) || (log.version == 2);"></outline>
						<outline text="jstruct [log.name] = getChatLogSubset (log);"></outline>
						<outline isComment="true" text="jstruct [log.name] = {">
							<outline text="prefs: log.prefs,"></outline>
							<outline text="usersWhoCanPost: log.usersWhoCanPost, "></outline>
							<outline text="flAnyoneCanReply: flAnyoneCanReply, //11/20/15 by DW"></outline>
							<outline text="urlPublicFolder: log.urlPublicFolder,"></outline>
							<outline text="urlRssFeed: log.urlPublicFolder + s3RssPath //11/22/15 by DW"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (jstruct);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function findChatLog (nameChatLog) {">
				<outline isComment="true" text="Changes">
					<outline text="2/29/16; 6:34:37 PM by DW">
						<outline text="Also see if the name we're looking for is the owner of one of the V1 chatlogs. "></outline>
						<outline text="This makes it possible for us to map &quot;davewiner&quot; onto &quot;scripting&quot;."></outline>
						</outline>
					</outline>
				<outline text="for (var i = 0; i &lt; chatLogArray.length; i++) {">
					<outline text="var log = chatLogArray [i];"></outline>
					<outline text="if ((log.name == nameChatLog) || (log.owner == nameChatLog)) {">
						<outline text="return (log);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline isComment="true" text=""></outline>
				<outline isComment="true" text="console.log (&quot;findChatLog: the chatlog &quot; + nameChatLog + &quot; was not found.&quot;); //1/22/16 by DW"></outline>
				<outline isComment="true" text=""></outline>
				<outline text="return (undefined);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function chatLogChanged (nameChatLog) {">
				<outline text="flChatLogDirty = true;"></outline>
				<outline text="nameDirtyChatLog = nameChatLog;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function chatAnyoneCanReply (nameChatLog) { //11/21/15 by DW">
				<outline text="var theLog = findChatLog (nameChatLog);"></outline>
				<outline text="return (getAnyoneCanReply (theLog)); //3/1/16 by DW"></outline>
				<outline isComment="true" text=""></outline>
				<outline isComment="true" text="return (utils.getBoolean (theLog.flAnyoneCanReply) || (theLog.version == 2));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function chatAnyoneCanLike (nameChatLog) { //4/10/16 by DW">
				<outline text="return (true); //Like is easy -- anyone can do it. maybe later we'll make this a setting -- 4/10/16 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function bumpChatUpdateCount (item) { //10/18/15 by DW">
				<outline text="item.whenLastUpdate = new Date ();"></outline>
				<outline text="if (item.ctUpdates === undefined) { ">
					<outline text="item.ctUpdates = 1;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="item.ctUpdates++;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getItemFile (item) { //10/5/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="4/5/16; 11:38:46 AM by DW">
						<outline text="Noticed that the .json files pad the file name to 5 places, and the .html files only pad to 4 places, so I changed this to pad to 4 places. "></outline>
						</outline>
					<outline text="2/19/16; 5:57:03 PM by DW">
						<outline text="I don't like the &quot;data/&quot; part of the address. I think I can take it off, because the URLs of the JSON file are stored in the index file. "></outline>
						</outline>
					<outline text="11/30/15; 1:38:27 PM by DW">
						<outline text="The parameter changes from an id to an item. We need to be able to access the date the item was created so the path doesn't change if the item is saved again on a different date. "></outline>
						</outline>
					</outline>
				<outline text="return (utils.getDatePath (item.when) + utils.padWithZeros (item.id, 4) + &quot;.json&quot;);"></outline>
				<outline isComment="true" text="return (&quot;data/&quot; + utils.getDatePath (item.when) + utils.padWithZeros (item.id, 5) + &quot;.json&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function saveChatMessage (nameChatLog, item, callback) { ">
				<outline isComment="true" text="Changes">
					<outline text="4/17/16; 9:36:37 AM by DW">
						<outline text="Flow the JSON files through the publish callbacks."></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog), jsontext = utils.jsonStringify (item), relpath = getItemFile (item);"></outline>
				<outline text="var path = theLog.s3Path + relpath;"></outline>
				<outline text="store.newObject (path, jsontext, &quot;application/json&quot;, undefined, function () {">
					<outline isComment="true" text="console.log (&quot;saveChatMessage: saved file at &quot; + path);"></outline>
					<outline isComment="true" text="console.log (&quot;saveChatMessage: jsontext == &quot; + utils.jsonStringify (item));"></outline>
					<outline text="if (theLog.urlPublicFolder !== undefined) { //10/19/15 by DW">
						<outline text="if (item.urlJson === undefined) {">
							<outline text="item.urlJson = theLog.urlPublicFolder + getItemFile (item);"></outline>
							<outline text="saveChatMessage (nameChatLog, item, callback); //recurse, so the item gets saved again, this time with the urlJson element set -- 10/22/15 by DW"></outline>
							<outline text="chatLogChanged (nameChatLog);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="callbacks.callPublishCallbacks (relpath, jsontext, &quot;application/json&quot;, nameChatLog); //4/17/16 by DW"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function findChatMessage (nameChatLog, id, callback) { //9/15/15 by DW">
				<outline text="var theLog = findChatLog (nameChatLog);"></outline>
				<outline text="var stack = [];"></outline>
				<outline isComment="true" text="console.log (&quot;findChatMessage: id == &quot; + id);"></outline>
				<outline text="function findInSubs (theArray) {">
					<outline text="for (var i = 0; i &lt; theArray.length; i++) {">
						<outline text="var item = theArray [i];"></outline>
						<outline text="stack.push (item);"></outline>
						<outline text="if (item.id == id) {">
							<outline isComment="true" text="console.log (&quot;findChatMessage: found at &quot; + item.text + &quot;, subs == &quot; + utils.jsonStringify (item.subs));"></outline>
							<outline text="if (item.subs === undefined) {">
								<outline text="item.subs = new Array ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="callback (true, item, item.subs, stack [0]);"></outline>
							<outline text="return (true);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="if (item.subs !== undefined) {">
								<outline text="if (findInSubs (item.subs, false)) {">
									<outline text="return (true);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="stack.pop ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (false);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (!findInSubs (theLog.chatLog)) {">
					<outline text="callback (false);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function countItemsInChatlog (nameChatLog) { //10/28/15 by DW">
				<outline text="var theLog = findChatLog (nameChatLog);"></outline>
				<outline text="function countInArray (theArray) {">
					<outline text="if (theArray === undefined) {">
						<outline text="return (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="var ct = 0;"></outline>
						<outline text="for (var i = 0; i &lt; theArray.length; i++) {">
							<outline text="var item = theArray [i]"></outline>
							<outline text="ct += countInArray (item.subs) + 1;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="return (ct);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (countInArray (theLog.chatLog));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function releaseChatLongpolls (nameChatLog, itemToReturn) { //anyone  waiting for &quot;chatlog:xxx&quot; to update will be notified ">
				<outline isComment="true" text="Changes">
					<outline text="10/29/15; 5:00:02 PM by DW">
						<outline text="The caller may need to know which chatlog this item is from, so we include that value, but delete it before returning if it wasn't previously defined."></outline>
						</outline>
					</outline>
				<outline text="var flDeleteName = itemToReturn.chatLog === undefined;"></outline>
				<outline text="itemToReturn.chatLog = nameChatLog;"></outline>
				<outline text="jsontext = utils.jsonStringify (itemToReturn);"></outline>
				<outline text="delete itemToReturn.chatLog;"></outline>
				<outline text="checkLongpollsForUrl (&quot;chatlog:&quot; + nameChatLog, jsontext); "></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function okToPostToChatLog (nameChatLog, screenName, flReply) { //10/29/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="11/20/15; 4:17:52 PM by DW">
						<outline text="New optional param, flReply. "></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog), lowername = utils.stringLower (screenName);"></outline>
				<outline text="if (theLog.usersWhoCanPost !== undefined) {">
					<outline text="for (var i = 0; i &lt; theLog.usersWhoCanPost.length; i++) {">
						<outline text="if (utils.stringLower (theLog.usersWhoCanPost [i]) == lowername) {">
							<outline text="return (true);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (flReply &amp;&amp; getAnyoneCanReply (theLog)) { //3/1/16 by DW">
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline isComment="true" text="if (flReply &amp;&amp; (utils.getBoolean (theLog.flAnyoneCanReply) || (theLog.version == 2))) { //11/20/15 by DW">
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline isComment="true" text=""></outline>
				<outline isComment="true" text=""></outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function okToModerate (screenName) { //11/30/15 by DW">
				<outline text="if (usersWhoCanModerate !== undefined) {">
					<outline text="for (var i = 0; i &lt; usersWhoCanModerate.length; i++) {">
						<outline text="if (usersWhoCanModerate [i].toLowerCase () == screenName.toLowerCase ()) {">
							<outline text="return (true);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function okToEdit (item, screenName, nameChatLog) { //11/30/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="4/7/16; 10:53:41 AM by DW">
						<outline text="The owner of the chatlog can edit anything in it."></outline>
						</outline>
					</outline>
				<outline text="if (utils.equalStrings (screenName, nameChatLog)) { //4/7/16 by DW">
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (utils.equalStrings (item.name, screenName)) {">
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (okToModerate (screenName));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function postChatMessage (screenName, nameChatLog, chatText, payload, idMsgReplyingTo, iconUrl, iconEmoji, flTwitterName, callback) {">
				<outline isComment="true" text="Changes">
					<outline text="11/26/15; 9:33:43 AM by DW">
						<outline text="Add a param to the callback, the same &quot;itemToReturn&quot; that we're going to send back via the WebSocket connection. The caller should get it right away, no need to wait. "></outline>
						</outline>
					<outline text="9/9/15; 3:00:32 PM by DW">
						<outline text="We were returning the whole chatlog for longpoll callers. Now we only return the new chat item."></outline>
						</outline>
					<outline text="8/28/15; 12:25:30 PM by DW">
						<outline text="flTwitterName is false if the caller, a webhook probably, has given us a different name, that is not the name of a Twitter user."></outline>
						</outline>
					</outline>
				<outline text="var flReply = idMsgReplyingTo !== undefined;"></outline>
				<outline text=""></outline>
				<outline text="if (okToPostToChatLog (nameChatLog, screenName, flReply)) {">
					<outline text="var theLog = findChatLog (nameChatLog);"></outline>
					<outline text="var now = new Date (), idChatPost, itemToReturn;"></outline>
					<outline text=""></outline>
					<outline text="var chatItem = {">
						<outline text="name: screenName,"></outline>
						<outline text="text: chatText,"></outline>
						<outline isComment="true" text="id: serverStats.ctChatPosts++,"></outline>
						<outline text="id: theLog.prefs.serialNum++,"></outline>
						<outline text="when: now"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="if (payload !== undefined) {">
						<outline text="try {">
							<outline text="chatItem.payload = JSON.parse (payload);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="catch (err) {">
							<outline text="console.log (&quot;postChatMessage: payload is not valid JSON == &quot; + payload);"></outline>
							<outline text="callback (err, undefined);"></outline>
							<outline text="return;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (iconUrl !== undefined) {">
						<outline text="chatItem.iconUrl = iconUrl;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (iconEmoji !== undefined) {">
						<outline text="chatItem.iconEmoji = iconEmoji;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (!flTwitterName) {">
						<outline text="chatItem.flNotTwitterName = !flTwitterName; //the &quot;name&quot; field of struct is not a twitter screen name"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="if (flReply) {">
						<outline isComment="true" text="console.log (&quot;postChatMessage: idMsgReplyingTo == &quot; + idMsgReplyingTo);"></outline>
						<outline isComment="true" text=""></outline>
						<outline text="findChatMessage (nameChatLog, idMsgReplyingTo, function (flFound, item, subs, theTopItem) {">
							<outline text="if (flFound) {">
								<outline text="subs [subs.length] = chatItem;"></outline>
								<outline text="itemToReturn = theTopItem;"></outline>
								<outline text="itemToReturn.idLatestReply = chatItem.id; //9/22/15 by DW -- so the client can tell which reply is new"></outline>
								<outline isComment="true" text="console.log (&quot;postChatMessage: subs == &quot; + utils.jsonStringify (subs));"></outline>
								<outline text="console.log (&quot;postChatMessage: itemToReturn == &quot; + utils.jsonStringify (itemToReturn));"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;postChatMessage: item to reply to not found.&quot;);"></outline>
								<outline text="callback (&quot;Can't reply to the message because it isn't in the server chat log.&quot;, undefined);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text=""></outline>
						<outline isComment="true" text="for (var i = 0; i &lt; chatLog.length; i++) {">
							<outline text="if (chatLog [i].id == idMsgReplyingTo) {">
								<outline text="if (chatLog [i].subs === undefined) {">
									<outline text="chatLog [i].subs = new Array ();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="chatLog [i].subs [chatLog [i].subs.length] = chatItem;"></outline>
								<outline text="itemToReturn = chatLog [i];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (theLog.chatLog.length &gt;= maxChatLog) {">
							<outline text="theLog.chatLog.splice (0, 1); //remove first item"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="theLog.chatLog [theLog.chatLog.length] = chatItem;"></outline>
						<outline text="itemToReturn = chatItem;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="callback (undefined, chatItem.id, itemToReturn); //pass it the id of the new post, and (11/26/15, the item we'll return via WebSockets)"></outline>
					<outline text=""></outline>
					<outline text="if (!utils.sameDay (serverStats.whenLastChatPost, now)) { ">
						<outline text="serverStats.ctChatPostsToday = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="serverStats.whenLastChatPost = now;"></outline>
					<outline text="serverStats.ctChatPostsToday++;"></outline>
					<outline text="flStatsDirty = true;"></outline>
					<outline text=""></outline>
					<outline created="Mon, 03 Feb 2014 18:45:55 GMT" isComment="true" pgfnum="36993" text="if (!utils.sameDay (todaysChatLog.today, now)) { //date rollover">
						<outline text="todaysChatLog.today = now;"></outline>
						<outline text="todaysChatLog.theLog = new Array ();"></outline>
						<outline text="serverStats.ctChatPostsToday = 0;"></outline>
						<outline created="Mon, 03 Feb 2014 18:46:08 GMT" pgfnum="36994" text="}"></outline>
						</outline>
					<outline isComment="true" text="todaysChatLog.theLog [todaysChatLog.theLog.length] = chatItem;"></outline>
					<outline text=""></outline>
					<outline text="chatLogChanged (nameChatLog);"></outline>
					<outline text="saveChatMessage (nameChatLog, itemToReturn, function () {">
						<outline text="releaseChatLongpolls (nameChatLog, itemToReturn); "></outline>
						<outline text="if (itemToReturn.idLatestReply !== undefined) { //9/22/15 by DW">
							<outline text="delete itemToReturn.idLatestReply;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="outgoingWebhookCall (screenName, chatText, chatItem.id, iconUrl, iconEmoji, flTwitterName);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (&quot;Can't post the message because the user \&quot;&quot; + screenName + &quot;\&quot; does not have permission.&quot;, undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function editChatMessage (screenName, nameChatLog, chatText, payload, idMessage, callback) { //9/11/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="4/7/16; 10:44:19 AM by DW">
						<outline text="If it's not OK to edit, the error message was being returned as a string, not the message element of an object. As a result the error wasn't being properly reported. "></outline>
						</outline>
					<outline text="11/26/15; 9:58:54 AM by DW">
						<outline text="Return the top item that was updated, so the caller can immediately update their copy of the chatlog without having to wait for the WebSocket to return."></outline>
						</outline>
					<outline text="11/20/15; 4:22:54 PM by DW">
						<outline text="Previously we'd call okToPostToChatLog to find out if we should let the user change the post. But if they created it, why shouldn't we let them change it?"></outline>
						</outline>
					</outline>
				<outline text="findChatMessage (nameChatLog, idMessage, function (flFound, item, subs, theTopItem) {">
					<outline text="if (flFound) {">
						<outline isComment="true" text="var now = new Date ();"></outline>
						<outline text="if (okToEdit (item, screenName, nameChatLog)) { //(item.name.toLowerCase () == screenName.toLowerCase ()) {">
							<outline text="item.text = chatText;"></outline>
							<outline text="if (payload !== undefined) {">
								<outline text="try {">
									<outline text="item.payload = JSON.parse (payload);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;editChatMessage: payload is not valid JSON == &quot; + payload);"></outline>
									<outline text="callback (err, undefined);"></outline>
									<outline text="return;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="bumpChatUpdateCount (item); //10/18/15 by DW"></outline>
							<outline isComment="true" text="console.log (&quot;editChatMessage: idMessage == &quot; + idMessage + &quot;, chatText == &quot; + chatText);"></outline>
							<outline text="releaseChatLongpolls (nameChatLog, theTopItem); "></outline>
							<outline text="saveChatMessage (nameChatLog, theTopItem); //10/8/15 by DW"></outline>
							<outline text="chatLogChanged (nameChatLog);"></outline>
							<outline text="callback (undefined, &quot;We were able to update the post.&quot;, theTopItem);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't update the post because \&quot;&quot; + screenName + &quot;\&quot; didn't create it.&quot;}); //4/7/16 by DW"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="var theErrorString = &quot;Can't update the post because an item with id == &quot; + idMessage + &quot; isn't in the server's chat log.&quot;;"></outline>
						<outline text="console.log (&quot;editChatMessage: &quot; + theErrorString);"></outline>
						<outline text="callback ({message: theErrorString});"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text=""></outline>
				<outline isComment="true" text="old code">
					<outline text="if (okToPostToChatLog (nameChatLog, screenName)) {">
						<outline text="findChatMessage (nameChatLog, idMessage, function (flFound, item, subs, theTopItem) {">
							<outline text="if (flFound) {">
								<outline isComment="true" text="var now = new Date ();"></outline>
								<outline text="if (item.name.toLowerCase () == screenName.toLowerCase ()) {">
									<outline text="item.text = chatText;"></outline>
									<outline text="if (payload !== undefined) {">
										<outline text="try {">
											<outline text="item.payload = JSON.parse (payload);"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="catch (err) {">
											<outline text="console.log (&quot;editChatMessage: payload is not valid JSON == &quot; + payload);"></outline>
											<outline text="callback (err, undefined);"></outline>
											<outline text="return;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="bumpChatUpdateCount (item); //10/18/15 by DW"></outline>
									<outline text="console.log (&quot;editChatMessage: idMessage == &quot; + idMessage + &quot;, chatText == &quot; + chatText);"></outline>
									<outline text="releaseChatLongpolls (nameChatLog, theTopItem); "></outline>
									<outline text="saveChatMessage (nameChatLog, theTopItem); //10/8/15 by DW"></outline>
									<outline text="chatLogChanged (nameChatLog);"></outline>
									<outline text="callback (undefined, &quot;We were able to update the post.&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="callback (&quot;Can't update the post because \&quot;&quot; + screenName + &quot;\&quot; didn't create it.&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="var theErrorString = &quot;Can't update the post because an item with id == &quot; + idMessage + &quot; isn't in the server's chat log.&quot;;"></outline>
								<outline text="console.log (&quot;editChatMessage: &quot; + theErrorString);"></outline>
								<outline text="callback ({message: theErrorString});"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="callback (&quot;Can't update the post because \&quot;&quot; + screenName + &quot;\&quot; doesn't have permission.&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function likeChatMessage (screenName, nameChatLog, idToLike, callback) { //9/27/15 by DW">
				<outline text="var now = new Date ();"></outline>
				<outline text="findChatMessage (nameChatLog, idToLike, function (flFound, item, subs, theTopItem) {">
					<outline text="if (flFound) {">
						<outline text="var fl = true;"></outline>
						<outline text="if (item.likes === undefined) {">
							<outline text="item.likes = new Object ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (item.likes [screenName] === undefined) {">
							<outline text="item.likes [screenName] = {">
								<outline text="when: now"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="delete item.likes [screenName];"></outline>
							<outline text="fl = false;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="bumpChatUpdateCount (item); //10/18/15 by DW"></outline>
						<outline text="chatLogChanged (nameChatLog);"></outline>
						<outline text="callback (fl); //return true if we liked, false if we unliked"></outline>
						<outline text="releaseChatLongpolls (nameChatLog, theTopItem); "></outline>
						<outline text="saveChatMessage (nameChatLog, theTopItem); //10/8/15 by DW"></outline>
						<outline text="if (fl) { //only call callbacks on like, not unlike -- 4/24/16 by DW">
							<outline text="callbacks.callLikeCallbacks (screenName, nameChatLog, item); "></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;likeChatMessage: item to like to not found.&quot;);"></outline>
						<outline text="callback (&quot;Can't like the post because an item with id == &quot; + idToLike + &quot; isn't in the server's chat log.&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getMoreChatLogPosts (nameChatLog, idOldestPost, ctPosts) { //12/31/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="12/31/15; 11:20:31 AM by DW">
						<outline text="Return a number of top-level posts indicated by ctPosts, starting with the next post older than idOldestPost. "></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog), jstruct = new Array (), ct = 0;"></outline>
				<outline text="if (theLog === undefined) {">
					<outline text="return (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for (var i = 0; i &lt; theLog.chatLog.length; i++) {">
					<outline text="if (theLog.chatLog [i].id == idOldestPost) {">
						<outline text="for (j = i - 1; j &gt;= 0; j--) {">
							<outline text="if (ct &gt;= ctPosts) {">
								<outline text="break;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="jstruct [jstruct.length] = theLog.chatLog [j];"></outline>
							<outline text="ct++;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="return (jstruct);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (undefined); //didn't find the item"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			<outline text="function getMonthChatLogPosts (nameChatLog, monthnum, yearnum) { //5/31/16 by DW">
				<outline text="var theLog = findChatLog (nameChatLog), jstruct = new Array ();"></outline>
				<outline text="if (theLog === undefined) {">
					<outline text="return (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="var theMonth = new Date ();"></outline>
				<outline text="theMonth.setSeconds (0);"></outline>
				<outline text="theMonth.setMinutes (0);"></outline>
				<outline text="theMonth.setHours (0);"></outline>
				<outline text="theMonth.setDate (1);"></outline>
				<outline text="theMonth.setMonth (monthnum);"></outline>
				<outline text="theMonth.setFullYear (yearnum);"></outline>
				<outline text=""></outline>
				<outline text="for (var i = 0; i &lt; theLog.chatLog.length; i++) {">
					<outline text="if (utils.sameMonth (new Date (theLog.chatLog [i].when), theMonth)) {">
						<outline text="jstruct [jstruct.length] = theLog.chatLog [i];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="return (jstruct);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			<outline text="function getChatLogIndex (nameChatLog) { //1/2/16 by DW">
				<outline isComment="true" text="Changes">
					<outline text="5/6/16; 11:16:50 AM by DW">
						<outline text="If an item has been deleted, add flDeleted = true in the struct for that item."></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog), jstruct = new Array (), ct = 0;"></outline>
				<outline text="if (theLog === undefined) {">
					<outline text="return (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for (var i = 0; i &lt; theLog.chatLog.length; i++) {">
					<outline text="var item = theLog.chatLog [i], title = &quot;&quot;, urlRendering = &quot;&quot;, urlJson = &quot;&quot;, flDeleted = undefined;"></outline>
					<outline text="if (item.payload !== undefined) {">
						<outline text="if (item.payload.title !== undefined) {">
							<outline text="title = item.payload.title;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (item.payload.urlRendering !== undefined) {">
							<outline text="urlRendering = item.payload.urlRendering;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (item.payload.flDeleted !== undefined) { //5/6/16 by DW">
							<outline text="flDeleted = utils.getBoolean (item.payload.flDeleted);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (item.urlJson !== undefined) {">
						<outline text="urlJson = item.urlJson;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="jstruct [jstruct.length] = {">
						<outline text="id: item.id,"></outline>
						<outline text="name: item.name,"></outline>
						<outline text="when: item.when,"></outline>
						<outline text="title: title,"></outline>
						<outline text="flDeleted: flDeleted, //5/6/16 by DW"></outline>
						<outline text="urlHtml: urlRendering,"></outline>
						<outline text="urlJson: urlJson"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (jstruct);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function writeIndividualFiles () { //10/5/15 by DW -- for possible future use">
				<outline text="var indentlevel = 0;"></outline>
				<outline text="function copyScalars (source, dest) { ">
					<outline text="for (var x in source) { ">
						<outline created="Thu, 12 Dec 2013 14:09:03 GMT" pgfnum="33476" text="var type, val = source [x];"></outline>
						<outline created="Tue, 07 Jan 2014 22:16:34 GMT" pgfnum="35506" text="if (val instanceof Date) { ">
							<outline created="Tue, 07 Jan 2014 22:17:30 GMT" pgfnum="35509" text="val = val.toString ();"></outline>
							<outline created="Tue, 07 Jan 2014 22:16:51 GMT" pgfnum="35508" text="}"></outline>
							</outline>
						<outline created="Tue, 07 Jan 2014 22:21:56 GMT" pgfnum="35510" text="type = typeof (val);"></outline>
						<outline created="Thu, 12 Dec 2013 14:08:43 GMT" pgfnum="33475" text="if ((type != &quot;object&quot;) &amp;&amp; (type != undefined)) {">
							<outline created="Thu, 12 Dec 2013 14:11:08 GMT" pgfnum="33479" text="dest [x] = val;"></outline>
							<outline created="Thu, 12 Dec 2013 14:10:25 GMT" pgfnum="33478" text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function writefile (newitem) {">
					<outline isComment="true" text="var f = &quot;data/items/&quot; + utils.padWithZeros (newitem.id, 5) + &quot;.json&quot;;"></outline>
					<outline text="var f = getItemFile (newitem);"></outline>
					<outline text="fs.writeFile (f, utils.jsonStringify (newitem), function (err) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;writeIndividualFiles: error writing file == &quot; + err.message + &quot;, file == &quot; + f);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function doArray (theArray) {">
					<outline text="var item, newitem;"></outline>
					<outline text="for (var i = 0; i &lt; theArray.length; i++) {">
						<outline text="item = theArray [i];"></outline>
						<outline text="newitem = new Object ();"></outline>
						<outline text="copyScalars (item, newitem);"></outline>
						<outline isComment="true" text="console.log (utils.filledString (&quot;\t&quot;, indentlevel) + item.id);"></outline>
						<outline text="if (item.subs !== undefined) {">
							<outline text="newitem.subs = new Array ();"></outline>
							<outline text="for (var j = 0; j &lt; item.subs.length; j++) {">
								<outline text="newitem.subs [newitem.subs.length] = item.subs [j].id;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="indentlevel++;"></outline>
							<outline text="doArray (item.subs);"></outline>
							<outline text="indentlevel--;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="writefile (newitem);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="doArray (chatLog);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function buildChatLogRss (nameChatLog, callback) { //10/6/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="4/6/16; 12:58:51 PM by DW">
						<outline text="Don't assume the Facebook elements have been set false, so if we're not building a FB-compatible feed, we set them false.">
							<outline text="Here's what happened. We aren't working with a copy of the head elements, we're modifying the original, and it will eventually get saved. So if we start out with flInstantArticlesSupport set true, then the others will be set true the next time the chatlog is saved. If you later turn the setting false, it won't matter, all the other flags will stay true. "></outline>
							<outline text="So we start to fix the problem by working with a copy of the headElements here, and only modifying those. And we ignore the saved values for flUseContentEncoded, flTitledItemsOnly and flFacebookEncodeContent."></outline>
							</outline>
						</outline>
					<outline text="3/23/16; 5:38:33 PM by DW">
						<outline text="Call the publish callbacks for the RSS feed."></outline>
						</outline>
					<outline text="3/4/16; 12:17:48 PM by DW">
						<outline text="If theLog.rssHeadElements.flInstantArticlesSupport is true, then we build an IA-compatible feed."></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog), headElements = new Object ();"></outline>
				<outline text="utils.copyScalars (theLog.rssHeadElements, headElements); //4/6/16 by DW"></outline>
				<outline text="if (utils.getBoolean (headElements.flInstantArticlesSupport)) { //3/4/16 by DW">
					<outline text="headElements.flUseContentEncoded = true;"></outline>
					<outline text="headElements.flTitledItemsOnly = true;"></outline>
					<outline text="headElements.flFacebookEncodeContent = true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else { //4/6/16 by DW">
					<outline text="headElements.flUseContentEncoded = false;"></outline>
					<outline text="headElements.flTitledItemsOnly = false;"></outline>
					<outline text="headElements.flFacebookEncodeContent = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="console.log (&quot;buildChatLogRss: headElements == &quot; + utils.jsonStringify (headElements));"></outline>
				<outline text="var xmltext = rss.chatLogToRss (headElements, theLog.chatLog);"></outline>
				<outline text="store.newObject (theLog.s3Path + s3RssPath, xmltext, &quot;text/xml&quot;, undefined, function () {">
					<outline text="var urlFeed = undefined;"></outline>
					<outline text="if (theLog.urlPublicFolder !== undefined) {">
						<outline text="urlFeed = theLog.urlPublicFolder + s3RssPath;"></outline>
						<outline text="if (urlFeed != theLog.urlFeed) {">
							<outline text="theLog.urlFeed = urlFeed; "></outline>
							<outline text="theLog.flDirty = true;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="console.log (&quot;buildChatLogRss: urlFeed == &quot; + urlFeed); "></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="callbacks.callPublishCallbacks (s3RssPath, xmltext, &quot;text/xml&quot;, nameChatLog); //3/23/16 by DW"></outline>
					<outline text="if (callback !== undefined) {">
						<outline text="callback (urlFeed);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function saveChatLog (nameChatLog, callback) {">
				<outline isComment="true" text="Changes">
					<outline text="1/20/16; 1:10:17 PM by DW">
						<outline text="Add stats logging. Call it before building RSS because I want to measure the amount of time it takes to pack up and save the JSON file. I want to be able to see if file size is starting to affect performance. Building RSS will be constant, since there's a limit to how many items will be in the feed."></outline>
						</outline>
					<outline text="1/5/16; 12:14:38 PM by DW">
						<outline text="Support for version 2 chatlogs. "></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog), whenStartWrite = new Date ();"></outline>
				<outline text="function doStats () { //1/20/16 by DW">
					<outline text="var myStats = initChatLogStats (nameChatLog);"></outline>
					<outline text="myStats.ctSecsLastWrite = utils.secondsSince (whenStartWrite); "></outline>
					<outline text="myStats.ctWrites++;"></outline>
					<outline text="myStats.whenLastWrite = whenStartWrite;"></outline>
					<outline text="flStatsDirty = true;"></outline>
					<outline isComment="true" text="console.log (&quot;saveChatLog: nameChatLog == &quot; + nameChatLog + &quot;, myStats == &quot; + utils.jsonStringify (myStats));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function buildRss () {">
					<outline text="buildChatLogRss (nameChatLog, function (urlFeed) {">
						<outline text="if (theLog.rssHeadElements.flRssCloudEnabled) {">
							<outline text="var domain = theLog.rssHeadElements.rssCloudDomain;"></outline>
							<outline text="var port = theLog.rssHeadElements.rssCloudPort;"></outline>
							<outline text="var path = theLog.rssHeadElements.rssCloudPath;"></outline>
							<outline text="var urlServer = &quot;http://&quot; + domain + &quot;:&quot; + port + path;"></outline>
							<outline isComment="true" text="console.log (&quot;saveChatLog: urlServer == &quot; + urlServer + &quot;, urlFeed == &quot; + urlFeed);"></outline>
							<outline text="rss.cloudPing (urlServer, urlFeed);"></outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (theLog.version == 2) {">
					<outline text="store.newObject (theLog.jsonPath, utils.jsonStringify (theLog), &quot;application/json&quot;, undefined, function () {">
						<outline isComment="true" text="console.log (&quot;saveChatLog: chatlogpath == &quot; + theLog.jsonPath);"></outline>
						<outline text="doStats ();"></outline>
						<outline text="buildRss ();"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var chatlogpath = theLog.s3Path + fnameChatLog, prefspath = theLog.s3Path + fnameChatLogPrefs;"></outline>
					<outline text="store.newObject (chatlogpath, utils.jsonStringify (theLog.chatLog), &quot;application/json&quot;, undefined, function () {">
						<outline isComment="true" text="console.log (&quot;saveChatLog: chatlogpath == &quot; + chatlogpath);"></outline>
						<outline text=""></outline>
						<outline text="if (theLog.stats === undefined) { //3/9/16 by DW">
							<outline text="theLog.stats = {">
								<outline text="ctPrefsSaves: 0"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text=""></outline>
						<outline text="var prefsStruct = {">
							<outline text="prefs: theLog.prefs,"></outline>
							<outline text="usersWhoCanPost: theLog.usersWhoCanPost, "></outline>
							<outline text="renderingPrefs: theLog.renderingPrefs,"></outline>
							<outline text="rssHeadElements: {">
								<outline text="title: theLog.rssHeadElements.title,"></outline>
								<outline text="link: theLog.rssHeadElements.link,"></outline>
								<outline text="description: theLog.rssHeadElements.description"></outline>
								<outline text="},"></outline>
								</outline>
							<outline text="stats: {">
								<outline text="ctPrefsSaves: ++theLog.stats.ctPrefsSaves,"></outline>
								<outline text="whenLastSave: new Date ().toLocaleString ()"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="};"></outline>
							</outline>
						<outline text="store.newObject (prefspath, utils.jsonStringify (prefsStruct), &quot;application/json&quot;, undefined, function () {">
							<outline isComment="true" text="console.log (&quot;saveChatLog: prefspath == &quot; + prefspath);"></outline>
							<outline text="doStats ();"></outline>
							<outline text="buildRss ();"></outline>
							<outline text="});"></outline>
							</outline>
						<outline isComment="true" text=""></outline>
						<outline isComment="true" text="store.newObject (prefspath, utils.jsonStringify (theLog.prefs), &quot;application/json&quot;, undefined, function () {">
							<outline isComment="true" text="console.log (&quot;saveChatLog: prefspath == &quot; + prefspath);"></outline>
							<outline text="doStats ();"></outline>
							<outline text="buildRss ();"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function loadChatLogs (callback) { //load the version 1 chatlogs">
				<outline isComment="true" text="Changes">
					<outline text="2/29/16; 6:00:30 PM by DW">
						<outline text="These are all version 1 chatlogs. Already in the config.json file. We load in the parts that contain content and user-defined settings. Really the only important one of these is scripting. "></outline>
						</outline>
					</outline>
				<outline text="if (flChatEnabled) {">
					<outline isComment="true" text="console.log (&quot;loadChatLogs: chatLogArray = &quot; + utils.jsonStringify (chatLogArray));"></outline>
					<outline text="function loadNextLog (ix) {">
						<outline text="if (ix == chatLogArray.length) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="var log = chatLogArray [ix], whenStartLoad = new Date ();"></outline>
							<outline text="log.flDirty = false;"></outline>
							<outline text="log.version = 1; //1/5/16 by DW"></outline>
							<outline text="var chatlogpath = log.s3Path + fnameChatLog;"></outline>
							<outline text="console.log (&quot;loadChatLogs: path == &quot; + chatlogpath);"></outline>
							<outline created="Wed, 22 Jan 2014 23:07:46 GMT" pgfnum="36412" text="store.getObject (chatlogpath, function (error, data) {">
								<outline text="if ((!error) &amp;&amp; (data != null)) {">
									<outline text="try {">
										<outline text="log.chatLog = JSON.parse (data.Body);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="catch (err) {">
										<outline text="log.chatLog = [];"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="var prefspath = log.s3Path + fnameChatLogPrefs;"></outline>
								<outline text="log.urlJsonFile = log.urlPublicFolder + fnameChatLog; //3/9/16 by DW"></outline>
								<outline text="store.getObject (prefspath, function (error, data) {">
									<outline text="if ((!error) &amp;&amp; (data != null)) {">
										<outline isComment="true" text="log.prefs = JSON.parse (data.Body);"></outline>
										<outline text=""></outline>
										<outline text="var jstruct = JSON.parse (data.Body);"></outline>
										<outline text="if (jstruct.prefs !== undefined) {">
											<outline text="log.prefs = jstruct.prefs;"></outline>
											<outline text="log.usersWhoCanPost = jstruct.usersWhoCanPost;"></outline>
											<outline text="if (log.renderingPrefs === undefined) {">
												<outline text="log.renderingPrefs = new Object ();"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="if (jstruct.renderingPrefs !== undefined) {">
												<outline text="for (var x in jstruct.renderingPrefs) {">
													<outline text="log.renderingPrefs [x] = jstruct.renderingPrefs [x];"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="if (jstruct.rssHeadElements !== undefined) {">
												<outline text="for (var x in jstruct.rssHeadElements) {">
													<outline text="log.rssHeadElements [x] = jstruct.rssHeadElements [x];"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text=""></outline>
											<outline text="if (jstruct.stats === undefined) {">
												<outline text="log.stats = {">
													<outline text="ctPrefsSaves: 0"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="log.stats = jstruct.stats;"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text=""></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="else {">
											<outline text="log.prefs = jstruct;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;loadChatLogs: creating new prefs file, prefspath == &quot; + prefspath);"></outline>
										<outline text="log.prefs = {">
											<outline text="serialNum: countItemsInChatlog (log.name),"></outline>
											<outline text="whenLogPrefsCreated: new Date ()"></outline>
											<outline text="};"></outline>
											</outline>
										<outline text="log.flDirty = true;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text=""></outline>
									<outline text="//stats -- 1/20/16 by DW">
										<outline text="var myStats = initChatLogStats (log.name);"></outline>
										<outline text="myStats.ctSecsLastRead = utils.secondsSince (whenStartLoad); //1/20/16 by DW"></outline>
										<outline text="myStats.ctReads++;"></outline>
										<outline text="myStats.whenLastRead = whenStartLoad;"></outline>
										<outline text="flStatsDirty = true;"></outline>
										<outline text=""></outline>
										<outline text="console.log (&quot;loadChatLogs: log.name == &quot; + log.name + &quot;, myStats == &quot; + utils.jsonStringify (myStats));"></outline>
										</outline>
									<outline text=""></outline>
									<outline text="loadNextLog (ix + 1);"></outline>
									<outline text="});"></outline>
									</outline>
								<outline created="Wed, 22 Jan 2014 23:07:55 GMT" pgfnum="36413" text="});"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="loadNextLog (0);"></outline>
					<outline text=""></outline>
					<outline isComment="true" text="loadStruct (fnameChatLog, chatLog, function () {">
						<outline text="var f = &quot;data/&quot; + utils.getDatePath () + &quot;todaysChatlog.json&quot;;"></outline>
						<outline text="loadStruct (f, todaysChatLog, function () {">
							<outline text="callback ();"></outline>
							<outline text="});"></outline>
							</outline>
						<outline isComment="true" text="saveWholeChatLog (); //just need to run this once -- xxx"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function publishChatLogFileV1 (nameChatLog, screenName, relpath, type, body, callback) { //1/6/16 by DW">
				<outline isComment="true" text="Changes">
					<outline text="1/6/16; 2:29:25 PM by DW">
						<outline text="Basically some glue so that Scripting News will continue to work after we offer hosting to other users. "></outline>
						</outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog);"></outline>
				<outline text="var myRelpath = &quot;users/&quot; + screenName + &quot;/&quot; + relpath;"></outline>
				<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = theLog.s3Path + myRelpath;"></outline>
				<outline text="var flprivate = false; //all our files are public"></outline>
				<outline text="var metadata = {whenLastUpdate: new Date ().toString ()};"></outline>
				<outline text="store.newObject (s3path, body, type, getS3Acl (false), function (error, data) {">
					<outline created="Fri, 02 May 2014 22:20:54 GMT" pgfnum="40903" text="if (error) {">
						<outline text="callback (error);    "></outline>
						<outline created="Fri, 02 May 2014 22:20:59 GMT" pgfnum="40905" text="}"></outline>
						</outline>
					<outline created="Fri, 02 May 2014 22:21:00 GMT" pgfnum="40906" text="else {">
						<outline text="metadata.url = theLog.urlPublicFolder + myRelpath;"></outline>
						<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="callback (undefined, metadata);"></outline>
						<outline created="Thu, 26 Jun 2014 16:30:30 GMT" pgfnum="42488" text="serverStats.ctFileSaves++;"></outline>
						<outline text="statsChanged ();"></outline>
						<outline text="if (!flprivate) { //12/15/14 by DW">
							<outline text="checkLongpollsForUrl (metadata.url, body);"></outline>
							<outline text="callbacks.callPublishCallbacks (relpath, body, type, nameChatLog); //10/14/15 by DW"></outline>
							<outline text="}"></outline>
							</outline>
						<outline created="Fri, 02 May 2014 22:21:02 GMT" pgfnum="40907" text="}"></outline>
						</outline>
					<outline created="Fri, 02 May 2014 17:31:21 GMT" pgfnum="40890" text="}, metadata);"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getChatlogForClient (nameChatLog) { //9/20/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="6/1/16; 2:09:12 PM by DW">
						<outline text="It would fail if there were no items in the chatlog. Fixed."></outline>
						</outline>
					<outline text="5/30/16; 11:39:50 AM by DW">
						<outline text="Return all the items in the current month, even if it exceeds the max. "></outline>
						</outline>
					<outline text="3/30/16; 5:51:23 PM by DW">
						<outline text="Call new routine initRenderingPrefs, because some sites were created without rendering prefs properly initialized. This makes sure they all are correctly initialized"></outline>
						</outline>
					<outline text="2/19/16; 6:13:46 PM by DW">
						<outline text="Return urlFeed. And no longer return the URL of the chatlog. It's stored in the user's private space. So there is no URL to it."></outline>
						</outline>
					<outline text="2/19/16; 11:13:35 AM by DW">
						<outline text="Return two new elements in metadata: usersWhoCanPost and rssHeadElements."></outline>
						</outline>
					<outline text="10/27/15; 9:44:19 AM by DW">
						<outline text="New param, nameChatLog. "></outline>
						</outline>
					<outline text="10/22/15; 1:51:01 PM by DW">
						<outline text="We now return a struct that contains the chatlog, so we can return other data, in the metadata struct."></outline>
						</outline>
					</outline>
				<outline text="function initRenderingPrefs () { //3/30/16 by DW">
					<outline isComment="true" text="Changes ">
						<outline text="3/30/16; 6:06:29 PM by DW">
							<outline text="An all-in-one place to initialize a chatlog data structure."></outline>
							</outline>
						</outline>
					<outline text="if (theLog.renderingPrefs === undefined) { ">
						<outline text="theLog.renderingPrefs = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (theLog.renderingPrefs.siteName === undefined) {">
						<outline text="theLog.renderingPrefs.siteName = nameChatLog;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (theLog.renderingPrefs.authorFacebookAccount === undefined) {">
						<outline text="theLog.renderingPrefs.authorFacebookAccount = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (theLog.renderingPrefs.authorGithubAccount === undefined) {">
						<outline text="theLog.renderingPrefs.authorGithubAccount = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (theLog.renderingPrefs.authorLinkedInAccount === undefined) {">
						<outline text="theLog.renderingPrefs.authorLinkedInAccount = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (theLog.renderingPrefs.copyright === undefined) {">
						<outline text="theLog.renderingPrefs.copyright = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (theLog.renderingPrefs.flAnyoneCanReply === undefined) {">
						<outline text="theLog.renderingPrefs.flAnyoneCanReply = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog);"></outline>
				<outline text="if (theLog === undefined) {">
					<outline text="return (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="initRenderingPrefs (); //3/30/16 by DW"></outline>
				<outline text=""></outline>
				<outline text="var jstruct = new Object ();"></outline>
				<outline text="jstruct.metadata = {">
					<outline text="name: nameChatLog,"></outline>
					<outline text=""></outline>
					<outline text="usersWhoCanPost: theLog.usersWhoCanPost, "></outline>
					<outline text="rssHeadElements: {">
						<outline text="title: theLog.rssHeadElements.title,"></outline>
						<outline text="link: theLog.rssHeadElements.link,"></outline>
						<outline text="description: theLog.rssHeadElements.description,"></outline>
						<outline text="flInstantArticlesSupport: theLog.rssHeadElements.flInstantArticlesSupport //4/6/16 by DW"></outline>
						<outline text="},"></outline>
						</outline>
					<outline text="renderingPrefs: theLog.renderingPrefs, //2/21/16 by DW"></outline>
					<outline text="urlFeed: theLog.urlFeed, "></outline>
					<outline text=""></outline>
					<outline text="server: {">
						<outline text="productName: myProductName,"></outline>
						<outline text="version: myVersion,"></outline>
						<outline text="now: new Date ()"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="};"></outline>
					</outline>
				<outline text="jstruct.chatLog = new Array ();"></outline>
				<outline text=""></outline>
				<outline text="if (theLog.chatLog.length &gt; 0) { //6/1/16 by DW">
					<outline text="var theMonth = theLog.chatLog [theLog.chatLog.length - 1].when; //the date of the most recent item in the chatlog"></outline>
					<outline text="for (var i = theLog.chatLog.length - 1; i &gt;= 0; i--) {">
						<outline text="var item = theLog.chatLog [i];"></outline>
						<outline created="Wed, 29 Jan 2014 22:10:31 GMT" pgfnum="36568" text="jstruct.chatLog.unshift (item); //insert at beginning of the array"></outline>
						<outline text="if (!utils.sameMonth (item.when, theMonth)) { //return all items in current month, even if it exceeds the max">
							<outline text="if (jstruct.chatLog.length &gt;= maxLogLengthForClient) {">
								<outline text="break;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="return (jstruct);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function setChatLogMetadata (nameChatLog, metadata, callback) { //2/19/16 by DW">
				<outline text="var jstruct;"></outline>
				<outline text="try {">
					<outline text="jstruct = JSON.parse (metadata);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="catch (err) {">
					<outline text="callback (err, undefined);"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var theLog = findChatLog (nameChatLog);"></outline>
				<outline text="function lookFor (elementName) {">
					<outline text="if (jstruct [elementName] !== undefined) {">
						<outline text="theLog [elementName] = jstruct [elementName];"></outline>
						<outline text="theLog.flDirty = true;"></outline>
						<outline isComment="true" text="console.log (&quot;setChatLogMetadata: set &quot; + elementName + &quot; in chatlog &quot; + nameChatLog + &quot; == &quot; + utils.jsonStringify (jstruct [elementName]));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="lookFor (&quot;usersWhoCanPost&quot;);"></outline>
				<outline text="lookFor (&quot;renderingPrefs&quot;); //2/21/16 by DW"></outline>
				<outline text="if (jstruct.rssHeadElements !== undefined) { //the user changed something in the RSS feed">
					<outline text="function lookForHeadElement (name) {">
						<outline text="if (jstruct.rssHeadElements [name] !== undefined) {">
							<outline text="theLog.rssHeadElements [name] = jstruct.rssHeadElements [name];"></outline>
							<outline text="theLog.flDirty = true;"></outline>
							<outline text="console.log (&quot;setChatLogMetadata: theLog.rssHeadElements.&quot; + name + &quot; == &quot; + jstruct.rssHeadElements [name]);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="lookForHeadElement (&quot;title&quot;);"></outline>
					<outline text="lookForHeadElement (&quot;link&quot;);"></outline>
					<outline text="lookForHeadElement (&quot;description&quot;);"></outline>
					<outline text="lookForHeadElement (&quot;flInstantArticlesSupport&quot;); //3/4/16 by DW"></outline>
					<outline text="lookForHeadElement (&quot;appDomain&quot;); //3/4/16 by DW"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="callback (undefined, jstruct);"></outline>
				<outline isComment="true" text="saveChatLog (nameChatLog); //3/3/16 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function publishChatLogHomePage (nameChatLog, screenName, htmltext, callback) { //3/3/16 by DW">
				<outline text="if (okToPostToChatLog (nameChatLog, screenName, false)) {">
					<outline text="var theLog = findChatLog (nameChatLog);"></outline>
					<outline text="var path = theLog.s3Path + indexFileName;"></outline>
					<outline text="store.newObject (path, htmltext, &quot;text/html&quot;, undefined, function (err, data) {">
						<outline created="Fri, 02 May 2014 22:20:54 GMT" pgfnum="40903" text="if (err) {">
							<outline text="if (callback != undefined) {">
								<outline text="callback (err);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Fri, 02 May 2014 22:20:59 GMT" pgfnum="40905" text="}"></outline>
							</outline>
						<outline created="Fri, 02 May 2014 22:21:00 GMT" pgfnum="40906" text="else {">
							<outline text="callbacks.callPublishCallbacks (indexFileName, htmltext, &quot;text/html&quot;, nameChatLog); //4/12/16 by DW"></outline>
							<outline text="if (callback != undefined) {">
								<outline text="var jstruct = {">
									<outline text="urlHomePage: theLog.urlPublicFolder"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="callback (undefined, jstruct);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Fri, 02 May 2014 22:21:02 GMT" pgfnum="40907" text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback ({message: &quot;Can't save the home page because you are not authorized to post.&quot;});"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function chatLogEverySecond () {">
				<outline text="if (flChatLogDirty) {">
					<outline text="saveChatLog (nameDirtyChatLog);"></outline>
					<outline text="flChatLogDirty = false; "></outline>
					<outline text="nameDirtyChatLog = undefined;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for (var i = 0; i &lt; chatLogArray.length; i++) {">
					<outline text="var log = chatLogArray [i];"></outline>
					<outline text="if (log.flDirty) {">
						<outline text="saveChatLog (log.name);"></outline>
						<outline text="log.flDirty = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			</outline>
		<outline text="//webhooks -- 8/28/15 by DW">
			<outline text="var webhooks = {">
				<outline text="incoming: {}, "></outline>
				<outline text="outgoing: {}"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="var flWebhooksDirty = false, fnameWebhooks = &quot;data/hooks.json&quot;;"></outline>
			<outline text="var webhookNotEnabledError = &quot;Can't create the webhook because the feature is not enabled on the server, or you are not authorized to create one.&quot;; //8/31/15 by DW"></outline>
			<outline text="var webhookAccessTokenError = &quot;Can't create a new webhook because the accessToken is not valid.&quot;; //8/31/15 by DW"></outline>
			<outline text="var nameWebhookDefaultChannel = &quot;default&quot;; //we only have one channel, this is its name, can be overridden with a config.json setting -- 9/3/15 by DW"></outline>
			<outline text=""></outline>
			<outline text="function loadWebhooks (callback) {">
				<outline created="Wed, 22 Jan 2014 23:07:46 GMT" pgfnum="36412" text="store.getObject (s3PrivatePath + fnameWebhooks, function (error, data) {">
					<outline text="if ((!error) &amp;&amp; (data != null)) {">
						<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="webhooks = JSON.parse (data.Body);"></outline>
						<outline text="console.log (&quot;loadWebhooks: webhooks == &quot; + utils.jsonStringify (webhooks));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="callback ();"></outline>
					<outline created="Wed, 22 Jan 2014 23:07:55 GMT" pgfnum="36413" text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function saveWebhooks () {">
				<outline text="flWebhooksDirty = false;"></outline>
				<outline text="store.newObject (s3PrivatePath + fnameWebhooks, utils.jsonStringify (webhooks));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function okToCreateHook (screenName) {">
				<outline text="if (usersWhoCanCreateWebhooks !== undefined) {">
					<outline text="for (var i = 0; i &lt; usersWhoCanCreateWebhooks.length; i++) {">
						<outline text="if (usersWhoCanCreateWebhooks [i].toLowerCase () == screenName.toLowerCase ()) {">
							<outline text="return (true);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function newIncomingHook (screenName, channel, description, customName, urlCustomIcon, customEmoji, callback) {">
				<outline isComment="true" text="Changes">
					<outline text="8/28/15; 3:33:59 PM by DW">
						<outline text="screenName is the name of user creating the hook."></outline>
						</outline>
					</outline>
				<outline text="var id, urlwebhook;"></outline>
				<outline text="if (channel == undefined) {">
					<outline text="channel = nameWebhookDefaultChannel;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (description == undefined) {">
					<outline text="description = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="while (true) {">
					<outline text="id = utils.getRandomPassword (8);"></outline>
					<outline text="if (webhooks.incoming [id] == undefined) {">
						<outline text="var newHook = {">
							<outline text="name: screenName, //the user who created the hook"></outline>
							<outline text="channel: channel, //maybe someday we'll have more than one channel"></outline>
							<outline text="description: description,"></outline>
							<outline text="whenCreated: new Date (),"></outline>
							<outline text="ctCalls: 0, whenLastCall: new Date (0)"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="if (customName != undefined) {">
							<outline text="newHook.customName = customName;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (urlCustomIcon != undefined) {">
							<outline text="newHook.urlCustomIcon = urlCustomIcon;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (customEmoji != undefined) {">
							<outline text="newHook.customEmoji = customEmoji;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="webhooks.incoming [id] = newHook;"></outline>
						<outline text="urlwebhook = &quot;http://&quot; + domainIncomingWebhook + &quot;/&quot; + id;"></outline>
						<outline text="callback (urlwebhook); "></outline>
						<outline text="flWebhooksDirty = true;"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function newOutgoingHook (screenName, channel, triggerWords, urlsToCall, description, customName, urlCustomIcon, customEmoji, callback) {">
				<outline isComment="true" text="Changes">
					<outline text="8/31/15; 10:03:06 AM by DW">
						<outline text="screenName is the name of user creating the hook."></outline>
						</outline>
					</outline>
				<outline text="var id, urlwebhook;"></outline>
				<outline text="if (channel == undefined) {">
					<outline text="channel = nameWebhookDefaultChannel;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (description == undefined) {">
					<outline text="description = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="console.log (&quot;newOutgoingHook: params == &quot; + screenName + &quot;, &quot; +  channel + &quot;, &quot; +  triggerWords + &quot;, &quot; +  urlsToCall + &quot;, &quot; +  description + &quot;, &quot; +  customName + &quot;, &quot; +  urlCustomIcon + &quot;, &quot; +  customEmoji);"></outline>
				<outline text="while (true) {">
					<outline text="id = utils.getRandomPassword (24);"></outline>
					<outline text="if (webhooks.incoming [id] === undefined) {">
						<outline text="var newHook = {">
							<outline text="name: screenName, //the user who created the hook"></outline>
							<outline text="channel: channel, //maybe someday we'll have more than one channel"></outline>
							<outline text="description: description,"></outline>
							<outline text="token: id,"></outline>
							<outline text="whenCreated: new Date (),"></outline>
							<outline text="ctCalls: 0, whenLastCall: new Date (0)"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="if (triggerWords !== undefined) {">
							<outline text="newHook.triggerWords = triggerWords;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (urlsToCall !== undefined) {">
							<outline text="newHook.urlsToCall = urlsToCall;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (customName !== undefined) {">
							<outline text="newHook.customName = customName;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (urlCustomIcon !== undefined) {">
							<outline text="newHook.urlCustomIcon = urlCustomIcon;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (customEmoji !== undefined) {">
							<outline text="newHook.customEmoji = customEmoji;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="console.log (&quot;newOutgoingHook: newHook == &quot; + utils.jsonStringify (newHook));"></outline>
						<outline text="webhooks.outgoing [id] = newHook;"></outline>
						<outline text="callback (id); "></outline>
						<outline text="flWebhooksDirty = true;"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function incomingWebhookCall (host, lowerpath, payload, callback) {">
				<outline text="var now = new Date ();"></outline>
				<outline text="function slackProcessText (s) {">
					<outline isComment="true" text="Changes">
						<outline text="8/29/15; 9:32:21 AM by DW">
							<outline text="https://api.slack.com/docs/formatting"></outline>
							</outline>
						</outline>
					<outline text="function processPart (s) {">
						<outline text="var parts = s.split (&quot;|&quot;);"></outline>
						<outline text="if (parts.length == 2) {">
							<outline text="return (&quot;&lt;a href=\&quot;&quot; + parts [0] + &quot;\&quot;&gt;&quot; + parts [1] + &quot;&lt;/a&gt;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="return (&quot;&lt;a href=\&quot;&quot; + s + &quot;\&quot;&gt;&quot; + s + &quot;&lt;/a&gt;&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var outputstring = &quot;&quot;;"></outline>
					<outline text="while (s.length &gt; 0) {">
						<outline text="var ch = s [0];"></outline>
						<outline text="if (ch == &quot;&lt;&quot;) {">
							<outline text="var ix = s.indexOf (&quot;&gt;&quot;);"></outline>
							<outline text="if (ix &gt;= 0) { ">
								<outline text="var part = s.slice (1, ix);"></outline>
								<outline text="s = s.substr (ix + 1); //pop off the text betw angle brackets, including the angle brackets"></outline>
								<outline text="outputstring += processPart (part);"></outline>
								<outline isComment="true" text="console.log (&quot;slackProcessText: part == &quot; + part + &quot;, s == &quot; + s);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="s = s.substr (1); //pop off first character"></outline>
							<outline text="outputstring += ch;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (outputstring);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (domainIncomingWebhook == undefined) {">
					<outline text="callback (false); //we don't consume the call"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (host == domainIncomingWebhook) {">
						<outline text="var key = utils.stringDelete (lowerpath, 1, 1); //pop off leading slash"></outline>
						<outline text="var theHook = webhooks.incoming [key];"></outline>
						<outline text="if (theHook == undefined) {">
							<outline text="callback (true, 404, &quot;text/plain&quot;, &quot;Can't call the web hook because it has not been defined.&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="var jstruct;"></outline>
							<outline text="try {jstruct = JSON.parse (payload);}">
								<outline text="catch (err) {">
									<outline text="callback (true, 400, &quot;text/plain&quot;, &quot;Can't call the web hook because the payload is not correctly formatted JSON.&quot;);"></outline>
									<outline text="return;"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="if (jstruct.text != undefined) {">
								<outline text="var screenName = &quot;incoming-webhook-bot&quot;, iconUrl = undefined, iconEmoji = undefined, flTwitterName = true;"></outline>
								<outline text="var channel = theHook.channel; //10/29/15 by DW -- we now have more than one chatlog per server"></outline>
								<outline text=""></outline>
								<outline text="theHook.ctCalls++;"></outline>
								<outline text="theHook.whenLastCall = now;"></outline>
								<outline text="flWebhooksDirty = true;"></outline>
								<outline text=""></outline>
								<outline text="//first, apply the defaults for the hook">
									<outline text="if (theHook.customName !== undefined) {">
										<outline text="screenName = theHook.customName;"></outline>
										<outline text="flTwitterName = false;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (theHook.urlCustomIcon !== undefined) {">
										<outline text="iconUrl = theHook.urlCustomIcon;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (theHook.customEmoji !== undefined) {">
										<outline text="iconEmoji = theHook.customEmoji;"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="//second, apply the values sent with the message (they override the other values">
									<outline text="if (jstruct.username != undefined) {">
										<outline text="screenName = jstruct.username;"></outline>
										<outline text="flTwitterName = false;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (jstruct.icon_url != undefined) {">
										<outline text="iconUrl = jstruct.icon_url;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (jstruct.icon_emoji != undefined) {">
										<outline text="iconEmoji = jstruct.icon_emoji;"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text=""></outline>
								<outline text="postChatMessage (screenName, channel, slackProcessText (jstruct.text),  undefined, undefined, iconUrl, iconEmoji, flTwitterName, function (id) {">
									<outline text="callback (true, 200, &quot;text/plain&quot;, &quot;We love you Burt!&quot;);"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="callback (true, 400, &quot;text/plain&quot;, &quot;Can't call the web hook because there is no \&quot;text\&quot; object in the payload struct.&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="callback (false); //we don't consume the call"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function outgoingWebhookCall (screenName, chatText, idMessage, iconUrl, iconEmoji, flTwitterName, webhookCallback) {">
				<outline text="var callArray = [];"></outline>
				<outline text="var outgoingData = {">
					<outline text="token: undefined,"></outline>
					<outline text="team_id: 0,"></outline>
					<outline text="team_domain: &quot;&quot;,"></outline>
					<outline text="channel_id: &quot;&quot;,"></outline>
					<outline text="channel_name: nameWebhookDefaultChannel, "></outline>
					<outline text="timestamp: Number (new Date ()) + &quot;.&quot; + idMessage,"></outline>
					<outline text="user_id: screenName,"></outline>
					<outline text="user_name: screenName,"></outline>
					<outline text="text: chatText,"></outline>
					<outline text="trigger_word: &quot;&quot;"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="function buildCallArray (chatText) {">
					<outline text="var lowerChatText = chatText.toLowerCase ();"></outline>
					<outline text="for (var x in webhooks.outgoing) {">
						<outline text="var theHook = webhooks.outgoing [x];"></outline>
						<outline text="var urls = theHook.urlsToCall, parts = urls.split (&quot;\n&quot;);"></outline>
						<outline text="var triggers = theHook.triggerWords, flTriggered = false;"></outline>
						<outline isComment="true" text="console.log (&quot;buildCallArray: theHook == &quot; + utils.jsonStringify (theHook));"></outline>
						<outline isComment="true" text="console.log (&quot;buildCallArray: triggers == &quot; + triggers);"></outline>
						<outline text="if ((triggers !== undefined) &amp;&amp; (triggers.length &gt; 0)) {">
							<outline text="var wordsList = triggers.split (&quot;,&quot;);"></outline>
							<outline isComment="true" text="console.log (&quot;buildCallArray: wordsList == &quot; + wordsList);"></outline>
							<outline text="for (var ixlist = 0; ixlist &lt; wordsList.length; ixlist++) {">
								<outline text="var thisWord = utils.trimWhitespace (wordsList [ixlist]).toLowerCase ();"></outline>
								<outline isComment="true" text="console.log (&quot;buildCallArray: checking this word == &quot; + thisWord);"></outline>
								<outline text="if (utils.beginsWith (lowerChatText, thisWord)) {">
									<outline isComment="true" text="console.log (&quot;buildCallArray: thisWord == &quot; + thisWord + &quot;, triggered.&quot;);"></outline>
									<outline text="flTriggered = true;"></outline>
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline isComment="true" text="console.log (&quot;buildCallArray: thisWord == &quot; + thisWord + &quot;, not triggered.&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="flTriggered = true; //no trigger words"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (flTriggered) {">
							<outline text="for (var i = 0; i &lt; parts.length; i++) {">
								<outline text="callArray [callArray.length] = {">
									<outline text="url: parts [i],"></outline>
									<outline text="token: x,"></outline>
									<outline text="hook: theHook"></outline>
									<outline text="};"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline isComment="true" text="console.log (&quot;buildCallArray: callArray == &quot; + utils.jsonStringify (callArray));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function callNextHook (ix) {">
					<outline text="if (ix &lt; callArray.length) {">
						<outline text="var theCall = callArray [ix];"></outline>
						<outline text="outgoingData.token = theCall.token;"></outline>
						<outline text="var rq = {">
							<outline text="uri: theCall.url,"></outline>
							<outline text="body: querystring.stringify (outgoingData)"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="request.post (rq, function (err, res, body) {">
							<outline text="try {">
								<outline text="console.log (&quot;callNextHook: token == &quot; + outgoingData.token + &quot;, res.statusCode == &quot; + res.statusCode);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;callNextHook: token == &quot; + outgoingData.token + &quot;, err.message == &quot; + err.message);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="theCall.hook.ctCalls++;"></outline>
							<outline text="theCall.hook.whenLastCall = new Date ();"></outline>
							<outline isComment="true" text="console.log (&quot;callNextHook: called &quot; + theCall.url + &quot;, theCall.hook.ctCalls == &quot; + theCall.hook.ctCalls);"></outline>
							<outline text="flWebhooksDirty = true;"></outline>
							<outline text="callNextHook (ix + 1);"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (webhookCallback !== undefined) {">
							<outline text="webhookCallback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="buildCallArray (chatText);"></outline>
				<outline isComment="true" text="console.log (&quot;outgoingWebhookCall: callArray == &quot; + utils.jsonStringify (callArray));"></outline>
				<outline text="callNextHook (0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text="function outgoingWebhookCall (screenName, chatText, idMessage, iconUrl, iconEmoji, flTwitterName, callback) {">
				<outline text="var urlArray;"></outline>
				<outline text="var outgoingData = {">
					<outline text="token: undefined,"></outline>
					<outline text="team_id: 0,"></outline>
					<outline text="team_domain: &quot;&quot;,"></outline>
					<outline text="channel_id: &quot;&quot;,"></outline>
					<outline text="channel_name: &quot;braintrust&quot;, //this is wrong -- 8/31/15 by DW"></outline>
					<outline text="timestamp: Number (new Date ()) + &quot;.&quot; + idMessage,"></outline>
					<outline text="user_id: screenName,"></outline>
					<outline text="user_name: screenName,"></outline>
					<outline text="text: chatText,"></outline>
					<outline text="trigger_word: &quot;&quot;"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="function buildUrlArray (chatText, urlArray) {">
					<outline text="var lowerChatText = chatText.toLowerCase ();"></outline>
					<outline text="urlArray = [];"></outline>
					<outline text="for (var x in webhooks.outgoing) {">
						<outline text="var theHook = webhooks.outgoing [x];"></outline>
						<outline text="var urls = theHook.urlsToCall, parts = urls.split (&quot;\n&quot;);"></outline>
						<outline text="var triggers = theHook.triggerWords, flTriggered = false;"></outline>
						<outline text="console.log (&quot;buildUrlArray: theHook == &quot; + utils.jsonStringify (theHook));"></outline>
						<outline text="console.log (&quot;buildUrlArray: triggers == &quot; + triggers);"></outline>
						<outline text="if ((triggers !== undefined) &amp;&amp; (triggers.length &gt; 0)) {">
							<outline text="var wordsList = triggers.split (&quot;,&quot;);"></outline>
							<outline text="console.log (&quot;buildUrlArray: wordsList == &quot; + wordsList);"></outline>
							<outline text="for (var ixlist = 0; ixlist &lt; wordsList.length; ixlist++) {">
								<outline text="var thisWord = utils.trimWhitespace (wordsList [ixlist]).toLowerCase ();"></outline>
								<outline text="console.log (&quot;buildUrlArray: checking this word == &quot; + thisWord);"></outline>
								<outline text="if (utils.beginsWith (lowerChatText, thisWord)) {">
									<outline text="console.log (&quot;buildUrlArray: thisWord == &quot; + thisWord + &quot;, triggered.&quot;);"></outline>
									<outline text="flTriggered = true;"></outline>
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;buildUrlArray: thisWord == &quot; + thisWord + &quot;, not triggered.&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="flTriggered = true; //no trigger words"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (flTriggered) {">
							<outline text="for (var i = 0; i &lt; parts.length; i++) {">
								<outline text="urlArray [urlArray.length] = {">
									<outline text="url: parts [i],"></outline>
									<outline text="token: x"></outline>
									<outline text="};"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="console.log (&quot;buildUrlArray: urlArray == &quot; + utils.jsonStringify (urlArray));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function callNextHook (ix) {">
					<outline text="if (ix &lt; urlArray.length) {">
						<outline text="outgoingData.token = urlArray [ix].token;"></outline>
						<outline text="var rq = {">
							<outline text="uri: urlArray [ix].url,"></outline>
							<outline text="body: querystring.stringify (outgoingData)"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="request.post (rq, function (err, res, body) {">
							<outline text="console.log (&quot;callNextHook: body == &quot; + body);"></outline>
							<outline text="console.log (&quot;callNextHook: res.statusCode == &quot; + res.statusCode);"></outline>
							<outline text="callNextHook (ix + 1);"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="buildUrlArray (chatText, urlArray);"></outline>
				<outline text="console.log (&quot;outgoingWebhookCall: urlArray == &quot; + utils.jsonStringify (urlArray));"></outline>
				<outline text="callNextHook (0);"></outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline created="Wed, 03 Sep 2014 11:59:24 GMT" pgfnum="43257" text="//utility functions -- 2/19/16 by DW">
			<outline text="function getDomainName (clientIp, callback) { //11/14/15 by DW">
				<outline text="if (clientIp === undefined) {">
					<outline text="if (callback !== undefined) {">
						<outline text="callback (&quot;undefined&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="dns.reverse (clientIp, function (err, domains) {">
						<outline text="var name = clientIp;"></outline>
						<outline text="if (!err) {">
							<outline text="if (domains.length &gt; 0) {">
								<outline text="name = domains [0];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (name);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Mon, 21 Apr 2014 23:20:54 GMT" pgfnum="40415" text="function newTwitter (myCallback) {">
				<outline text="var twitter = new twitterAPI ({">
					<outline text="consumerKey: twitterConsumerKey,"></outline>
					<outline text="consumerSecret: twitterConsumerSecret,"></outline>
					<outline created="Mon, 21 Apr 2014 16:29:45 GMT" pgfnum="40363" text="callback: myCallback"></outline>
					<outline text="});"></outline>
					</outline>
				<outline created="Mon, 21 Apr 2014 23:21:39 GMT" pgfnum="40417" text="return (twitter);"></outline>
				<outline created="Mon, 21 Apr 2014 23:21:01 GMT" pgfnum="40416" text="}"></outline>
				</outline>
			<outline text="function kilobyteString (num) { //1/24/15 by DW">
				<outline text="num = Number (num) / 1024;"></outline>
				<outline text="return (num.toFixed (2) + &quot;K&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function megabyteString (num) { //1/24/15 by DW">
				<outline text="var onemeg = 1024 * 1024;"></outline>
				<outline text="if (num &lt;= onemeg) {">
					<outline text="return (kilobyteString (num));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="num = Number (num) / onemeg;"></outline>
				<outline text="return (num.toFixed (2) + &quot;MB&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function gigabyteString (num) { //1/24/15 by DW">
				<outline text="var onegig = 1024 * 1024 * 1024;"></outline>
				<outline text="if (num &lt;= onegig) {">
					<outline text="return (megabyteString (num));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="num = Number (num) / onegig;"></outline>
				<outline text="return (num.toFixed (2) + &quot;GB&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Wed, 09 Jul 2014 23:27:42 GMT" pgfnum="42742" text="function getScreenName (accessToken, accessTokenSecret, callback, flNotWhitelisted) { //7/9/14 by DW">
				<outline isComment="true" text="Changes">
					<outline text="2/23/15; 11:56:04 AM by DW ">
						<outline text="New optional param, flNotWhitelisted."></outline>
						</outline>
					<outline text="11/9/14; 3:57:39 PM by DW">
						<outline text="Call it an error if it's one of the blocked users."></outline>
						</outline>
					</outline>
				<outline text="function checkWhitelist (name) { //2/23/15 by DW">
					<outline text="if (flNotWhitelisted) {">
						<outline text="return (true);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="return (isWhitelistedUser (name));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Wed, 09 Jul 2014 23:37:09 GMT" pgfnum="42762" text="//see if we can get it from the cache first">
					<outline created="Wed, 09 Jul 2014 23:28:55 GMT" pgfnum="42746" text="for (var i = 0; i &lt; screenNameCache.length; i++) {">
						<outline created="Wed, 09 Jul 2014 23:29:55 GMT" pgfnum="42752" text="var obj = screenNameCache [i];"></outline>
						<outline created="Wed, 09 Jul 2014 23:30:08 GMT" pgfnum="42753" text="if ((obj.accessToken == accessToken) &amp;&amp; (obj.accessTokenSecret == accessTokenSecret)) {">
							<outline created="Wed, 09 Jul 2014 23:36:41 GMT" pgfnum="42760" text="obj.ctAccesses++;"></outline>
							<outline text=""></outline>
							<outline text="if (checkWhitelist (obj.screenName)) { //11/18/14 by DW">
								<outline created="Wed, 09 Jul 2014 23:30:51 GMT" pgfnum="42755" text="callback (obj.screenName);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline created="Wed, 09 Jul 2014 23:30:51 GMT" pgfnum="42755" text="callback (undefined);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Wed, 09 Jul 2014 23:42:57 GMT" isComment="true" pgfnum="42780" text="console.log (&quot;getScreenName: found \&quot;&quot; + obj.screenName + &quot;\&quot; in cache. &quot; + obj.ctAccesses + &quot; accesses.&quot;);"></outline>
							<outline created="Wed, 09 Jul 2014 23:36:20 GMT" pgfnum="42759" text="return;"></outline>
							<outline created="Wed, 09 Jul 2014 23:30:25 GMT" pgfnum="42754" text="}"></outline>
							</outline>
						<outline created="Wed, 09 Jul 2014 23:29:10 GMT" pgfnum="42751" text="}"></outline>
						</outline>
					</outline>
				<outline created="Wed, 09 Jul 2014 23:37:19 GMT" pgfnum="42763" text="//call Twitter">
					<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
					<outline created="Fri, 02 May 2014 16:45:32 GMT" pgfnum="40867" text="twitter.verifyCredentials (accessToken, accessTokenSecret, function (error, data, response) {">
						<outline created="Fri, 02 May 2014 16:47:09 GMT" pgfnum="40872" text="if (error) {">
							<outline text="callback (undefined);    "></outline>
							<outline created="Wed, 09 Jul 2014 23:42:57 GMT" pgfnum="42780" text="console.log (&quot;getScreenName: error getting name. &quot; + utils.jsonStringify (error)); "></outline>
							<outline isComment="true" text="console.trace (); //9/1/15 by DW"></outline>
							<outline created="Fri, 02 May 2014 16:47:16 GMT" pgfnum="40873" text="}"></outline>
							</outline>
						<outline created="Fri, 02 May 2014 16:47:17 GMT" pgfnum="40874" text="else {">
							<outline created="Wed, 09 Jul 2014 23:38:48 GMT" pgfnum="42771" text="var obj = new Object ();"></outline>
							<outline created="Wed, 09 Jul 2014 23:38:53 GMT" pgfnum="42772" text="obj.accessToken = accessToken;"></outline>
							<outline created="Wed, 09 Jul 2014 23:38:53 GMT" pgfnum="42772" text="obj.accessTokenSecret = accessTokenSecret;"></outline>
							<outline created="Wed, 09 Jul 2014 23:39:18 GMT" pgfnum="42774" text="obj.screenName = data.screen_name; //the whole point! ;-)"></outline>
							<outline created="Wed, 09 Jul 2014 23:39:43 GMT" pgfnum="42775" text="obj.ctAccesses = 0;"></outline>
							<outline created="Wed, 09 Jul 2014 23:40:20 GMT" pgfnum="42776" text="screenNameCache [screenNameCache.length] = obj;"></outline>
							<outline text="if (checkWhitelist (data.screen_name)) { //11/18/14 by DW">
								<outline created="Wed, 09 Jul 2014 23:30:51 GMT" pgfnum="42755" text="callback (data.screen_name);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline created="Wed, 09 Jul 2014 23:30:51 GMT" pgfnum="42755" text="callback (undefined);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text=""></outline>
							<outline created="Wed, 09 Jul 2014 23:42:57 GMT" isComment="true" pgfnum="42780" text="console.log (&quot;getScreenName: \&quot;&quot; + obj.screenName + &quot;\&quot; not in cache. &quot; + screenNameCache.length + &quot; items in cache.&quot;);"></outline>
							<outline created="Fri, 02 May 2014 16:47:19 GMT" pgfnum="40875" text="}"></outline>
							</outline>
						<outline created="Fri, 02 May 2014 16:47:01 GMT" pgfnum="40871" text="});"></outline>
						</outline>
					</outline>
				<outline created="Wed, 09 Jul 2014 23:28:19 GMT" pgfnum="42744" text="}"></outline>
				<outline created="Wed, 09 Jul 2014 23:27:48 GMT" pgfnum="42743" text=""></outline>
				</outline>
			<outline created="Wed, 02 Jul 2014 22:59:52 GMT" pgfnum="42668" text="function saveTweet (theTweet) { //7/2/14 by DW">
				<outline text="if (serverPrefs.flArchiveTweets) {">
					<outline created="Wed, 02 Jul 2014 23:08:16 GMT" pgfnum="42672" text="try {">
						<outline created="Wed, 02 Jul 2014 23:12:16 GMT" pgfnum="42674" text="var idTweet = theTweet.id_str;"></outline>
						<outline created="Thu, 03 Jul 2014 11:41:08 GMT" pgfnum="42676" text="if (idTweet != undefined) { //it would be undefined if there was an error, like &quot;Status is over 140 characters.&quot;">
							<outline text="var filepath = s3Path + fnameTweetsFolder + utils.getDatePath (new Date (), true) + idTweet + &quot;.json&quot;;"></outline>
							<outline isComment="true" text="console.log (&quot;saveTweet: filepath == &quot; + filepath);"></outline>
							<outline text="store.newObject (filepath, utils.jsonStringify (theTweet));"></outline>
							<outline created="Thu, 03 Jul 2014 11:41:14 GMT" pgfnum="42677" text="}"></outline>
							</outline>
						<outline created="Wed, 02 Jul 2014 23:08:18 GMT" pgfnum="42673" text="}"></outline>
						</outline>
					<outline created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669" text="catch (tryError) {">
						<outline text="console.log (&quot;saveTweet error: &quot; + tryError.message);    "></outline>
						<outline created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670" text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Wed, 02 Jul 2014 23:00:03 GMT" pgfnum="42669" text="}"></outline>
				</outline>
			<outline created="Tue, 11 Feb 2014 18:07:57 GMT" pgfnum="37419" text="function addTweetToLog (tweetObject, startTime) { //4/27/14 by DW">
				<outline created="Mon, 24 Feb 2014 15:52:27 GMT" isComment="true" pgfnum="37930" text="Changes">
					<outline created="Wed, 03 Sep 2014 22:24:52 GMT" pgfnum="43261" text="9/3/14; 6:24:53 PM by DW">
						<outline created="Wed, 03 Sep 2014 22:24:53 GMT" pgfnum="43262" text="We were using the &quot;id&quot; property of the tweet to identify it. Now we use the &quot;id_str&quot; property, which is the one that actually works when you send it back to Twitter. ;-)"></outline>
						<outline created="Wed, 03 Sep 2014 22:25:36 GMT" pgfnum="43263" text="I was building the Community page for Radio3 users, and most of them weren't working. I believe this is why."></outline>
						</outline>
					<outline created="Mon, 24 Feb 2014 15:52:29 GMT" pgfnum="37931" text="4/27/14; 9:39:26 AM by DW">
						<outline created="Mon, 24 Feb 2014 15:52:30 GMT" pgfnum="37932" text="Cribbed from Fargo Publisher."></outline>
						</outline>
					</outline>
				<outline created="Wed, 12 Feb 2014 01:00:03 GMT" pgfnum="37524" text="var now = new Date ();"></outline>
				<outline created="Mon, 24 Feb 2014 15:53:27 GMT" pgfnum="37933" text="if (startTime == undefined) {">
					<outline created="Mon, 24 Feb 2014 15:53:36 GMT" pgfnum="37937" text="startTime = now;"></outline>
					<outline created="Mon, 24 Feb 2014 15:53:41 GMT" pgfnum="37938" text="}"></outline>
					</outline>
				<outline created="Tue, 11 Feb 2014 18:24:54 GMT" pgfnum="37437" text="serverStats.ctTweets++;"></outline>
				<outline text="serverStats.ctTweetsThisRun++;"></outline>
				<outline text="serverStats.ctTweetsToday++;"></outline>
				<outline created="Wed, 12 Feb 2014 15:56:27 GMT" pgfnum="37574" text=""></outline>
				<outline created="Tue, 11 Feb 2014 18:08:47 GMT" pgfnum="37430" text="var obj = new Object ();"></outline>
				<outline created="Sun, 27 Apr 2014 13:45:25 GMT" pgfnum="40517" text="obj.text = tweetObject.text;"></outline>
				<outline created="Sun, 27 Apr 2014 13:45:25 GMT" pgfnum="40517" text="obj.id = tweetObject.id_str; //9/3/14 by DW"></outline>
				<outline created="Sun, 27 Apr 2014 13:45:25 GMT" isComment="true" pgfnum="40517" text="obj.id = tweetObject.id;"></outline>
				<outline created="Sun, 27 Apr 2014 13:45:25 GMT" pgfnum="40517" text="obj.user = tweetObject.user.screen_name;"></outline>
				<outline created="Sun, 27 Apr 2014 18:47:47 GMT" pgfnum="40542" text=""></outline>
				<outline created="Sun, 27 Apr 2014 18:47:47 GMT" pgfnum="40543" text="//obj.inReplyToId">
					<outline created="Sun, 27 Apr 2014 18:49:10 GMT" pgfnum="40552" text="{">
						<outline created="Sun, 27 Apr 2014 18:48:09 GMT" pgfnum="40547" text="var x = tweetObject.in_reply_to_status_id;"></outline>
						<outline created="Sun, 27 Apr 2014 18:48:19 GMT" pgfnum="40548" text="if (x == null) {">
							<outline created="Sun, 27 Apr 2014 18:48:24 GMT" pgfnum="40549" text="x = 0;"></outline>
							<outline created="Sun, 27 Apr 2014 18:48:26 GMT" pgfnum="40550" text="}"></outline>
							</outline>
						<outline created="Sun, 27 Apr 2014 13:47:42 GMT" pgfnum="40518" text="obj.inReplyToId = x;"></outline>
						<outline created="Sun, 27 Apr 2014 18:49:01 GMT" pgfnum="40551" text="}"></outline>
						</outline>
					</outline>
				<outline created="Sun, 27 Apr 2014 18:47:48 GMT" pgfnum="40546" text=""></outline>
				<outline created="Tue, 11 Feb 2014 18:09:51 GMT" isComment="true" pgfnum="37435" text="obj.when = now.toUTCString ();"></outline>
				<outline created="Tue, 29 Apr 2014 22:50:21 GMT" pgfnum="40673" text="obj.when = now.toLocaleString ();"></outline>
				<outline created="Tue, 29 Apr 2014 22:50:21 GMT" pgfnum="40675" text=""></outline>
				<outline created="Mon, 24 Feb 2014 15:55:07 GMT" pgfnum="37939" text="obj.secs = utils.secondsSince (startTime); "></outline>
				<outline created="Tue, 11 Feb 2014 18:08:47 GMT" pgfnum="37431" text="serverStats.recentTweets.unshift (obj);  //add at beginning of array"></outline>
				<outline created="Wed, 29 Jan 2014 22:12:30 GMT" pgfnum="36574" text="while (serverStats.recentTweets.length &gt; maxrecentTweets) { //keep array within max size">
					<outline created="Wed, 29 Jan 2014 22:12:43 GMT" pgfnum="36576" text="serverStats.recentTweets.pop ();"></outline>
					<outline created="Wed, 29 Jan 2014 22:12:46 GMT" pgfnum="36577" text="}"></outline>
					</outline>
				<outline isComment="true" text="store.newObject (s3Path + fnameStats, utils.jsonStringify (serverStats));"></outline>
				<outline text="statsChanged ();"></outline>
				<outline created="Tue, 11 Feb 2014 18:08:41 GMT" pgfnum="37429" text="}"></outline>
				</outline>
			<outline created="Sun, 03 Aug 2014 23:57:08 GMT" pgfnum="43099" text="function getS3UsersPath (flPrivate) { //8/3/14 by DW">
				<outline created="Sun, 03 Aug 2014 23:57:31 GMT" pgfnum="43102" text="if (utils.getBoolean (flPrivate)) {">
					<outline created="Sun, 03 Aug 2014 23:57:44 GMT" pgfnum="43106" text="return (s3PrivatePath + &quot;users/&quot;);"></outline>
					<outline created="Sun, 03 Aug 2014 23:57:38 GMT" pgfnum="43105" text="}"></outline>
					</outline>
				<outline created="Sun, 03 Aug 2014 23:57:49 GMT" pgfnum="43107" text="else {">
					<outline created="Sun, 03 Aug 2014 23:57:51 GMT" pgfnum="43108" text="return (s3Path + &quot;users/&quot;);"></outline>
					<outline created="Sun, 03 Aug 2014 23:57:54 GMT" pgfnum="43109" text="}"></outline>
					</outline>
				<outline created="Sun, 03 Aug 2014 23:57:17 GMT" pgfnum="43100" text="}"></outline>
				</outline>
			<outline created="Sun, 03 Aug 2014 23:57:08 GMT" pgfnum="43099" text="function getS3Acl (flPrivate) { //8/3/14 by DW">
				<outline created="Sun, 03 Aug 2014 23:57:31 GMT" pgfnum="43102" text="if (utils.getBoolean (flPrivate)) {">
					<outline created="Sun, 03 Aug 2014 23:57:44 GMT" pgfnum="43106" text="return (&quot;private&quot;);"></outline>
					<outline created="Sun, 03 Aug 2014 23:57:38 GMT" pgfnum="43105" text="}"></outline>
					</outline>
				<outline created="Sun, 03 Aug 2014 23:57:49 GMT" pgfnum="43107" text="else {">
					<outline created="Sun, 03 Aug 2014 23:57:51 GMT" pgfnum="43108" text="return (&quot;public-read&quot;);"></outline>
					<outline created="Sun, 03 Aug 2014 23:57:54 GMT" pgfnum="43109" text="}"></outline>
					</outline>
				<outline created="Sun, 03 Aug 2014 23:57:17 GMT" pgfnum="43100" text="}"></outline>
				</outline>
			<outline text="function getUserFileList (s3path, callback) { //12/21/14 by DW">
				<outline isComment="true" text="Changes">
					<outline text="11/1/14; 4:20:32 PM by DW">
						<outline text="Only read files with names that end with .opml so we don't read invisible files like .DS_Store on the Mac."></outline>
						</outline>
					<outline text="6/7/14; 11:59:26 AM by DW">
						<outline text="Before reading the lists, we loop over the feedsArray, emptying  the list of lists for each feed. Otherwise there is no way for a feed to leave a list."></outline>
						</outline>
					<outline text="5/28/14; 12:16:37 PM by DW">
						<outline text="We now keep a list of all the list names in serverData.stats."></outline>
						</outline>
					</outline>
				<outline text="var now = new Date (), theList = new Array ();"></outline>
				<outline created="Wed, 19 Mar 2014 19:59:25 GMT" pgfnum="39572" text="store.listObjects (s3path, function (obj) {">
					<outline created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728" text="if (obj.flLastObject != undefined) {">
						<outline text="if (callback != undefined) {">
							<outline text="callback (undefined, theList);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731" text="}"></outline>
						</outline>
					<outline created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732" text="else {">
						<outline text="theList [theList.length] = obj;"></outline>
						<outline created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733" text="}"></outline>
						</outline>
					<outline created="Wed, 19 Mar 2014 19:59:50 GMT" pgfnum="39573" text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function addComment (snCommenter, snAuthor, idPost, urlOpmlFile, callback) { //2/21/15 by DW">
				<outline isComment="true" text="Changes">
					<outline text="2/21/15; 12:41:59 PM by DW">
						<outline text="Created. "></outline>
						<outline text="The screenName of the person writing the comment is called &quot;snCommenter&quot;."></outline>
						<outline text="The screenName of the person who wrote the post being commented on is &quot;snAuthor&quot;."></outline>
						<outline text="The ID of the post being commented on (a numerical representation of its creation date) is &quot;idPost&quot;."></outline>
						</outline>
					</outline>
				<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = s3PrivatePath + &quot;users/&quot; + snAuthor + &quot;/comments/&quot; + idPost + &quot;.json&quot;, now = new Date (), flprivate = true;"></outline>
				<outline created="Tue, 22 Jul 2014 13:24:40 GMT" isComment="true" pgfnum="43027" text="console.log (&quot;addComment: s3path == &quot; + s3path); "></outline>
				<outline isComment="true" text="console.log (&quot;addComment: snCommenter == &quot; + snCommenter + &quot;, snAuthor == &quot; + snAuthor + &quot;, idPost == &quot; + idPost + &quot;, urlOpmlFile == &quot; + urlOpmlFile);"></outline>
				<outline text="store.getObject (s3path, function (error, data) {">
					<outline text="var jstruct, flnew = true, jstructsub;"></outline>
					<outline text="if (error) {">
						<outline text="jstruct = new Array ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="jstruct = JSON.parse (data.Body.toString ());"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="for (var i = 0; i &lt; jstruct.length; i++) {">
						<outline text="if (jstruct [i].commenter == snCommenter) {">
							<outline text="flnew = false;"></outline>
							<outline text="jstructsub = jstruct [i];"></outline>
							<outline text="break;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (flnew) {">
						<outline text="var ixnew = jstruct.length;"></outline>
						<outline text="jstruct [ixnew] = {">
							<outline text="commenter: snCommenter,"></outline>
							<outline text="ctUpdates: 0,"></outline>
							<outline text="whenCreated: now,"></outline>
							<outline text="whenUpdated: now"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="jstructsub = jstruct [ixnew];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline isComment="true" text="if (jstruct [snCommenter] === undefined) {">
						<outline text="jstruct [snCommenter] = {">
							<outline text="ctUpdates: 0,"></outline>
							<outline text="whenCreated: now,"></outline>
							<outline text="whenUpdated: now"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline isComment="true" text="var jstructsub = jstruct [snCommenter];"></outline>
					<outline text="jstructsub.whenUpdated = now;"></outline>
					<outline text="jstructsub.ctUpdates++;"></outline>
					<outline text="jstructsub.urlOpmlFile = urlOpmlFile;"></outline>
					<outline text=""></outline>
					<outline isComment="true" text="console.log (&quot;jstructsub == &quot; + utils.jsonStringify (jstructsub));"></outline>
					<outline text=""></outline>
					<outline text="store.newObject (s3path, utils.jsonStringify (jstruct), &quot;application/json&quot;, getS3Acl (flprivate), function (error, data) {">
						<outline created="Fri, 02 May 2014 22:20:54 GMT" pgfnum="40903" text="if (error) {">
							<outline text="if (callback != undefined) {">
								<outline text="callback (error, undefined);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Fri, 02 May 2014 22:20:59 GMT" pgfnum="40905" text="}"></outline>
							</outline>
						<outline created="Fri, 02 May 2014 22:21:00 GMT" pgfnum="40906" text="else {">
							<outline text="var returnStruct = {">
								<outline text="filepath: s3path,"></outline>
								<outline text="whenCreated: jstructsub.whenCreated,"></outline>
								<outline text="whenUpdated: jstructsub.whenUpdated,"></outline>
								<outline text="ctUpdates: jstructsub.ctUpdates"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="if (callback != undefined) {">
								<outline text="callback (undefined, returnStruct);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline created="Fri, 02 May 2014 22:21:02 GMT" pgfnum="40907" text="}"></outline>
							</outline>
						<outline created="Fri, 02 May 2014 17:31:21 GMT" pgfnum="40890" text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getComments (snAuthor, idPost, callback) {">
				<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = s3PrivatePath + &quot;users/&quot; + snAuthor + &quot;/comments/&quot; + idPost + &quot;.json&quot;;"></outline>
				<outline text="store.getObject (s3path, function (error, data) {">
					<outline text="if (error) {">
						<outline text="if (callback != undefined) {">
							<outline text="callback (error, undefined);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="var jstruct = JSON.parse (data.Body.toString ());"></outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback (undefined, jstruct);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getUserCommentsOpml (s3path, callback) {">
				<outline text="var opmltext = &quot;&quot;, indentlevel = 0;"></outline>
				<outline text="function add (s) {">
					<outline text="opmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\r\n&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"></outline>
				<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"></outline>
				<outline text="//add head">
					<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"></outline>
					<outline text="add (&quot;&lt;title&gt;Comments&lt;/title&gt;&quot;);"></outline>
					<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"></outline>
					</outline>
				<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"></outline>
				<outline created="Wed, 19 Mar 2014 19:59:25 GMT" pgfnum="39572" text="store.listObjects (s3path, function (obj) { ">
					<outline created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728" text="if (obj.flLastObject != undefined) {">
						<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"></outline>
						<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"></outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback (opmltext);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731" text="}"></outline>
						</outline>
					<outline created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732" text="else {">
						<outline text="if (obj.Size &gt; 0) { //it's a file">
							<outline text="var filepath = obj.s3path;"></outline>
							<outline text="var url = &quot;http://&quot; + filepath;"></outline>
							<outline text="var fname = utils.stringNthField (filepath, &quot;/&quot;, utils.stringCountFields (filepath, &quot;/&quot;)); //something like 1424570840000.opml"></outline>
							<outline text="var numpart = utils.stringNthField (fname, &quot;.&quot;, 1);"></outline>
							<outline text="var when = new Date (Number (numpart));"></outline>
							<outline isComment="true" text="console.log (&quot;/opmlcomments: filepath == &quot; + filepath);"></outline>
							<outline text="add (&quot;&lt;outline text=\&quot;&quot; + when + &quot;\&quot; type=\&quot;include\&quot; url=\&quot;&quot; + url + &quot;\&quot; /&gt;&quot;);"></outline>
							<outline isComment="true" text="add (&quot;&lt;outline text=\&quot;&quot; + when.toLocaleDateString () + &quot;; &quot; + when.toLocaleTimeString () + &quot;\&quot; type=\&quot;include\&quot; url=\&quot;&quot; + url + &quot;\&quot; /&gt;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733" text="}"></outline>
						</outline>
					<outline created="Wed, 19 Mar 2014 19:59:50 GMT" pgfnum="39573" text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline text=""></outline>
		<outline text="function everyMinute () {">
			<outline text="var now = new Date ();"></outline>
			<outline text="console.log (&quot;\neveryMinute: &quot; + now.toLocaleTimeString () + &quot;, v&quot; + myVersion + &quot;, &quot; + countOpenSockets () + &quot; open sockets&quot;);"></outline>
			<outline text="readUserWhitelist (); //11/18/14 by DW"></outline>
			<outline text="update.doUpdate (); //3/24/16 by DW"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everySecond () {">
			<outline text="if (!flScheduledEveryMinute) { //9/2/15 by DW">
				<outline text="if (new Date ().getSeconds () == 0) {">
					<outline text="setInterval (everyMinute, 60000); "></outline>
					<outline text="flScheduledEveryMinute = true;"></outline>
					<outline text="everyMinute (); //it's the top of the minute, we have to do one now"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="checkLongpolls ();"></outline>
			<outline text="if (flStatsDirty) {">
				<outline text="saveServerStats ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="chatLogEverySecond ();"></outline>
			<outline text="if (flWatchAppDateChange) { //8/26/15 by DW">
				<outline text="utils.getFileModDate (fnameApp, function (theModDate) {">
					<outline text="if (theModDate != origAppModDate) {">
						<outline isComment="true" text="console.log (&quot;everySecond: &quot; + theModDate + &quot; != &quot; + origAppModDate);"></outline>
						<outline text="console.log (&quot;everySecond: &quot; + fnameApp + &quot; has been updated. &quot; + myProductName + &quot; is quitting now.&quot;);"></outline>
						<outline text="process.exit (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flWebhooksDirty) {">
				<outline text="saveWebhooks ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function handleHttpRequest (httpRequest, httpResponse) {">
			<outline isComment="true" text="Changes">
				<outline text="3/27/16; 4:54:44 PM by DW">
					<outline text="When serving from the filesystem, use the actual path, not the path converted to lowercase. We're generally using case-sensitive filesystems, and converting to lowercase doesn't work if the path contains uppercase characters."></outline>
					<outline text="We also check the path for illegal characters, so this feature can't be used to read files outside of the configured directories."></outline>
					</outline>
				</outline>
			<outline created="Tue, 29 Apr 2014 21:25:20 GMT" pgfnum="40664" text="try {">
				<outline created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078" text="var parsedUrl = urlpack.parse (httpRequest.url, true), now = new Date ();"></outline>
				<outline text="var startTime = now, flStatsSaved = false, host, lowerhost, port, referrer;"></outline>
				<outline text="var lowerpath = parsedUrl.pathname.toLowerCase (), clientIp = httpRequest.connection.remoteAddress;"></outline>
				<outline text=""></outline>
				<outline text="function doHttpReturn (code, type, s) { //8/28/15 by DW">
					<outline text="httpResponse.writeHead (code, {&quot;Content-Type&quot;: type, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
					<outline text="httpResponse.end (s);    "></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function returnRedirect (url, code) {">
					<outline text="if (code === undefined) {">
						<outline text="code = 302;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="httpResponse.writeHead (code, {&quot;location&quot;: url, &quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
					<outline text="httpResponse.end (code + &quot; REDIRECT&quot;);    "></outline>
					<outline text="}"></outline>
					<outline text=""></outline>
					</outline>
				<outline created="Sat, 26 Apr 2014 23:41:08 GMT" pgfnum="40500" text="function addOurDataToReturnObject (returnObject) {">
					<outline text="return; //disabled -- 2/21/15 by DW"></outline>
					<outline text=""></outline>
					<outline created="Sat, 26 Apr 2014 23:41:38 GMT" pgfnum="40502" text="returnObject [&quot;#smallpict&quot;] = {">
						<outline created="Sat, 26 Apr 2014 23:42:51 GMT" pgfnum="40506" text="productname: myProductName,"></outline>
						<outline created="Sat, 26 Apr 2014 23:42:08 GMT" pgfnum="40504" text="version: myVersion"></outline>
						<outline created="Sat, 26 Apr 2014 23:42:03 GMT" pgfnum="40503" text="};"></outline>
						</outline>
					<outline created="Sat, 26 Apr 2014 23:41:30 GMT" pgfnum="40501" text="}"></outline>
					</outline>
				<outline text="function checkPathForIllegalChars (path) {">
					<outline isComment="true" text="Changes">
						<outline text="5/10/15; 7:08:13 PM by DW">
							<outline text="* is legal."></outline>
							</outline>
						</outline>
					<outline text="function isIllegal (ch) {">
						<outline text="if (utils.isAlpha (ch) || utils.isNumeric (ch)) {">
							<outline text="return (false);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="switch (ch) {">
							<outline text="case &quot;/&quot;: case &quot;_&quot;: case &quot;-&quot;: case &quot;.&quot;:  case &quot; &quot;: case &quot;*&quot;:">
								<outline text="return (false);"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline isComment="true" text="for (var i = 0; i &lt;  pageparkPrefs.legalPathChars.length; i++) { //7/19/15 by DW -- check if they are legal on this server">
							<outline text="if (ch == pageparkPrefs.legalPathChars [i]) {">
								<outline text="return (false);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="return (true);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="for (var i = 0; i &lt; path.length; i++) {">
						<outline text="if (isIllegal (path [i])) {">
							<outline text="return (false);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (utils.stringContains (path, &quot;./&quot;)) {">
						<outline text="return (false);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Tue, 22 Apr 2014 02:13:50 GMT" pgfnum="40431" text="function getTwitterTimeline (whichTimeline) {">
					<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
					<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
					<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var userId = parsedUrl.query.user_id;"></outline>
					<outline created="Tue, 22 Apr 2014 01:55:42 GMT" pgfnum="40420" text="var sinceId = parsedUrl.query.since_id;"></outline>
					<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
					<outline created="Tue, 22 Apr 2014 02:02:04 GMT" pgfnum="40422" text="var params = {user_id: userId, trim_user: &quot;false&quot;};"></outline>
					<outline created="Tue, 22 Apr 2014 02:02:35 GMT" pgfnum="40423" text=""></outline>
					<outline created="Tue, 22 Apr 2014 02:02:36 GMT" pgfnum="40424" text="if (sinceId != undefined) {">
						<outline created="Tue, 22 Apr 2014 02:02:49 GMT" pgfnum="40428" text="params.since_id = sinceId;"></outline>
						<outline created="Tue, 22 Apr 2014 02:02:45 GMT" pgfnum="40427" text="}"></outline>
						</outline>
					<outline created="Mon, 21 Apr 2014 23:21:57 GMT" pgfnum="40419" text=""></outline>
					<outline text="twitter.getTimeline (whichTimeline, params, accessToken, accessTokenSecret, function (error, data, response) {">
						<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (error) {">
							<outline created="Mon, 21 Apr 2014 23:13:06 GMT" pgfnum="40412" text="console.log (&quot;getTwitterTimeline: error == &quot; + error.message);"></outline>
							<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;}); //changed from 503 -- 6/20/14 by DW"></outline>
							<outline text="httpResponse.end (utils.jsonStringify (error));    "></outline>
							<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
							</outline>
						<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
							<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
							<outline text="addOurDataToReturnObject (data);"></outline>
							<outline text="httpResponse.end (utils.jsonStringify (data));    "></outline>
							<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
							</outline>
						<outline created="Mon, 21 Apr 2014 23:12:34 GMT" pgfnum="40407" text="});"></outline>
						</outline>
					<outline created="Tue, 22 Apr 2014 02:13:58 GMT" pgfnum="40432" text="}"></outline>
					</outline>
				<outline text="function getConfigJson () { //3/24/16 by DW">
					<outline text="var jstruct = new Object ();"></outline>
					<outline text="for (var x in homePageConfig) {">
						<outline text="jstruct [x] = homePageConfig [x];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (jstruct.urlTwitterServer === undefined) {">
						<outline text="jstruct.urlTwitterServer = &quot;http://&quot; + myDomain + &quot;/&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if ((jstruct.urlChatLogSocket === undefined) &amp;&amp; (websocketPort !== undefined)) {">
						<outline text="var domain = utils.stringNthField (myDomain, &quot;:&quot;, 1); //remove port, if present"></outline>
						<outline text="jstruct.urlChatLogSocket = &quot;ws://&quot; + domain + &quot;:&quot; + websocketPort + &quot;/&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (jstruct.urlPageTemplate === undefined) {">
						<outline text="jstruct.urlPageTemplate = &quot;/template.html&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="jstruct.flEditChatUsePostBody = true; //signal to the client they can use this feature, we support it -- 4/28/16 by DW"></outline>
					<outline text="jstruct.facebookAppId = facebookAppId; //5/2/16 by DW"></outline>
					<outline text="jstruct.server = { //4/29/16 by DW">
						<outline text="productName: myProductName,"></outline>
						<outline text="version: myVersion,"></outline>
						<outline text="now: new Date ()"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="//jstruct.editors">
						<outline text="jstruct.editors = new Object ();"></outline>
						<outline text="for (var x in theEditors) {">
							<outline text="jstruct.editors [x] = {">
								<outline text="name: theEditors [x].name"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="//jstruct.plugIns">
						<outline text="jstruct.plugIns = new Object ();"></outline>
						<outline text="for (var x in thePlugIns) {">
							<outline text="jstruct.plugIns [x] = {">
								<outline text="name: thePlugIns [x].name"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="return (utils.jsonStringify (jstruct));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function get404page (callback) { //6/25/16 by DW">
					<outline text="function plainReturn () {">
						<outline text="callback (&quot;Not found.&quot;, &quot;text/plain&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (url404page !== undefined) {">
						<outline text="request (url404page, function (error, response, body) {">
							<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
								<outline text="callback (body, &quot;text/html&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="plainReturn ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="plainReturn ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Sat, 03 May 2014 21:00:18 GMT" pgfnum="40964" text="function errorResponse (error) {">
					<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
					<outline text="httpResponse.end (utils.jsonStringify (error));    "></outline>
					<outline created="Sat, 03 May 2014 21:00:25 GMT" pgfnum="40966" text="}"></outline>
					</outline>
				<outline created="Sat, 21 Jun 2014 14:43:37 GMT" pgfnum="42367" text="function dataResponse (data) { //6/21/14 by DW">
					<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
					<outline text="addOurDataToReturnObject (data);"></outline>
					<outline text="httpResponse.end (utils.jsonStringify (data));    "></outline>
					<outline created="Sat, 21 Jun 2014 14:43:44 GMT" pgfnum="42368" text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="function requestHomeFile (lowerpath, callback) { //3/19/16 by DW">
					<outline text="if (urlHomePageContent === undefined) {">
						<outline text="callback ({message: &quot;Can't get the file because the server isn't configured for it.&quot;});"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="var url = utils.stringPopLastField (urlHomePageContent, &quot;/&quot;) + lowerpath;"></outline>
						<outline text="console.log (&quot;requestHomeFile: url == &quot; + url);"></outline>
						<outline text="request (url, function (err, response, body) {">
							<outline text="callback (err, body);    "></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function requestEditor (editorname, callback) { //4/29/16 by DW">
					<outline text="var editor = theEditors [editorname];"></outline>
					<outline text="if (editor === undefined) {">
						<outline text="callback ({message: &quot;There is no editor named \&quot;&quot; + editorname + &quot;.\&quot;&quot;});    "></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (editor.url === undefined) {">
							<outline text="callback ({message: &quot;The editor, \&quot;&quot; + editorname + &quot;,\&quot; doesn't have a url value.&quot;});    "></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;requestEditor: editor.url == &quot; + editor.url);"></outline>
							<outline text="request (editor.url, function (err, response, body) {">
								<outline text="callback (err, body);    "></outline>
								<outline text="});"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function requestPlugIn (plugInName, plugInStruct, typeString, callback) { //4/29/16 by DW">
					<outline text="var plugin = plugInStruct [plugInName];"></outline>
					<outline text="if (plugin === undefined) {">
						<outline text="callback ({message: &quot;There is no &quot; + typeString + &quot; named \&quot;&quot; + plugInName + &quot;.\&quot;&quot;});    "></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (plugin.url === undefined) {">
							<outline text="callback ({message: &quot;The &quot; + typeString + &quot;, \&quot;&quot; + plugInName + &quot;,\&quot; doesn't have a url value.&quot;});    "></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;requestEditor: plugin.url == &quot; + plugin.url);"></outline>
							<outline text="request (plugin.url, function (err, response, body) {">
								<outline text="callback (err, body);    "></outline>
								<outline text="});"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Mon, 21 Apr 2014 20:15:22 GMT" pgfnum="40388" text="function encode (s) {">
					<outline created="Mon, 21 Apr 2014 20:15:26 GMT" pgfnum="40389" text="return (encodeURIComponent (s));"></outline>
					<outline created="Mon, 21 Apr 2014 20:15:31 GMT" pgfnum="40390" text="}"></outline>
					</outline>
				<outline created="Sun, 27 Apr 2014 18:22:12 GMT" pgfnum="40521" text=""></outline>
				<outline created="Sun, 27 Apr 2014 19:14:46 GMT" pgfnum="40561" text="//stats">
					<outline created="Sun, 27 Apr 2014 18:22:34 GMT" pgfnum="40525" text="serverStats.ctHits++;"></outline>
					<outline created="Sun, 27 Apr 2014 18:22:34 GMT" pgfnum="40525" text="serverStats.ctHitsThisRun++;"></outline>
					<outline created="Sun, 27 Apr 2014 18:22:34 GMT" pgfnum="40525" text="serverStats.ctHitsToday++;"></outline>
					<outline created="Mon, 24 Feb 2014 17:39:28 GMT" pgfnum="37954" text="serverStats.version = myVersion;  //2/24/14 by DW"></outline>
					<outline created="Mon, 03 Feb 2014 18:45:55 GMT" pgfnum="36993" text="if (!utils.sameDay (serverStats.today, now)) { //date rollover">
						<outline created="Wed, 12 Feb 2014 15:57:43 GMT" pgfnum="37575" text="serverStats.today = now;"></outline>
						<outline text="serverStats.ctHitsToday = 0;"></outline>
						<outline text="serverStats.ctTweetsToday = 0;"></outline>
						<outline text="serverStats.ctLongPollsToday = 0;"></outline>
						<outline created="Mon, 03 Feb 2014 18:46:08 GMT" pgfnum="36994" text="}"></outline>
						</outline>
					<outline text="statsChanged ();"></outline>
					</outline>
				<outline text="//set host, port">
					<outline text="host = httpRequest.headers.host;"></outline>
					<outline text="if (utils.stringContains (host, &quot;:&quot;)) {">
						<outline text="port = utils.stringNthField (host, &quot;:&quot;, 2);"></outline>
						<outline text="host = utils.stringNthField (host, &quot;:&quot;, 1);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="port = 80;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="lowerhost = host.toLowerCase ();"></outline>
					</outline>
				<outline text="//set referrer">
					<outline text="referrer = httpRequest.headers.referer;"></outline>
					<outline text="if (referrer == undefined) {">
						<outline text="referrer = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					</outline>
				<outline text="//log the request">
					<outline text="getDomainName (clientIp, function (theName) { //log the request">
						<outline text="var freemem = gigabyteString (os.freemem ()); "></outline>
						<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + httpRequest.method + &quot; &quot; + host + &quot;:&quot; + port + &quot; &quot; + lowerpath + &quot; &quot; + referrer + &quot; &quot; + theName);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline isComment="true" text="dns.reverse (clientIp, function (err, domains) {">
						<outline text="var client = httpRequest.connection.remoteAddress;"></outline>
						<outline text="var freemem = gigabyteString (os.freemem ()); //1/24/15 by DW"></outline>
						<outline text="if (!err) {">
							<outline text="if (domains.length &gt; 0) {">
								<outline text="client = domains [0];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + httpRequest.method + &quot; &quot; + host + &quot;:&quot; + port + &quot; &quot; + lowerpath + &quot; &quot; + referrer + &quot; &quot; + client);"></outline>
						<outline text="});"></outline>
						</outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (flEnabled) { ">
					<outline text="names.serveThroughName (host, port, httpRequest, userDomain, function (flMatch, code, contentType, data) {">
						<outline text="if (flMatch) {">
							<outline text="httpResponse.writeHead (code, {&quot;Content-Type&quot;: contentType, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
							<outline text="httpResponse.end (data);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803" text="switch (httpRequest.method) {">
								<outline created="Thu, 01 May 2014 20:42:24 GMT" pgfnum="40805" text="case &quot;POST&quot;:">
									<outline text="var body = &quot;&quot;;"></outline>
									<outline text="httpRequest.on (&quot;data&quot;, function (data) {">
										<outline text="body += data;"></outline>
										<outline text="});"></outline>
										</outline>
									<outline text="httpRequest.on (&quot;end&quot;, function () {">
										<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var payload = parsedUrl.query.payload;"></outline>
										<outline text="if (payload == undefined) {">
											<outline text="payload = body;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="incomingWebhookCall (host, lowerpath, payload, function (flMatch, code, contentType, data) {">
											<outline text="if (flMatch) {">
												<outline text="doHttpReturn (code, contentType, data);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline created="Thu, 01 May 2014 21:24:18 GMT" pgfnum="40824" text="switch (parsedUrl.pathname.toLowerCase ()) {">
													<outline created="Mon, 30 Jun 2014 21:38:07 GMT" pgfnum="42629" text="case &quot;/statuswithmedia&quot;: //6/30/14 by DW -- used in Little Card Editor">
														<outline created="Tue, 01 Jul 2014 00:06:28 GMT" pgfnum="42652" text="var params = {">
															<outline text="url: &quot;https://api.twitter.com/1.1/statuses/update_with_media.json&quot;,"></outline>
															<outline text="oauth: {">
																<outline text="consumer_key: twitterConsumerKey,"></outline>
																<outline text="consumer_secret: twitterConsumerSecret,"></outline>
																<outline text="token: parsedUrl.query.oauth_token,"></outline>
																<outline text="token_secret: parsedUrl.query.oauth_token_secret"></outline>
																<outline text="}"></outline>
																</outline>
															<outline created="Tue, 01 Jul 2014 00:06:32 GMT" pgfnum="42653" text="}"></outline>
															</outline>
														<outline created="Mon, 30 Jun 2014 23:52:37 GMT" pgfnum="42650" text="function requestCallback (error, response, body) {">
															<outline created="Fri, 02 May 2014 22:20:54 GMT" pgfnum="40903" text="if (error) {">
																<outline created="Tue, 01 Jul 2014 13:51:56 GMT" pgfnum="42666" text="errorResponse (error);"></outline>
																<outline created="Fri, 02 May 2014 22:20:59 GMT" pgfnum="40905" text="}"></outline>
																</outline>
															<outline created="Fri, 02 May 2014 22:21:00 GMT" pgfnum="40906" text="else {">
																<outline created="Wed, 02 Jul 2014 22:58:20 GMT" pgfnum="42667" text="saveTweet (body); //7/2/14 by DW"></outline>
																<outline created="Mon, 30 Jun 2014 16:21:29 GMT" pgfnum="42626" text="dataResponse (body);"></outline>
																<outline text="console.log (utils.jsonStringify (body));    "></outline>
																<outline created="Fri, 02 May 2014 22:21:02 GMT" pgfnum="40907" text="}"></outline>
																</outline>
															<outline created="Mon, 30 Jun 2014 23:52:43 GMT" pgfnum="42651" text="}"></outline>
															</outline>
														<outline text="var r = request.post (params, requestCallback);"></outline>
														<outline text="var form = r.form ();"></outline>
														<outline text="var buffer = new Buffer (body, &quot;base64&quot;); "></outline>
														<outline text="form.append (&quot;status&quot;, parsedUrl.query.status);"></outline>
														<outline text="form.append (&quot;media[]&quot;, buffer, {filename: &quot;picture.png&quot;});"></outline>
														<outline created="Mon, 30 Jun 2014 21:42:09 GMT" pgfnum="42632" text="break;"></outline>
														</outline>
													<outline created="Thu, 26 Jun 2014 11:33:59 GMT" pgfnum="42464" text="case &quot;/publishfile&quot;: //8/3/14 by DW">
														<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
														<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
														<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
														<outline created="Thu, 26 Jun 2014 11:36:12 GMT" pgfnum="42468" text="var relpath = parsedUrl.query.relpath;"></outline>
														<outline created="Thu, 26 Jun 2014 11:36:12 GMT" pgfnum="42468" text="var type = parsedUrl.query.type;"></outline>
														<outline created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127" text="var flprivate = utils.getBoolean (parsedUrl.query.flprivate);"></outline>
														<outline created="Mon, 04 Aug 2014 00:07:18 GMT" isComment="true" pgfnum="43127" text="var flNotWhitelisted = utils.getBoolean (parsedUrl.query.flNotWhitelisted);"></outline>
														<outline text="var flNotWhitelisted = false; //11/24/15 AM by DW"></outline>
														<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
															<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
																<outline text="errorResponse ({message: &quot;Can't save the file because the accessToken is not valid.&quot;});    "></outline>
																<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
																</outline>
															<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
																<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = getS3UsersPath (flprivate) + screenName + &quot;/&quot; + relpath;"></outline>
																<outline created="Wed, 23 Jul 2014 20:03:33 GMT" pgfnum="43045" text="var metadata = {whenLastUpdate: new Date ().toString ()};"></outline>
																<outline created="Tue, 22 Jul 2014 13:24:40 GMT" pgfnum="43026" text=""></outline>
																<outline created="Tue, 22 Jul 2014 13:24:40 GMT" isComment="true" pgfnum="43027" text="console.log (&quot;/publishfile: s3 path == &quot; + s3path); //7/22/14 by DW"></outline>
																<outline created="Mon, 04 Aug 2014 00:06:51 GMT" pgfnum="43120" text=""></outline>
																<outline text="store.newObject (s3path, body, type, getS3Acl (flprivate), function (error, data) {">
																	<outline created="Fri, 02 May 2014 22:20:54 GMT" pgfnum="40903" text="if (error) {">
																		<outline text="errorResponse (error);    "></outline>
																		<outline created="Fri, 02 May 2014 22:20:59 GMT" pgfnum="40905" text="}"></outline>
																		</outline>
																	<outline created="Fri, 02 May 2014 22:21:00 GMT" pgfnum="40906" text="else {">
																		<outline created="Wed, 23 Jul 2014 20:09:07 GMT" pgfnum="43047" text="metadata.url = store.getUrl (s3path); //&quot;http:/&quot; + s3path;"></outline>
																		<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (metadata);"></outline>
																		<outline created="Thu, 26 Jun 2014 16:30:30 GMT" pgfnum="42488" text="serverStats.ctFileSaves++;"></outline>
																		<outline text="statsChanged ();"></outline>
																		<outline text="if (!flprivate) { //12/15/14 by DW">
																			<outline text="checkLongpollsForUrl (metadata.url, body);"></outline>
																			<outline text="callbacks.callPublishCallbacks (relpath, body, type, screenName); //10/14/15 by DW"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline created="Fri, 02 May 2014 22:21:02 GMT" pgfnum="40907" text="}"></outline>
																		</outline>
																	<outline created="Fri, 02 May 2014 17:31:21 GMT" pgfnum="40890" text="}, metadata);"></outline>
																	</outline>
																<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
																</outline>
															<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
															</outline>
														<outline created="Wed, 14 May 2014 16:21:29 GMT" pgfnum="41594" text="break;"></outline>
														</outline>
													<outline created="Thu, 26 Jun 2014 11:33:59 GMT" pgfnum="42464" text="case &quot;/publishchatlogfile&quot;: //1/6/16 by DW">
														<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
														<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
														<outline created="Thu, 26 Jun 2014 11:36:12 GMT" pgfnum="42468" text="var relpath = parsedUrl.query.relpath;"></outline>
														<outline created="Thu, 26 Jun 2014 11:36:12 GMT" pgfnum="42468" text="var type = parsedUrl.query.type;"></outline>
														<outline text="var nameChatLog = parsedUrl.query.chatLog; "></outline>
														<outline text="var flprivate = false; //this endpoint is only used to publish, not for private storage"></outline>
														<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
															<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
																<outline text="errorResponse ({message: &quot;Can't publish the file because the accessToken is not valid.&quot;});    "></outline>
																<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
																</outline>
															<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
																<outline text="var theLog = findChatLog (nameChatLog);"></outline>
																<outline text="if (theLog.version == 1) { //special publish method to grandfather-in version 1 format chatlogs">
																	<outline text="publishChatLogFileV1 (nameChatLog, screenName, relpath, type, body, function (err, metadata) {">
																		<outline text="if (err) {">
																			<outline text="errorResponse ({message: err.message});    "></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="else {">
																			<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (metadata);"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="});"></outline>
																		</outline>
																	<outline text="}"></outline>
																	</outline>
																<outline text="else { //do exactly what we'd do if we weren't publishing for a chatlog">
																	<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = getS3UsersPath (flprivate) + screenName + &quot;/&quot; + relpath;"></outline>
																	<outline created="Wed, 23 Jul 2014 20:03:33 GMT" pgfnum="43045" text="var metadata = {whenLastUpdate: new Date ().toString ()};"></outline>
																	<outline text="store.newObject (s3path, body, type, getS3Acl (flprivate), function (error, data) {">
																		<outline created="Fri, 02 May 2014 22:20:54 GMT" pgfnum="40903" text="if (error) {">
																			<outline text="errorResponse (error);    "></outline>
																			<outline created="Fri, 02 May 2014 22:20:59 GMT" pgfnum="40905" text="}"></outline>
																			</outline>
																		<outline created="Fri, 02 May 2014 22:21:00 GMT" pgfnum="40906" text="else {">
																			<outline created="Wed, 23 Jul 2014 20:09:07 GMT" pgfnum="43047" text="metadata.url = store.getUrl (s3path); //&quot;http:/&quot; + s3path;"></outline>
																			<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (metadata);"></outline>
																			<outline created="Thu, 26 Jun 2014 16:30:30 GMT" pgfnum="42488" text="serverStats.ctFileSaves++;"></outline>
																			<outline text="statsChanged ();"></outline>
																			<outline text="if (!flprivate) { //12/15/14 by DW">
																				<outline text="checkLongpollsForUrl (metadata.url, body);"></outline>
																				<outline text="callbacks.callPublishCallbacks (relpath, body, type, screenName); //10/14/15 by DW"></outline>
																				<outline text="}"></outline>
																				</outline>
																			<outline created="Fri, 02 May 2014 22:21:02 GMT" pgfnum="40907" text="}"></outline>
																			</outline>
																		<outline created="Fri, 02 May 2014 17:31:21 GMT" pgfnum="40890" text="}, metadata);"></outline>
																		</outline>
																	<outline text="}"></outline>
																	</outline>
																<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
																</outline>
															<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
															</outline>
														<outline created="Wed, 14 May 2014 16:21:29 GMT" pgfnum="41594" text="break;"></outline>
														</outline>
													<outline text="case &quot;/chat&quot;: //8/25/15 by DW">
														<outline text="if (flChatEnabled) {">
															<outline text="var theQuery = parsedUrl.query; //4/28/16 by DW"></outline>
															<outline text="if (body.length &gt; 0) { ">
																<outline created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078" text="theQuery = qs.parse (body);"></outline>
																<outline text="console.log (&quot;/chat: the params came to us in the body, not on the URL.&quot;);"></outline>
																<outline text="}"></outline>
																</outline>
															<outline text=""></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = theQuery.oauth_token;"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = theQuery.oauth_token_secret;"></outline>
															<outline created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127" text="var flNotWhitelisted = utils.getBoolean (theQuery.flNotWhitelisted);"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var chatText = theQuery.text;"></outline>
															<outline text="var payload = theQuery.payload;"></outline>
															<outline text="var idMsgReplyingTo = theQuery.idMsgReplyingTo;"></outline>
															<outline text="var nameChatLog = theQuery.chatLog; //10/26/15 by DW"></outline>
															<outline text=""></outline>
															<outline text="flNotWhitelisted = false; //11/21/15 by DW"></outline>
															<outline text="if (idMsgReplyingTo !== undefined) { //it's a reply -- 11/21/15 by DW">
																<outline text="flNotWhitelisted = chatAnyoneCanReply (nameChatLog);"></outline>
																<outline isComment="true" text="var theLog = findChatLog (nameChatLog);"></outline>
																<outline isComment="true" text="if (utils.getBoolean (theLog.flAnyoneCanReply)) {">
																	<outline text="flNotWhitelisted = true;"></outline>
																	<outline text="}"></outline>
																	</outline>
																<outline text="}"></outline>
																</outline>
															<outline text=""></outline>
															<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
																<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
																	<outline text="errorResponse ({message: &quot;Can't post the chat message because the accessToken is not valid.&quot;});    "></outline>
																	<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
																	</outline>
																<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
																	<outline text="console.log (&quot;/chat: idMsgReplyingTo == &quot; + idMsgReplyingTo);"></outline>
																	<outline text="postChatMessage (screenName, nameChatLog, chatText, payload, idMsgReplyingTo, undefined, undefined, true, function (err, idMessage, itemToReturn) {">
																		<outline text="if (err) {">
																			<outline text="errorResponse ({message: err.message});    "></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="else {">
																			<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse ({id: idMessage, item: itemToReturn});"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="});"></outline>
																		</outline>
																	<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
																	</outline>
																<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline text="errorResponse ({message: chatNotEnabledError});    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="break;"></outline>
														</outline>
													<outline text="case &quot;/editchatmessage&quot;: //9/11/15 by DW">
														<outline text="if (flChatEnabled) {">
															<outline text="var theQuery = parsedUrl.query; //4/28/16 by DW"></outline>
															<outline text="if (body.length &gt; 0) { ">
																<outline created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078" text="theQuery = qs.parse (body);"></outline>
																<outline text="console.log (&quot;/editchatmessage: the params came to us in the body, not on the URL.&quot;);"></outline>
																<outline text="}"></outline>
																</outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = theQuery.oauth_token;"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = theQuery.oauth_token_secret;"></outline>
															<outline created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127" text="var flNotWhitelisted = utils.getBoolean (theQuery.flNotWhitelisted);"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var chatText = theQuery.text;"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var idMessage = theQuery.id;"></outline>
															<outline text="var payload = theQuery.payload;"></outline>
															<outline text="var nameChatLog = theQuery.chatLog; //10/26/15 by DW"></outline>
															<outline text=""></outline>
															<outline text="flNotWhitelisted = chatAnyoneCanReply (nameChatLog); //11/21/15 by DW -- we won't let you edit if you didn't create the message"></outline>
															<outline text=""></outline>
															<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
																<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
																	<outline text="errorResponse ({message: &quot;Can't post the chat message because the accessToken is not valid.&quot;});    "></outline>
																	<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
																	</outline>
																<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
																	<outline text="editChatMessage (screenName, nameChatLog, chatText, payload, idMessage, function (err, msg, itemToReturn) {">
																		<outline text="if (err) {">
																			<outline text="errorResponse ({message: err.message});    "></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="else {">
																			<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse ({msg: msg, item: itemToReturn});"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="});"></outline>
																		</outline>
																	<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
																	</outline>
																<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline text="errorResponse ({message: chatNotEnabledError});    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="break;"></outline>
														</outline>
													<outline text="case &quot;/setchatlogmetadata&quot;: //2/19/16 by DW">
														<outline text="if (flChatEnabled) {">
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
															<outline text="var jsontext = parsedUrl.query.metadata;"></outline>
															<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
																<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
																	<outline text="errorResponse ({message: &quot;Can't set the metadata message because the accessToken is not valid.&quot;});    "></outline>
																	<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
																	</outline>
																<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
																	<outline text="setChatLogMetadata (screenName, jsontext, function (err, data) {">
																		<outline text="if (err) {">
																			<outline text="errorResponse ({message: err.message});    "></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="else {">
																			<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse ({metadata: data});"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="});"></outline>
																		</outline>
																	<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
																	</outline>
																<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline text="errorResponse ({message: chatNotEnabledError});    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="break;"></outline>
														</outline>
													<outline text="case &quot;/publishchatloghomepage&quot;: //3/3/16 by DW">
														<outline text="if (flChatEnabled) {">
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
															<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
															<outline text="var nameChatLog = parsedUrl.query.chatLog; "></outline>
															<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
																<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
																	<outline text="errorResponse ({message: &quot;Can't publish the home page because the accessToken is not valid.&quot;});    "></outline>
																	<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
																	</outline>
																<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
																	<outline text="publishChatLogHomePage (nameChatLog, screenName, body, function (err, data) {">
																		<outline text="if (err) {">
																			<outline text="errorResponse ({message: err.message});    "></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="else {">
																			<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (data);"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="});"></outline>
																		</outline>
																	<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
																	</outline>
																<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline text="errorResponse ({message: chatNotEnabledError});    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="break;"></outline>
														</outline>
													<outline created="Thu, 01 May 2014 21:29:54 GMT" pgfnum="40828" text="default: ">
														<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/html&quot;});"></outline>
														<outline text="httpResponse.end (&quot;post received, pathname == &quot; + parsedUrl.pathname);"></outline>
														<outline created="Thu, 01 May 2014 21:29:56 GMT" pgfnum="40829" text="break;"></outline>
														</outline>
													<outline created="Thu, 01 May 2014 21:24:25 GMT" pgfnum="40827" text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="});"></outline>
											</outline>
										<outline text="});"></outline>
										</outline>
									<outline created="Thu, 01 May 2014 20:42:37 GMT" pgfnum="40806" text="break;"></outline>
									</outline>
								<outline created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807" text="case &quot;GET&quot;:">
									<outline text="switch (lowerpath) {">
										<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/version&quot;:">
											<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
											<outline text="httpResponse.end (myVersion);    "></outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/now&quot;:">
											<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
											<outline text="httpResponse.end (now.toString ());    "></outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Tue, 11 Feb 2014 15:52:21 GMT" pgfnum="37399" text="case &quot;/status&quot;: ">
											<outline created="Wed, 12 Feb 2014 16:07:40 GMT" pgfnum="37578" text="var myStatus = {">
												<outline created="Wed, 12 Feb 2014 16:07:53 GMT" pgfnum="37579" text="version: myVersion, "></outline>
												<outline created="Wed, 12 Feb 2014 16:08:01 GMT" pgfnum="37580" text="now: now.toUTCString (), "></outline>
												<outline created="Wed, 12 Feb 2014 16:08:04 GMT" pgfnum="37581" text="whenServerStart: serverStats.whenServerStart.toUTCString (), "></outline>
												<outline created="Wed, 12 Feb 2014 16:08:10 GMT" pgfnum="37582" text="hits: serverStats.ctHits, "></outline>
												<outline created="Wed, 12 Feb 2014 16:08:14 GMT" pgfnum="37583" text="hitsToday: serverStats.ctHitsToday,"></outline>
												<outline created="Sun, 27 Apr 2014 18:26:04 GMT" pgfnum="40529" text="tweets: serverStats.ctTweets,"></outline>
												<outline created="Sun, 27 Apr 2014 18:26:07 GMT" pgfnum="40530" text="tweetsToday: serverStats.ctTweetsToday,"></outline>
												<outline created="Thu, 26 Jun 2014 16:31:18 GMT" pgfnum="42489" text="ctFileSaves: serverStats.ctFileSaves"></outline>
												<outline created="Wed, 12 Feb 2014 16:08:19 GMT" pgfnum="37584" text="};"></outline>
												</outline>
											<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
											<outline text="httpResponse.end (utils.jsonStringify (myStatus));    "></outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/connect&quot;: ">
											<outline text="var twitter = new twitterAPI ({">
												<outline text="consumerKey: twitterConsumerKey,"></outline>
												<outline text="consumerSecret: twitterConsumerSecret,"></outline>
												<outline text="callback: &quot;http://&quot; + myDomain + &quot;/callbackFromTwitter?redirectUrl=&quot; + encodeURIComponent (parsedUrl.query.redirect_url)"></outline>
												<outline text="});"></outline>
												</outline>
											<outline text="twitter.getRequestToken (function (error, requestToken, requestTokenSecret, results) {">
												<outline text="if (error) {">
													<outline isComment="true" text="console.log (&quot;twitter.getRequestToken: error == &quot; + error.message);"></outline>
													<outline text="errorResponse (error); //6/30/14 by DW"></outline>
													<outline created="Mon, 21 Apr 2014 13:53:42 GMT" pgfnum="40310" text="}"></outline>
													</outline>
												<outline text="else {">
													<outline created="Mon, 21 Apr 2014 16:43:56 GMT" pgfnum="40371" text="saveRequestToken (requestToken, requestTokenSecret);"></outline>
													<outline created="Mon, 21 Apr 2014 16:16:45 GMT" pgfnum="40357" text=""></outline>
													<outline created="Mon, 21 Apr 2014 14:18:10 GMT" pgfnum="40322" text="var twitterOauthUrl = &quot;https://twitter.com/oauth/authenticate?oauth_token=&quot; + requestToken;"></outline>
													<outline text="if (flForceTwitterLogin) { //2/19/16 by DW">
														<outline text="twitterOauthUrl += &quot;&amp;force_login=true&quot;; //https://dev.twitter.com/oauth/reference/get/oauth/authenticate"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text=""></outline>
													<outline text="httpResponse.writeHead (302, {&quot;location&quot;: twitterOauthUrl});"></outline>
													<outline text="httpResponse.end (&quot;302 REDIRECT&quot;);    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Mon, 21 Apr 2014 14:25:08 GMT" pgfnum="40323" text="case &quot;/callbackfromtwitter&quot;:">
											<outline created="Mon, 21 Apr 2014 15:14:29 GMT" isComment="true" pgfnum="40348" text="we're being called back from twitter -- like this: ">
												<outline created="Mon, 21 Apr 2014 14:25:54 GMT" isComment="true" pgfnum="40325" text="http://fargotwitter.herokuapp.com/callbackFromTwitter?oauth_token=ohZDtFHu8T2siB59GbPCwhJTbS1sCOjv2EBvZJVvk&amp;oauth_verifier=Ne8EUrsuIPMfbta5PnaAvIv61sgoawlODlO8Uzob1kY"></outline>
												<outline text="http://fargotwitter.herokuapp.com/callbackFromTwitter?redirectUrl=portnoy&amp;oauth_token=LyndS2n9zMCIxwMszwWapgJSm6N9bl6tT1CXJ9UlsE&amp;oauth_verifier=2QWyUZoHO0Bw0ck0DHzSYEFZmgbbrLSoVDjbwtZ5yg"></outline>
												</outline>
											<outline created="Mon, 21 Apr 2014 16:29:14 GMT" pgfnum="40358" text=""></outline>
											<outline text="var twitter = new twitterAPI ({">
												<outline text="consumerKey: twitterConsumerKey,"></outline>
												<outline text="consumerSecret: twitterConsumerSecret,"></outline>
												<outline created="Mon, 21 Apr 2014 16:29:45 GMT" pgfnum="40363" text="callback: undefined"></outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Mon, 21 Apr 2014 16:46:02 GMT" pgfnum="40372" text=""></outline>
											<outline created="Mon, 21 Apr 2014 16:46:03 GMT" pgfnum="40373" text="var myRequestToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 16:46:14 GMT" pgfnum="40374" text="var myTokenSecret = findRequestToken (myRequestToken, true);"></outline>
											<outline created="Mon, 21 Apr 2014 16:55:13 GMT" pgfnum="40376" text=""></outline>
											<outline created="Mon, 21 Apr 2014 13:55:41 GMT" isComment="true" pgfnum="40316" text="console.log (&quot;myRequestToken == &quot; + myRequestToken + &quot;, myTokenSecret == &quot; + myTokenSecret + &quot;.&quot;);"></outline>
											<outline created="Mon, 21 Apr 2014 16:29:15 GMT" pgfnum="40362" text=""></outline>
											<outline text="twitter.getAccessToken (myRequestToken, myTokenSecret, parsedUrl.query.oauth_verifier, function (error, accessToken, accessTokenSecret, results) {">
												<outline text="if (error) {">
													<outline text="console.log (&quot;twitter.getAccessToken: error == &quot; + error.message);"></outline>
													<outline created="Mon, 21 Apr 2014 15:12:29 GMT" pgfnum="40347" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 15:12:16 GMT" pgfnum="40346" text="else {">
													<outline created="Mon, 21 Apr 2014 20:11:35 GMT" pgfnum="40386" text="var url = parsedUrl.query.redirectUrl + &quot;?oauth_token=&quot; + encodeURIComponent (accessToken) + &quot;&amp;oauth_token_secret=&quot; + encodeURIComponent (accessTokenSecret) + &quot;&amp;user_id=&quot; + encodeURIComponent (results.user_id) + &quot;&amp;screen_name=&quot; + encodeURIComponent (results.screen_name);"></outline>
													<outline created="Mon, 21 Apr 2014 20:13:19 GMT" pgfnum="40387" text=""></outline>
													<outline text="httpResponse.writeHead (302, {&quot;location&quot;: url});"></outline>
													<outline text="httpResponse.end (&quot;302 REDIRECT&quot;);    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Mon, 21 Apr 2014 23:07:48 GMT" pgfnum="40404" text="case &quot;/getmytweets&quot;:">
											<outline created="Tue, 22 Apr 2014 02:15:16 GMT" pgfnum="40437" text="getTwitterTimeline (&quot;user&quot;);"></outline>
											<outline created="Mon, 21 Apr 2014 23:07:54 GMT" pgfnum="40405" text="break;"></outline>
											</outline>
										<outline created="Tue, 22 Apr 2014 02:12:48 GMT" pgfnum="40429" text="case &quot;/getmymentions&quot;:">
											<outline created="Tue, 22 Apr 2014 02:15:16 GMT" pgfnum="40437" text="getTwitterTimeline (&quot;mentions&quot;);"></outline>
											<outline created="Tue, 22 Apr 2014 02:12:55 GMT" pgfnum="40430" text="break;"></outline>
											</outline>
										<outline created="Tue, 22 Apr 2014 02:26:28 GMT" pgfnum="40441" text="case &quot;/tweet&quot;:">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var twitterStatus = parsedUrl.query.status;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var inReplyToId = parsedUrl.query.in_reply_to_status_id;"></outline>
											<outline created="Tue, 22 Apr 2014 02:02:04 GMT" pgfnum="40422" text="var params = {status: twitterStatus, in_reply_to_status_id: inReplyToId};"></outline>
											<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
											<outline text=""></outline>
											<outline text="if (tweetContainsBlockedTag (twitterStatus)) { //11/9/14 by DW">
												<outline created="Mon, 21 Apr 2014 23:13:06 GMT" isComment="true" pgfnum="40412" text="console.log (&quot;The tweet contains a blocked tag: &quot; + twitterStatus);"></outline>
												<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
												<outline text="httpResponse.end (&quot;Tweet contains a blocked tag.&quot;);    "></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="twitter.statuses (&quot;update&quot;, params, accessToken, accessTokenSecret, function (error, data, response) {">
													<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (error) {">
														<outline created="Mon, 21 Apr 2014 23:13:06 GMT" isComment="true" pgfnum="40412" text="console.log (&quot;There was an error on the tweet: &quot; + utils.jsonStringify (error));"></outline>
														<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
														<outline text="httpResponse.end (utils.jsonStringify (error));    "></outline>
														<outline created="Wed, 30 Apr 2014 01:24:51 GMT" pgfnum="40677" text="serverStats.ctTweetErrors++;"></outline>
														<outline text="statsChanged ();"></outline>
														<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
														</outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
														<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
														<outline text="addOurDataToReturnObject (data);"></outline>
														<outline text="httpResponse.end (utils.jsonStringify (data));    "></outline>
														<outline created="Sun, 27 Apr 2014 13:51:30 GMT" pgfnum="40519" text="addTweetToLog (data, startTime);"></outline>
														<outline created="Wed, 02 Jul 2014 22:58:20 GMT" pgfnum="42667" text="saveTweet (data); //1/15/15 by DW"></outline>
														<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
														</outline>
													<outline created="Mon, 21 Apr 2014 23:12:34 GMT" pgfnum="40407" text="});"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline created="Tue, 22 Apr 2014 02:29:25 GMT" pgfnum="40443" text=""></outline>
											<outline created="Tue, 22 Apr 2014 02:26:34 GMT" pgfnum="40442" text="break;"></outline>
											</outline>
										<outline created="Fri, 20 Jun 2014 17:54:12 GMT" pgfnum="42277" text="case &quot;/getembedcode&quot;: //6/20/14 by DW">
											<outline created="Fri, 20 Jun 2014 23:08:14 GMT" isComment="true" pgfnum="42337" text="https://dev.twitter.com/docs/api/1/get/statuses/oembed"></outline>
											<outline created="Fri, 20 Jun 2014 23:08:17 GMT" pgfnum="42338" text=""></outline>
											<outline created="Fri, 20 Jun 2014 18:09:00 GMT" pgfnum="42291" text="var url = &quot;https://api.twitter.com/1/statuses/oembed.json?id=&quot; + parsedUrl.query.id;"></outline>
											<outline created="Fri, 20 Jun 2014 23:01:58 GMT" pgfnum="42325" text=""></outline>
											<outline created="Fri, 20 Jun 2014 23:01:58 GMT" pgfnum="42326" text="function addParam (name) {">
												<outline created="Fri, 20 Jun 2014 23:02:46 GMT" pgfnum="42333" text="if (parsedUrl.query [name] != undefined) {">
													<outline created="Fri, 20 Jun 2014 23:03:08 GMT" pgfnum="42336" text="url += &quot;&amp;&quot; + name + &quot;=&quot; + parsedUrl.query [name];"></outline>
													<outline created="Fri, 20 Jun 2014 23:02:57 GMT" pgfnum="42335" text="}"></outline>
													</outline>
												<outline created="Fri, 20 Jun 2014 23:02:34 GMT" pgfnum="42330" text="}"></outline>
												</outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;maxwidth&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;hide_media&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;hide_thread&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;omit_script&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;align&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;related&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:02:35 GMT" pgfnum="42331" text="addParam (&quot;lang&quot;);"></outline>
											<outline created="Fri, 20 Jun 2014 23:01:59 GMT" pgfnum="42329" text=""></outline>
											<outline text="request (url, function (error, response, body) {">
												<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
													<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (body);    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline created="Fri, 20 Jun 2014 18:10:50 GMT" pgfnum="42293" text="else {">
													<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (utils.jsonStringify (error));    "></outline>
													<outline created="Fri, 20 Jun 2014 18:10:52 GMT" pgfnum="42294" text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Fri, 20 Jun 2014 17:54:25 GMT" pgfnum="42278" text="break;"></outline>
											</outline>
										<outline created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364" text="case &quot;/getuserinfo&quot;: //6/21/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var screenName = parsedUrl.query.screen_name;"></outline>
											<outline created="Tue, 22 Apr 2014 02:02:04 GMT" pgfnum="40422" text="var params = {screen_name: screenName};"></outline>
											<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
											<outline text="twitter.users (&quot;show&quot;, params, accessToken, accessTokenSecret, function (error, data, response) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (error) {">
													<outline text="errorResponse (error);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse (data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:34 GMT" pgfnum="40407" text="});"></outline>
												</outline>
											<outline created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365" text="break;"></outline>
											</outline>
										<outline created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364" text="case &quot;/gettweetinfo&quot;: //6/25/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Tue, 22 Apr 2014 02:02:04 GMT" pgfnum="40422" text="var params = {id: parsedUrl.query.id};"></outline>
											<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
											<outline text="twitter.statuses (&quot;show&quot;, params, accessToken, accessTokenSecret, function (error, data, response) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (error) {">
													<outline text="errorResponse (error);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse (data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:34 GMT" pgfnum="40407" text="});"></outline>
												</outline>
											<outline created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365" text="break;"></outline>
											</outline>
										<outline created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364" text="case &quot;/retweet&quot;: //7/3/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Tue, 22 Apr 2014 02:02:04 GMT" pgfnum="40422" text="var params = {id: parsedUrl.query.id};"></outline>
											<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
											<outline text="twitter.statuses (&quot;retweet&quot;, params, accessToken, accessTokenSecret, function (error, data, response) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (error) {">
													<outline text="errorResponse (error);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse (data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:34 GMT" pgfnum="40407" text="});"></outline>
												</outline>
											<outline created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365" text="break;"></outline>
											</outline>
										<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/getmyscreenname&quot;: //7/9/14 by DW -- mostly for testing the new cached getScreenName function">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse ({screenName: screenName});"></outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Tue, 22 Jul 2014 18:44:25 GMT" pgfnum="43030" text="case &quot;/getfile&quot;: //8/9/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Thu, 26 Jun 2014 11:36:12 GMT" pgfnum="42468" text="var relpath = parsedUrl.query.relpath;"></outline>
											<outline created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127" text="var flprivate = utils.getBoolean (parsedUrl.query.flprivate);"></outline>
											<outline created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127" text="var flIncludeBody = utils.getBoolean (parsedUrl.query.flIncludeBody);"></outline>
											<outline created="Mon, 04 Aug 2014 00:07:18 GMT" isComment="true" pgfnum="43127" text="var flNotWhitelisted = utils.getBoolean (parsedUrl.query.flNotWhitelisted);"></outline>
											<outline text="var flNotWhitelisted = false; //11/24/15 AM by DW"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
													<outline text="errorResponse ({message: &quot;Can't get the file because the accessToken is not valid.&quot;});    "></outline>
													<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
													</outline>
												<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
													<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = getS3UsersPath (flprivate) + screenName + &quot;/&quot; + relpath;"></outline>
													<outline created="Tue, 22 Jul 2014 13:24:40 GMT" isComment="true" pgfnum="43027" text="console.log (&quot;/getfile: s3 path == &quot; + s3path); "></outline>
													<outline text="store.getObject (s3path, function (error, data) {">
														<outline text="if (error) {">
															<outline text="errorResponse (error);    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline created="Sat, 09 Aug 2014 20:09:15 GMT" pgfnum="43181" text="if (flIncludeBody) {">
																<outline created="Tue, 22 Jul 2014 23:02:02 GMT" pgfnum="43033" text="data.filedata = data.Body.toString (); "></outline>
																<outline created="Sat, 09 Aug 2014 20:09:18 GMT" pgfnum="43182" text="}"></outline>
																</outline>
															<outline created="Wed, 23 Jul 2014 19:07:42 GMT" pgfnum="43044" text="delete data.Body;"></outline>
															<outline text="dataResponse (data);"></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="});"></outline>
														</outline>
													<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
												</outline>
											<outline created="Tue, 22 Jul 2014 18:44:32 GMT" pgfnum="43031" text="break;"></outline>
											</outline>
										<outline created="Thu, 31 Jul 2014 16:34:56 GMT" pgfnum="43058" text="case &quot;/derefurl&quot;: //7/31/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var shortUrl = parsedUrl.query.url;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
													<outline text="errorResponse ({message: &quot;Can't get the deref the URL because the accessToken is not valid.&quot;});    "></outline>
													<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
													</outline>
												<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
													<outline created="Thu, 31 Jul 2014 16:39:00 GMT" pgfnum="43066" text="var theRequest = {">
														<outline created="Thu, 31 Jul 2014 16:39:06 GMT" pgfnum="43067" text="method: &quot;HEAD&quot;, "></outline>
														<outline created="Thu, 31 Jul 2014 16:39:22 GMT" pgfnum="43070" text="url: shortUrl, "></outline>
														<outline created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069" text="followAllRedirects: true"></outline>
														<outline created="Thu, 31 Jul 2014 16:39:13 GMT" pgfnum="43068" text="};"></outline>
														</outline>
													<outline text="request (theRequest, function (error, response) {">
														<outline created="Thu, 31 Jul 2014 16:39:35 GMT" pgfnum="43071" text="if (error) {">
															<outline text="errorResponse ({message: &quot;Can't get the deref the URL because there was an error making the HTTP request.&quot;});    "></outline>
															<outline created="Thu, 31 Jul 2014 16:39:38 GMT" pgfnum="43072" text="}"></outline>
															</outline>
														<outline created="Thu, 31 Jul 2014 16:39:39 GMT" pgfnum="43073" text="else {">
															<outline created="Thu, 31 Jul 2014 16:40:49 GMT" pgfnum="43075" text="var theResponse = {">
																<outline created="Thu, 31 Jul 2014 16:41:19 GMT" pgfnum="43078" text="url: shortUrl,"></outline>
																<outline created="Thu, 31 Jul 2014 16:41:06 GMT" pgfnum="43077" text="longurl: response.request.href"></outline>
																<outline created="Thu, 31 Jul 2014 16:40:55 GMT" pgfnum="43076" text="};"></outline>
																</outline>
															<outline text="dataResponse (theResponse);"></outline>
															<outline created="Thu, 31 Jul 2014 16:39:41 GMT" pgfnum="43074" text="}"></outline>
															</outline>
														<outline text="});"></outline>
														</outline>
													<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline created="Thu, 31 Jul 2014 17:01:59 GMT" pgfnum="43084" text="break;"></outline>
											</outline>
										<outline created="Thu, 31 Jul 2014 16:34:56 GMT" pgfnum="43058" text="case &quot;/shortenurl&quot;: //8/25/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var longUrl = parsedUrl.query.url;"></outline>
											<outline text="var apiUrl = &quot;http://api.bitly.com/v3/shorten&quot;;"></outline>
											<outline text="var apiKey = bitlyApiKey, username = bitlyApiUsername; //1/17/15 by DW -- removed hard-coded constants"></outline>
											<outline text="if ((apiKey == undefined) || (username == undefined)) {">
												<outline text="errorResponse ({message: &quot;Can't shorten the URL because the server is not configured to shorten URLs.&quot;});    "></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline created="Wed, 23 Apr 2014 17:16:42 GMT" pgfnum="40479" text="function encode (s) {">
													<outline created="Fri, 21 Jun 2013 15:07:18 GMT" pgfnum="26894" text="return (encodeURIComponent (s));"></outline>
													<outline created="Wed, 23 Apr 2014 17:16:46 GMT" pgfnum="40480" text="}"></outline>
													</outline>
												<outline text="apiUrl += &quot;?login=&quot; + encode (username)"></outline>
												<outline text="apiUrl += &quot;&amp;apiKey=&quot; + encode (apiKey)"></outline>
												<outline text="apiUrl += &quot;&amp;longUrl=&quot; + encode (longUrl)"></outline>
												<outline text="apiUrl += &quot;&amp;format=json&quot;"></outline>
												<outline text="request (apiUrl, function (error, response, body) {">
													<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
														<outline created="Tue, 26 Aug 2014 01:36:09 GMT" pgfnum="43205" text="var jstruct = JSON.parse (body);"></outline>
														<outline created="Tue, 26 Aug 2014 01:41:00 GMT" pgfnum="43211" text="if (jstruct.status_code != 200) {">
															<outline text="errorResponse ({message: &quot;Can't shorten the URL because bitly returned an error code of &quot; + jstruct.status_code + &quot;.&quot;});    "></outline>
															<outline created="Tue, 26 Aug 2014 01:41:22 GMT" pgfnum="43214" text="}"></outline>
															</outline>
														<outline created="Tue, 26 Aug 2014 01:41:23 GMT" pgfnum="43215" text="else {">
															<outline created="Tue, 26 Aug 2014 01:37:36 GMT" pgfnum="43206" text="var theResponse = {">
																<outline created="Tue, 26 Aug 2014 01:37:50 GMT" pgfnum="43208" text="shortUrl: jstruct.data.url,"></outline>
																<outline created="Tue, 26 Aug 2014 01:37:58 GMT" pgfnum="43209" text="longUrl: longUrl"></outline>
																<outline created="Tue, 26 Aug 2014 01:37:43 GMT" pgfnum="43207" text="};"></outline>
																</outline>
															<outline created="Tue, 26 Aug 2014 01:29:30 GMT" isComment="true" pgfnum="43201" text="console.log (&quot;/shortenurl: bitly returned == &quot; + body)"></outline>
															<outline text="dataResponse (theResponse);"></outline>
															<outline created="Tue, 26 Aug 2014 01:41:25 GMT" pgfnum="43216" text="}"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline created="Tue, 26 Aug 2014 01:33:03 GMT" pgfnum="43203" text="else { ">
														<outline text="errorResponse ({message: &quot;Can't shorten the URL because there was an error making the HTTP request.&quot;});    "></outline>
														<outline created="Tue, 26 Aug 2014 01:33:06 GMT" pgfnum="43204" text="}"></outline>
														</outline>
													<outline text="});"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline created="Thu, 31 Jul 2014 17:01:59 GMT" pgfnum="43084" text="break;"></outline>
											</outline>
										<outline created="Tue, 16 Sep 2014 18:39:30 GMT" pgfnum="43265" text="case &quot;/getrecentposts&quot;: //9/16/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Thu, 26 Jun 2014 11:36:12 GMT" pgfnum="42468" text="var ctposts = 25; //parsedUrl.query.ctposts;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
													<outline text="errorResponse ({message: &quot;Can't get recent posts because the accessToken is not valid.&quot;});    "></outline>
													<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
													</outline>
												<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
													<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = getS3UsersPath (true) + screenName + &quot;/&quot;;"></outline>
													<outline created="Tue, 22 Jul 2014 13:24:40 GMT" isComment="true" pgfnum="43027" text="console.log (&quot;/getrecentposts: s3 path == &quot; + s3path); "></outline>
													<outline text="store.getObject (s3path + &quot;postsData.json&quot;, function (error, data) {">
														<outline text="if (error) {">
															<outline text="errorResponse (error);    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline created="Tue, 16 Sep 2014 19:07:09 GMT" isComment="true" pgfnum="43291" text="console.log (&quot;/getrecentposts: data.Body == &quot; + data.Body.toString ());"></outline>
															<outline created="Tue, 16 Sep 2014 18:43:49 GMT" pgfnum="43275" text="var postsData = JSON.parse (data.Body.toString ());"></outline>
															<outline created="Tue, 16 Sep 2014 18:44:09 GMT" pgfnum="43278" text="var lastpostnum = postsData.nextfilenum - 1;"></outline>
															<outline created="Tue, 16 Sep 2014 19:07:09 GMT" isComment="true" pgfnum="43291" text="console.log (&quot;/getrecentposts: lastpostnum == &quot; + lastpostnum);"></outline>
															<outline created="Tue, 16 Sep 2014 18:45:12 GMT" pgfnum="43279" text="var postsArray = [], ct = 0;"></outline>
															<outline created="Tue, 16 Sep 2014 18:45:19 GMT" pgfnum="43280" text="function getOnePost (postnum) {">
																<outline created="Tue, 16 Sep 2014 19:30:18 GMT" pgfnum="43297" text="var filepath = s3path + &quot;posts/&quot; + utils.padWithZeros (postnum, 7) + &quot;.json&quot;;"></outline>
																<outline created="Tue, 16 Sep 2014 19:30:23 GMT" pgfnum="43298" text=""></outline>
																<outline created="Tue, 16 Sep 2014 19:07:09 GMT" isComment="true" pgfnum="43291" text="console.log (&quot;/getrecentposts: filepath == &quot; + filepath);"></outline>
																<outline created="Tue, 16 Sep 2014 19:30:26 GMT" pgfnum="43301" text=""></outline>
																<outline created="Tue, 16 Sep 2014 18:45:57 GMT" pgfnum="43283" text="store.getObject (filepath, function (error, data) {">
																	<outline text="if (!error) {">
																		<outline created="Tue, 16 Sep 2014 19:13:27 GMT" pgfnum="43292" text="var jstruct = JSON.parse (data.Body.toString ());"></outline>
																		<outline created="Tue, 16 Sep 2014 19:13:32 GMT" pgfnum="43293" text=""></outline>
																		<outline created="Tue, 16 Sep 2014 19:07:09 GMT" isComment="true" pgfnum="43291" text="console.log (&quot;/getrecentposts: postnum == &quot; + postnum + &quot;, jstruct == &quot; + utils.jsonStringify (jstruct));"></outline>
																		<outline created="Tue, 16 Sep 2014 19:13:33 GMT" pgfnum="43296" text=""></outline>
																		<outline created="Tue, 16 Sep 2014 18:47:41 GMT" pgfnum="43285" text="postsArray [postsArray.length] = jstruct;"></outline>
																		<outline created="Tue, 16 Sep 2014 18:48:20 GMT" pgfnum="43286" text="if ((++ct &lt; ctposts) &amp;&amp; (postnum &gt; 0)) {">
																			<outline created="Tue, 16 Sep 2014 18:48:53 GMT" pgfnum="43288" text="getOnePost (postnum - 1);"></outline>
																			<outline created="Tue, 16 Sep 2014 18:48:27 GMT" pgfnum="43287" text="}"></outline>
																			</outline>
																		<outline created="Tue, 16 Sep 2014 18:49:07 GMT" pgfnum="43289" text="else {">
																			<outline text="dataResponse (postsArray);"></outline>
																			<outline created="Tue, 16 Sep 2014 18:49:09 GMT" pgfnum="43290" text="}"></outline>
																			</outline>
																		<outline text="}"></outline>
																		</outline>
																	<outline created="Tue, 16 Sep 2014 18:46:51 GMT" pgfnum="43284" text="});"></outline>
																	</outline>
																<outline created="Tue, 16 Sep 2014 18:45:33 GMT" pgfnum="43281" text="}"></outline>
																</outline>
															<outline created="Tue, 16 Sep 2014 18:45:35 GMT" pgfnum="43282" text="getOnePost (lastpostnum);"></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="});"></outline>
														</outline>
													<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline created="Tue, 16 Sep 2014 18:39:42 GMT" pgfnum="43270" text="break;"></outline>
											</outline>
										<outline created="Tue, 11 Feb 2014 15:52:21 GMT" pgfnum="37399" text="case &quot;/iswhitelisted&quot;: //11/18/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var screenName = parsedUrl.query.screen_name;"></outline>
											<outline isComment="true" text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
											<outline isComment="true" text="httpResponse.end (utils.jsonStringify (isWhitelistedUser (screenName)));    "></outline>
											<outline text="doHttpReturn (200, &quot;text/plain&quot;, utils.jsonStringify (isWhitelistedUser (screenName)));"></outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Tue, 06 May 2014 19:51:53 GMT" pgfnum="41199" text="case &quot;/configuration&quot;:">
											<outline created="Tue, 22 Apr 2014 02:02:04 GMT" pgfnum="40422" text="var params = {};"></outline>
											<outline created="Mon, 21 Apr 2014 23:21:52 GMT" pgfnum="40418" text="var twitter = newTwitter ();"></outline>
											<outline created="Tue, 06 May 2014 19:53:05 GMT" pgfnum="41204" text="twitter.help (&quot;configuration&quot;, params, accessToken, accessTokenSecret, function (error, data, response) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (error) {">
													<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (error.message);    "></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="addOurDataToReturnObject (data);"></outline>
													<outline text="httpResponse.end (utils.jsonStringify (data));    "></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:34 GMT" pgfnum="40407" text="});"></outline>
												</outline>
											<outline created="Tue, 06 May 2014 19:52:04 GMT" pgfnum="41203" text="break;"></outline>
											</outline>
										<outline text="case &quot;/returnwhenready&quot;: //12/15/14 by DW -- long polling">
											<outline text="pushLongpoll (parsedUrl.query.url, httpResponse, clientIp)"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/stats&quot;: //12/16/14 by DW">
											<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
											<outline text="httpResponse.end (utils.jsonStringify (serverStats));    "></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/getfilelist&quot;: //12/21/14 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127" text="var flprivate = utils.getBoolean (parsedUrl.query.flprivate);"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
													<outline text="errorResponse ({message: &quot;Can't get the file list because the accessToken is not valid.&quot;});    "></outline>
													<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
													</outline>
												<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
													<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = getS3UsersPath (flprivate) + screenName + &quot;/&quot;;"></outline>
													<outline created="Tue, 22 Jul 2014 13:24:40 GMT" isComment="true" pgfnum="43027" text="console.log (&quot;/getfilelist: s3 path == &quot; + s3path); "></outline>
													<outline text="getUserFileList (s3path, function (error, theList) {">
														<outline text="if (error) {">
															<outline text="errorResponse (error);    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else { ">
															<outline text="var returnedList = new Array (); //return a processed array -- 3/5/15 by DW"></outline>
															<outline text="for (var i = 0; i &lt; theList.length; i++) {">
																<outline text="var obj = new Object (), s3obj = theList [i];"></outline>
																<outline text="//set obj.path -- start copying into the object path when we pass the user's screen name">
																	<outline text="var splitlist = s3obj.Key.split (&quot;/&quot;), flcopy = false, objectpath = &quot;&quot;;"></outline>
																	<outline text="for (var j = 0; j &lt; splitlist.length; j++) {">
																		<outline text="if (flcopy) {">
																			<outline text="if (objectpath.length &gt; 0) {">
																				<outline text="objectpath += &quot;/&quot;;"></outline>
																				<outline text="}"></outline>
																				</outline>
																			<outline text="objectpath += splitlist [j];"></outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="else {">
																			<outline text="if (splitlist [j] == screenName) {">
																				<outline text="flcopy = true;"></outline>
																				<outline text="}"></outline>
																				</outline>
																			<outline text="}"></outline>
																			</outline>
																		<outline text="}"></outline>
																		</outline>
																	<outline text="obj.path = objectpath;"></outline>
																	</outline>
																<outline isComment="true" text=""></outline>
																<outline isComment="true" text="obj.key = s3obj.Key; //delete this later"></outline>
																<outline isComment="true" text="obj.s3path = s3path; //ditto"></outline>
																<outline isComment="true" text=""></outline>
																<outline isComment="true" text=""></outline>
																<outline text="obj.whenLastChange = s3obj.LastModified;"></outline>
																<outline text="obj.ctChars = s3obj.Size;"></outline>
																<outline text="returnedList [i] = obj;"></outline>
																<outline text="}"></outline>
																</outline>
															<outline text="dataResponse (returnedList);"></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="});"></outline>
														</outline>
													<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline text="break; "></outline>
											</outline>
										<outline text="case &quot;/api.js&quot;: //1/20/15 by DW">
											<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/javascript&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
											<outline text="fs.readFile (&quot;api.js&quot;, function (err, data) {">
												<outline text="if (err) {">
													<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (err.message);    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/javascript&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (data.toString ());    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/addcomment&quot;: //2/21/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var snAuthor = parsedUrl.query.author;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var idPost = parsedUrl.query.idpost;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var urlOpmlFile = parsedUrl.query.urlopmlfile;"></outline>
											<outline isComment="true" text="var flNotWhitelisted = true; //2/23/15 by DW"></outline>
											<outline text="var flNotWhitelisted = false; //11/24/15 AM by DW"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (snCommenter) {">
												<outline text="addComment (snCommenter, snAuthor, idPost, urlOpmlFile, function (error, jstruct) {">
													<outline text="if (jstruct !== undefined) {">
														<outline text="dataResponse (jstruct);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="errorResponse (error);    "></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="});"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/getcomments&quot;: //2/21/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var snAuthor = parsedUrl.query.author;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var idPost = parsedUrl.query.idpost;"></outline>
											<outline isComment="true" text="var flNotWhitelisted = true; //2/23/15 by DW"></outline>
											<outline text="var flNotWhitelisted = false; //11/24/15 AM by DW"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (snReader) {">
												<outline text="getComments (snAuthor, idPost, function (error, jstruct) {">
													<outline text="if (jstruct !== undefined) {">
														<outline text="dataResponse (jstruct);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="console.log (&quot;/getcomments: error == &quot;, JSON.stringify (error, undefined, 4));"></outline>
														<outline text="if (error.statusCode == 404) {">
															<outline text="dataResponse (new Array ());"></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="else {">
															<outline text="errorResponse (error);    "></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="});"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/opmlcomments&quot;: //2/23/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var username = parsedUrl.query.user, returnedstring = &quot;&quot;;"></outline>
											<outline created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633" text="var s3path = &quot;/liveblog.co/users/&quot; + username + &quot;/comments/&quot;;"></outline>
											<outline created="Thu, 15 May 2014 15:40:17 GMT" isComment="true" pgfnum="41633" text="var s3path = getS3UsersPath (false) + username + &quot;/comments/&quot;;"></outline>
											<outline text="console.log (&quot;/opmlcomments: s3path == &quot; + s3path);"></outline>
											<outline text="getUserCommentsOpml (s3path, function (opmltext) {">
												<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/xml&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
												<outline text="httpResponse.end (opmltext);    "></outline>
												<outline text="});"></outline>
												</outline>
											<outline text=""></outline>
											<outline text=""></outline>
											<outline created="Wed, 19 Mar 2014 19:59:25 GMT" isComment="true" pgfnum="39572" text="store.listObjects (s3path, function (obj) { //read user's list files">
												<outline created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728" text="if (obj.flLastObject != undefined) {">
													<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/javascript&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (returnedstring);    "></outline>
													<outline created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731" text="}"></outline>
													</outline>
												<outline created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732" text="else {">
													<outline text="if (obj.Size &gt; 0) { //it's a file">
														<outline text="var filepath = obj.s3path;"></outline>
														<outline text="console.log (&quot;/opmlcomments: filepath == &quot; + filepath);"></outline>
														<outline text="returnedstring += filepath + &quot;\n&quot;;"></outline>
														<outline text="}"></outline>
														</outline>
													<outline created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733" text="}"></outline>
													</outline>
												<outline created="Wed, 19 Mar 2014 19:59:50 GMT" pgfnum="39573" text="});"></outline>
												</outline>
											<outline text=""></outline>
											<outline text=""></outline>
											<outline isComment="true" text="function getCommentsOpml (theComments) {">
												<outline isComment="true" text="Changes">
													<outline text="2/22/15; 1:55:28 PM by DW">
														<outline text="[">
															<outline text="{">
																<outline text="&quot;commenter&quot;: &quot;davewiner&quot;,">
																	<outline text="&quot;ctUpdates&quot;: 3,"></outline>
																	<outline text="&quot;whenCreated&quot;: &quot;2015-02-22T16:18:20.226Z&quot;,"></outline>
																	<outline text="&quot;whenUpdated&quot;: &quot;2015-02-22T18:43:13.138Z&quot;,"></outline>
																	<outline text="&quot;urlOpmlFile&quot;: &quot;http://liveblog.co/users/davewiner/comments/davewiner/1424614687000.opml&quot;"></outline>
																	<outline text="}"></outline>
																	</outline>
																</outline>
															<outline text="]"></outline>
															</outline>
														</outline>
													</outline>
												<outline text="var opmltext = &quot;&quot;, indentlevel = 0;"></outline>
												<outline text="function add (s) {">
													<outline text="opmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\r\n&quot;;"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"></outline>
												<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"></outline>
												<outline text="//add head">
													<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"></outline>
													<outline text="add (&quot;&lt;title&gt;&quot; + encodeXml (&quot;Comments&quot;) + &quot;&lt;/title&gt;&quot;);"></outline>
													<outline isComment="true" text="if (ownerName !== undefined) {">
														<outline text="add (&quot;&lt;ownerName&gt;&quot; + encodeXml (ownerName) + &quot;&lt;/ownerName&gt;&quot;);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline isComment="true" text="if (ownerEmail !== undefined) {">
														<outline text="add (&quot;&lt;ownerEmail&gt;&quot; + encodeXml (ownerEmail) + &quot;&lt;/ownerEmail&gt;&quot;);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"></outline>
													</outline>
												<outline text="//add body">
													<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"></outline>
													<outline text="//main head">
														<outline text="var cs;"></outline>
														<outline text="switch (theComments.length) {">
															<outline text="case 0:">
																<outline text="cs = &quot;No comments&quot;;"></outline>
																<outline text="break;"></outline>
																</outline>
															<outline text="case 1:">
																<outline text="cs = &quot;1 commenter&quot;;"></outline>
																<outline text="break;"></outline>
																</outline>
															<outline text="default:">
																<outline text="cs = theComments.length + &quot; commenters&quot;;"></outline>
																<outline text="break;"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text="add (&quot;&lt;outline text=\&quot;&quot; + cs + &quot;\&quot; icon=\&quot;comment\&quot;&gt;&quot;); indentlevel++;"></outline>
														</outline>
													<outline text="for (var i = 0; i &lt; theComments.length; i++) {">
														<outline text="var comment = theComments [i];"></outline>
														<outline text="var created = new Date (comment.whenCreated).toGMTString ();"></outline>
														<outline text="add (&quot;&lt;outline text=\&quot;&quot; + comment.commenter + &quot;\&quot; type=\&quot;include\&quot; url=\&quot;&quot; + comment.urlOpmlFile + &quot;\&quot; created=\&quot;&quot; + created + &quot;\&quot; /&gt;&quot;);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"></outline>
													<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"></outline>
													</outline>
												<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"></outline>
												<outline text="return (opmltext);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text=""></outline>
											<outline text="break;"></outline>
											</outline>
										<outline created="Wed, 22 Jan 2014 03:19:48 GMT" pgfnum="36229" text="case &quot;/isnameavailable&quot;: //7/12/15 by DW">
											<outline text="names.isNameAvailable (parsedUrl.query.name, function (theName, flAvailable, msg) {">
												<outline text="var jstruct = {">
													<outline text="name: theName,"></outline>
													<outline text="flAvailable: flAvailable,"></outline>
													<outline text="msg: msg"></outline>
													<outline text="};"></outline>
													</outline>
												<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
												<outline text="httpResponse.end (utils.jsonStringify (jstruct));"></outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/newoutlinename&quot;: //7/12/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline text="names.reserveName (parsedUrl.query.name, parsedUrl.query.url, screenName, function (theName, flNameWasCreated, msg) {">
													<outline text="var jstruct = {">
														<outline text="name: theName,"></outline>
														<outline text="flNameWasCreated: flNameWasCreated,"></outline>
														<outline text="msg: msg"></outline>
														<outline text="};"></outline>
														</outline>
													<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
													<outline text="httpResponse.end (utils.jsonStringify (jstruct));"></outline>
													<outline text="});"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/lookupname&quot;: //7/13/15 by DW">
											<outline text="names.lookupName (parsedUrl.query.name, function (data) {">
												<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
												<outline text="httpResponse.end (utils.jsonStringify (data));"></outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline text="case &quot;/chatlog&quot;: //8/26/15 by DW">
											<outline text="var name = parsedUrl.query.chatLog;"></outline>
											<outline text="var jstruct = getChatlogForClient (name);"></outline>
											<outline text="if (jstruct === undefined) {">
												<outline text="errorResponse ({message: &quot;Can't get the chatlog named \&quot;&quot; + name + &quot;\&quot; because it doesn't exist.&quot;});    "></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (jstruct);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/morechatlog&quot;: //12/31/15 by DW">
											<outline text="var name = parsedUrl.query.chatLog;"></outline>
											<outline text="var id = parsedUrl.query.idOldestPost;"></outline>
											<outline text="var ct = parsedUrl.query.ctPosts;"></outline>
											<outline text="var jstruct = getMoreChatLogPosts (name, id, ct);"></outline>
											<outline text="if (jstruct === undefined) {">
												<outline text="errorResponse ({message: &quot;Can't get more chatlog items before id &quot; + id + &quot; because the chatlog doesn't exist or the post doesn't.&quot;});"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (jstruct);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="break"></outline>
											</outline>
										<outline text="case &quot;/chatlogindex&quot;: //1/2/16 by DW">
											<outline text="var name = parsedUrl.query.chatLog;"></outline>
											<outline text="var jstruct = getChatLogIndex (name);"></outline>
											<outline text="if (jstruct === undefined) {">
												<outline text="errorResponse ({message: &quot;Can't get the index for the chatlog named \&quot;&quot; + name + &quot;\&quot; because it doesn't exist.&quot;});    "></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (jstruct);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="break"></outline>
											</outline>
										<outline text="case &quot;/chatloglist&quot;: //10/29/15 by DW">
											<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse (getChatLogList ());"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/getchatmessage&quot;: //9/20/15 by DW">
											<outline text="var nameChatLog = parsedUrl.query.chatLog; //10/26/15 by DW"></outline>
											<outline text="findChatMessage (nameChatLog, parsedUrl.query.id, function (flFound, item, subs, theTopItem) {">
												<outline text="if (flFound) {">
													<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse ({">
														<outline text="item: item"></outline>
														<outline text="});"></outline>
														</outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="errorResponse ({message: &quot;Can't get the message because it isn't in the server chat log.&quot;});    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/chatlike&quot;: //9/27/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline text="var nameChatLog = parsedUrl.query.chatLog; //10/26/15 by DW"></outline>
											<outline text="var id = parsedUrl.query.id;"></outline>
											<outline text="var flNotWhitelisted = chatAnyoneCanLike (nameChatLog); //4/10/16 by DW"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline text="if (screenName !== undefined) { //11/21/15 by DW">
													<outline text="if (flChatEnabled) {">
														<outline text="likeChatMessage (screenName, nameChatLog, id, function (fl) {">
															<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse ({">
																<outline text="flLiked: fl"></outline>
																<outline text="});"></outline>
																</outline>
															<outline text="});"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="errorResponse ({message: webhookNotEnabledError});    "></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="errorResponse ({message: &quot;Can't 'like' the message because your accessToken isn't valid.&quot;});    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="}, flNotWhitelisted);"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/openuserchatlog&quot;: //1/5/16 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline text="openUserChatlog (screenName, function (theLog) {">
													<outline text="if (theLog === undefined) {">
														<outline text="newUserChatlog (screenName, function (theNewLog) { //3/15/16 by DW">
															<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (theNewLog);"></outline>
															<outline text="});"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (theLog);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="});"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/opennamedchatlog&quot;: //1/6/16 by DW">
											<outline text="openUserChatlog (parsedUrl.query.chatLog, function (theLog) {">
												<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (theLog);"></outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/newincomingwebhook&quot;: //8/28/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var channel = parsedUrl.query.channel;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var description = parsedUrl.query.description;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var customName = parsedUrl.query.customname;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var urlCustomIcon = parsedUrl.query.urlcustomicon;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var customEmoji = parsedUrl.query.customemoji;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
													<outline text="errorResponse ({message: webhookAccessTokenError});    "></outline>
													<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
													</outline>
												<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
													<outline text="if ((flChatEnabled) &amp;&amp; (domainIncomingWebhook !== undefined) &amp;&amp; (okToCreateHook (screenName))) {">
														<outline text="newIncomingHook (screenName, channel, description, customName, urlCustomIcon, customEmoji, function (urlhook) {">
															<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (urlhook);"></outline>
															<outline text="});"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="errorResponse ({message: webhookNotEnabledError});    "></outline>
														<outline text="}"></outline>
														</outline>
													<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/newoutgoingwebhook&quot;: //8/31/15 by DW">
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessToken = parsedUrl.query.oauth_token;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var channel = parsedUrl.query.channel;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var triggerWords = parsedUrl.query.triggerwords;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var urlsToCall = parsedUrl.query.urlstocall;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var description = parsedUrl.query.description;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var customName = parsedUrl.query.customname;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var urlCustomIcon = parsedUrl.query.urlcustomicon;"></outline>
											<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var customEmoji = parsedUrl.query.customemoji;"></outline>
											<outline created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784" text="getScreenName (accessToken, accessTokenSecret, function (screenName) {">
												<outline created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793" text="if (screenName === undefined) {">
													<outline text="errorResponse ({message: webhookAccessTokenError});    "></outline>
													<outline created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797" text="}"></outline>
													</outline>
												<outline created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798" text="else {">
													<outline text="if ((flChatEnabled) &amp;&amp; (okToCreateHook (screenName))) {">
														<outline text="newOutgoingHook (screenName, channel, triggerWords, urlsToCall, description, customName, urlCustomIcon, customEmoji, function (token) {">
															<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (token);"></outline>
															<outline text="});"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="errorResponse ({message: webhookNotEnabledError});    "></outline>
														<outline text="}"></outline>
														</outline>
													<outline created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799" text="}"></outline>
													</outline>
												<outline created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785" text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/opensockets&quot;: //11/29/15 by DW -- for debugging">
											<outline created="Sat, 21 Jun 2014 14:43:33 GMT" pgfnum="42366" text="dataResponse (getOpenSocketsArray ());"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/httpreadurl&quot;: //5/9/16 by DW -- simple proxy to work around CORS limits">
											<outline text="request (parsedUrl.query.url, function (error, response, body) {">
												<outline text="if (error) {">
													<outline text="doHttpReturn (500, &quot;text/plain&quot;, error.message);"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="doHttpReturn (response.statusCode, response.headers [&quot;content-type&quot;], body);"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text=""></outline>
										<outline text="case &quot;/chat.css&quot;: //3/19/16 by DW">
											<outline text="requestHomeFile (lowerpath, function (err, data) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (err) {">
													<outline text="doHttpReturn (500, &quot;text/plain&quot;, err.message);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline text="doHttpReturn (200, &quot;text/css&quot;, data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/chat.js&quot;: //3/19/16 by DW">
											<outline text="requestHomeFile (lowerpath, function (err, data) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (err) {">
													<outline text="doHttpReturn (500, &quot;text/plain&quot;, err.message);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline text="var searchFor = &quot;twStorageData.urlTwitterServer = homePageConfig.urlTwitterServer;&quot;;"></outline>
													<outline text="var replaceWith = &quot;twStorageData.urlTwitterServer = \&quot;&quot; + homePageConfig.urlTwitterServer + &quot;\&quot;;&quot;;"></outline>
													<outline text="data = utils.replaceAll (data, searchFor, replaceWith);"></outline>
													<outline text="doHttpReturn (200, &quot;application/javascript&quot;, data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/config.json&quot;: //3/20/16 by DW">
											<outline text="doHttpReturn (200, &quot;application/json&quot;, getConfigJson ());"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;/template.html&quot;: //3/20/16 by DW">
											<outline text="request (&quot;http://1999.io/code/publish/template.html&quot;, function (error, response, body) {">
												<outline text="if (error) {">
													<outline text="doHttpReturn (500, &quot;text/plain&quot;, error.message);"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="doHttpReturn (200, &quot;text/html&quot;, body);"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/favicon.ico&quot;: //3/26/16 by DW">
											<outline text="returnRedirect (urlFavicon);"></outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline text="case &quot;/editor&quot;: //4/29/16 by DW">
											<outline text="requestEditor (parsedUrl.query.name, function (err, data) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (err) {">
													<outline text="doHttpReturn (500, &quot;text/plain&quot;, err.message);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline text="doHttpReturn (200, &quot;text/html&quot;, data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline text="case &quot;/plugin&quot;: //5/14/16 by DW">
											<outline text="requestPlugIn (parsedUrl.query.name, thePlugIns, &quot;plug-in&quot;, function (err, data) {">
												<outline created="Mon, 21 Apr 2014 23:12:55 GMT" pgfnum="40408" text="if (err) {">
													<outline text="doHttpReturn (500, &quot;text/plain&quot;, err.message);"></outline>
													<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40409" text="}"></outline>
													</outline>
												<outline created="Mon, 21 Apr 2014 23:12:58 GMT" pgfnum="40410" text="else {">
													<outline text="doHttpReturn (200, &quot;text/html&quot;, data);"></outline>
													<outline created="Mon, 21 Apr 2014 23:13:00 GMT" pgfnum="40411" text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
											</outline>
										<outline text=""></outline>
										<outline text="case &quot;/getmonthchatmessages&quot;: //5/31/16 by DW">
											<outline text="var monthnum = parsedUrl.query.monthnum;"></outline>
											<outline text="var yearnum = parsedUrl.query.yearnum;"></outline>
											<outline text="var nameChatLog = parsedUrl.query.chatLog; "></outline>
											<outline isComment="true" text=""></outline>
											<outline isComment="true" text="console.log (&quot;/getmonthchatmessages: monthnum == &quot; + monthnum + &quot;, yearnum == &quot; + yearnum + &quot;, nameChatLog == &quot; + nameChatLog);"></outline>
											<outline text=""></outline>
											<outline text="var jstruct = getMonthChatLogPosts (nameChatLog, monthnum, yearnum);"></outline>
											<outline text="if (jstruct === undefined) {">
												<outline text="errorResponse ({message: &quot;Can't get chatlog items for month # &quot; + monthnum + &quot; in &quot; + yearnum + &quot; because the chatlog doesn't exist or the posts don't.&quot;});"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse (jstruct);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text=""></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text=""></outline>
										<outline isComment="true" text="case &quot;/test1&quot;: //10/27/15 by DW">
											<outline text="postChatMessage (&quot;davewiner&quot;, &quot;blork&quot;, &quot;Oh the buzzing of the bees&quot;, undefined, undefined, undefined, undefined, true, function (err, idMessage) {">
												<outline text="if (err) {">
													<outline text="errorResponse ({message: err.message});    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline created="Thu, 26 Jun 2014 12:29:46 GMT" pgfnum="42486" text="dataResponse ({id: idMessage});"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084" text="default:">
											<outline text="var path = parsedUrl.pathname;"></outline>
											<outline text="path = decodeURI (path); //6/28/16 by DW"></outline>
											<outline text=""></outline>
											<outline text="if (theDomainMap [lowerhost] !== undefined) {">
												<outline text="path = theDomainMap [lowerhost] + path;"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="if (!utils.getBoolean (parsedUrl.query.noredirect)) { //7/17/16 by DW, noredirect param not specified or not true">
													<outline text="for (var x in theDomainMap) {">
														<outline text="if (utils.beginsWith (path, theDomainMap [x])) { ">
															<outline isComment="true" text="var addport = (port == 80) ? &quot;&quot; : &quot;:&quot; + port;"></outline>
															<outline text="var addport = &quot;&quot;;"></outline>
															<outline text="if (flUsePortInRedirect &amp;&amp; (port != 80)) { //2/27/18 by DW">
																<outline text="addport = &quot;:&quot; + port;"></outline>
																<outline text="}"></outline>
																</outline>
															<outline text="var urlRedirect = &quot;http://&quot; + x + addport + utils.stringDelete (path, 1, theDomainMap [x].length);"></outline>
															<outline text="returnRedirect (urlRedirect);"></outline>
															<outline text="return;"></outline>
															<outline text="}"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text=""></outline>
											<outline text="if ((path == &quot;/&quot;) &amp;&amp; (urlHomePageContent !== undefined)) { //10/11/15 by DW">
												<outline text="request (urlHomePageContent, function (error, response, body) {">
													<outline text="if (error) {">
														<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});"></outline>
														<outline text="httpResponse.end (&quot;Error accessing home page content: &quot; + error.message);    "></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="httpResponse.writeHead (response.statusCode, {&quot;Content-Type&quot;: response.headers [&quot;content-type&quot;]});"></outline>
														<outline text="httpResponse.end (body);    "></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="});"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="if (checkPathForIllegalChars (path)) {">
													<outline text="if (utils.endsWith (path, &quot;/&quot;)) {">
														<outline text="path += indexFileName;"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="store.serveObject (path, function (code, headers, bodytext, internalErrorCode) { //7/28/15 by DW -- try to serve the object from the store">
														<outline text="if (internalErrorCode !== undefined) { //5/2/16 by DW">
															<outline text="switch (internalErrorCode) {">
																<outline text="case 1: //path points to a directory, not a file">
																	<outline text="returnRedirect (path + &quot;/&quot;);"></outline>
																	<outline text="return;"></outline>
																	</outline>
																<outline text="}"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text=""></outline>
														<outline text="if (code == 500) { //6/25/16 by DW">
															<outline text="try {">
																<outline text="var jstruct = JSON.parse (bodytext);"></outline>
																<outline text="if (jstruct.code == &quot;NoSuchKey&quot;) {">
																	<outline text="get404page (function (bodytext, type) {">
																		<outline text="doHttpReturn (404, type, bodytext);"></outline>
																		<outline text="});"></outline>
																		</outline>
																	<outline text="return;"></outline>
																	<outline text="}"></outline>
																	</outline>
																<outline text="}"></outline>
																</outline>
															<outline text="catch (err) {">
																<outline text="}"></outline>
																</outline>
															<outline text="}"></outline>
															</outline>
														<outline text=""></outline>
														<outline text="headers [&quot;Access-Control-Allow-Origin&quot;] = &quot;*&quot;; //5/29/16 by DW"></outline>
														<outline text="httpResponse.writeHead (code, headers);"></outline>
														<outline text="httpResponse.end (bodytext);"></outline>
														<outline text="});"></outline>
														</outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});"></outline>
													<outline text="httpResponse.end (&quot;The file name contains illegal characters.&quot;);    "></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830" text="}"></outline>
										</outline>
									<outline created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808" text="break;"></outline>
									</outline>
								<outline created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804" text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="httpResponse.writeHead (503, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
					<outline text="httpResponse.end (&quot;Can't process the request because the server is disabled.&quot;);    "></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Tue, 29 Apr 2014 21:25:26 GMT" pgfnum="40668" text="}"></outline>
				</outline>
			<outline created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669" text="catch (tryError) {">
				<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
				<outline text="httpResponse.end (tryError.message);    "></outline>
				<outline created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670" text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadConfig (callback) { //5/8/15 by DW">
			<outline isComment="true" text="Changes">
				<outline text="5/8/15; 4:05:05 PM by DW">
					<outline text="Items read from the config file take precedence over environment variables. "></outline>
					</outline>
				</outline>
			<outline text="fs.readFile (fnameConfig, function (err, data) {">
				<outline text="if (!err) {">
					<outline text="var config = JSON.parse (data.toString ());"></outline>
					<outline isComment="true" text=""></outline>
					<outline text="console.log (&quot;\n\nloadConfig: config == &quot; + JSON.stringify (config, undefined, 4) + &quot;\n\n&quot;); //5/20/15 by DW"></outline>
					<outline isComment="true" text=""></outline>
					<outline text="if (config.enabled !== undefined) {">
						<outline text="flEnabled = utils.getBoolean (config.enabled);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.myDomain !== undefined) {">
						<outline text="myDomain = config.myDomain;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.s3Path !== undefined) {">
						<outline text="s3Path = config.s3Path;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.s3PrivatePath !== undefined) {">
						<outline text="s3PrivatePath = config.s3PrivatePath;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.twitterConsumerKey !== undefined) {">
						<outline text="twitterConsumerKey = config.twitterConsumerKey;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.twitterConsumerSecret !== undefined) {">
						<outline text="twitterConsumerSecret = config.twitterConsumerSecret;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.myPort !== undefined) {">
						<outline text="myPort = config.myPort;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.urlUserWhitelist !== undefined) {">
						<outline text="urlWhitelist = config.urlUserWhitelist;"></outline>
						<outline text="flWhitelist = true; //3/30/16 by DW"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.userWhitelist !== undefined) { //3/30/16 by DW">
						<outline text="userWhitelist = config.userWhitelist;"></outline>
						<outline isComment="true" text="console.log (&quot;loadConfig: userWhitelist == &quot; + userWhitelist);"></outline>
						<outline text="flWhitelist = true; "></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.longPollTimeoutSecs !== undefined) {">
						<outline text="longPollTimeoutSecs = config.longPollTimeoutSecs;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.bitlyApiKey !== undefined) {">
						<outline text="bitlyApiKey = config.bitlyApiKey;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.bitlyApiUsername !== undefined) {">
						<outline text="bitlyApiUsername = config.bitlyApiUsername;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.userDomain !== undefined) { //7/13/15 by DW">
						<outline text="userDomain = config.userDomain;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.basePublicUrl !== undefined) { //7/29/15 by DW">
						<outline text="basePublicUrl = config.basePublicUrl;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.where !== undefined) { //7/28/15 by DW">
						<outline isComment="true" text="console.log (&quot;loadConfig: config.where == &quot; + JSON.stringify (config.where, undefined, 4));"></outline>
						<outline text="if ((config.where.publicPath === undefined) || (config.where.privatePath === undefined)) {">
							<outline text="console.log (&quot;Can't use config.where because config.where.publicPath and/or config.where.privatePath were not specified.&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="flLocalFilesystem = utils.getBoolean (config.where.flUseLocalFilesystem); "></outline>
							<outline text="s3Path = config.where.publicPath;"></outline>
							<outline text="s3PrivatePath = config.where.privatePath;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.flChatEnabled !== undefined) { //8/25/15 by DW">
						<outline text="flChatEnabled = utils.getBoolean (config.flChatEnabled);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.flWatchAppDateChange !== undefined) { //8/26/15 by DW">
						<outline text="flWatchAppDateChange = utils.getBoolean (config.flWatchAppDateChange);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.fnameApp !== undefined) { //8/26/15 by DW">
						<outline text="fnameApp = config.fnameApp;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.domainIncomingWebhook !== undefined) { //8/28/15 by DW">
						<outline text="domainIncomingWebhook = config.domainIncomingWebhook;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.maxChatLog !== undefined) { //8/29/15 by DW">
						<outline text="var theMax = Number (config.maxChatLog);"></outline>
						<outline text="if (theMax != NaN) {">
							<outline text="maxChatLog = theMac;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.usersWhoCanCreateWebhooks !== undefined) { //8/30/15 by DW">
						<outline text="usersWhoCanCreateWebhooks = config.usersWhoCanCreateWebhooks;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.nameWebhookDefaultChannel !== undefined) { //9/3/15 by DW">
						<outline text="nameWebhookDefaultChannel = config.nameWebhookDefaultChannel;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.chatRssHeadElements !== undefined) { //10/6/15 by DW">
						<outline text="chatRssHeadElements = config.chatRssHeadElements;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.urlPublicFolder !== undefined) { //10/6/15 by DW">
						<outline text="urlPublicFolder = config.urlPublicFolder;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.urlHomePageContent !== undefined) { //10/11/15 by DW">
						<outline text="urlHomePageContent = config.urlHomePageContent;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.s3RssPath !== undefined) { //10/12/15 by DW">
						<outline text="s3RssPath = config.s3RssPath;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.websocketPort !== undefined) { //11/11/15 by DW">
						<outline text="websocketPort = config.websocketPort;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.usersWhoCanModerate !== undefined) { //11/30/15 by DW">
						<outline text="usersWhoCanModerate = config.usersWhoCanModerate;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.chatLogs !== undefined) { //10/26/15 by DW">
						<outline text="chatLogArray = config.chatLogs;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.flForceTwitterLogin !== undefined) { //2/19/16 by DW">
						<outline text="flForceTwitterLogin = config.flForceTwitterLogin;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.homePage !== undefined) { //3/21/16 by DW">
						<outline text="homePageConfig = config.homePage;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.updates !== undefined) { //3/25/16 by DW">
						<outline text="update.init (config.updates);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline isComment="true" text="if (config.websocketDomain !== undefined) { //4/17/16 by DW">
						<outline text="websocketDomain = config.websocketDomain;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.editors !== undefined) { //4/29/16 by DW">
						<outline text="theEditors = config.editors;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.plugIns !== undefined) { //5/14/16 by DW">
						<outline text="thePlugIns = config.plugIns;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.domains !== undefined) { //5/27/16 by DW">
						<outline text="theDomainMap = config.domains;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.facebookAppId !== undefined) { //5/2/16 by DW">
						<outline text="facebookAppId = config.facebookAppId;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.url404page !== undefined) { //6/25/16 by DW">
						<outline text="url404page = config.url404page;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.flUsePortInRedirect !== undefined) { //2/27/18 by DW">
						<outline text="flUsePortInRedirect = config.flUsePortInRedirect;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="//give values to optional params -- 3/24/16 by DW">
						<outline text="if ((basePublicUrl === undefined) &amp;&amp; (myDomain !== undefined)) {">
							<outline text="basePublicUrl = &quot;http://&quot; + myDomain + &quot;/&quot;;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (urlPublicFolder === undefined) {">
							<outline text="if (basePublicUrl !== undefined) {">
								<outline text="urlPublicFolder = basePublicUrl;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="if (myDomain !== undefined) {">
									<outline text="urlPublicFolder = &quot;http://&quot; + myDomain + &quot;/&quot;;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text=""></outline>
					<outline text="store.init (flLocalFilesystem, s3Path, s3PrivatePath, basePublicUrl);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function startup () {">
			<outline isComment="true" text="Changes">
				<outline text="9/19/19; 2:31:28 PM by DW">
					<outline text="Allow the app that launches us to determine the port we run on by setting process.env.PORT."></outline>
					</outline>
				</outline>
			<outline text="function notDefined (value, name) {">
				<outline text="if (value === undefined) {">
					<outline text="console.log (&quot;Can't start the server because the \&quot;&quot; + name + &quot;\&quot; parameter is not specified.&quot;);"></outline>
					<outline text="return (true);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="loadConfig (function () {">
				<outline text="myPort = process.env.PORT || myPort; //9/19/19 by DW"></outline>
				<outline text=""></outline>
				<outline created="Mon, 03 Feb 2014 18:54:58 GMT" pgfnum="36999" text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + myPort + &quot;, freemem = &quot; + gigabyteString (os.freemem ()) + &quot;, urlWhitelist == &quot; + urlWhitelist + &quot;\n&quot;);"></outline>
				<outline text=""></outline>
				<outline text="if (notDefined (myDomain, &quot;myDomain&quot;)) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (notDefined (s3Path, &quot;s3Path&quot;)) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (notDefined (s3PrivatePath, &quot;s3PrivatePath&quot;)) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (notDefined (twitterConsumerKey, &quot;twitterConsumerKey&quot;)) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (notDefined (twitterConsumerSecret, &quot;twitterConsumerSecret&quot;)) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (notDefined (myPort, &quot;myPort&quot;)) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (flEnabled === undefined) { //11/16/14 by DW">
					<outline text="flEnabled = true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="flEnabled = utils.getBoolean (flEnabled);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="//a little defensive driving -- 5/8/15; 6:16:09 PM by DW">
					<outline text="if (urlWhitelist !== undefined) {">
						<outline text="if (urlWhitelist.length == 0) { //yes, this happens">
							<outline text="urlWhitelist = undefined; "></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text=""></outline>
				<outline text="utils.getFileModDate (fnameApp, function (appModDate) { //set origAppModDate -- 8/26/15 by DW">
					<outline text="origAppModDate = appModDate;"></outline>
					<outline created="Tue, 11 Feb 2014 22:54:27 GMT" pgfnum="37504" text="loadServerStats (function () {">
						<outline text="loadServerPrefs (function () {">
							<outline text="loadWebhooks (function () { //8/28/15M by DW">
								<outline text="loadChatLogs (function () { //8/25/15 by DW">
									<outline text="readUserWhitelist (function () {">
										<outline text="openAllUserChatlogs (function () { //3/2/16 by DW">
											<outline text="names.init (s3PrivatePath); //7/12/15 by DW"></outline>
											<outline text="//start up http server">
												<outline text="try {">
													<outline text="http.createServer (handleHttpRequest).listen (myPort);"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="catch (err) {">
													<outline text="console.log (&quot;startup: error creating HTTP server, err.message == &quot; + err.message + &quot;, myPort == &quot; + myPort);"></outline>
													<outline text="}"></outline>
													</outline>
												</outline>
											<outline text="if (websocketPort !== undefined) { //11/11/15 by DW">
												<outline text="console.log (&quot;startup: websockets port is &quot; + websocketPort);"></outline>
												<outline isComment="true" text="websocket.createServer (handleWebSocketConnection).listen (websocketPort);"></outline>
												<outline text="webSocketStartup (websocketPort); //11/29/15 by DW"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="setInterval (everySecond, 1000); "></outline>
											<outline isComment="true" text="setInterval (everyMinute, 60000); "></outline>
											<outline text="});"></outline>
											</outline>
										<outline text="});"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="startup ();"></outline>
		</body>
	</opml>
